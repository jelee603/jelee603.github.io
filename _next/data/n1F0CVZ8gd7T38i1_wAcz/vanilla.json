{"pageProps":{"post":{"title":"Vanilla JS 다뤄보기","slug":"vanilla","date":"2021-10-30 23:20:00","content":"<p>일반적으로 프레임워크를 사용하지 않고 자바스크립트를 다루는 방법은 있습니다.\n너무 프레임워크에 익숙해져 그 방법을 잊어버리지 않게 적습니다.</p>\n<p>먼저 html 파일에서 js를 로드를 합니다.</p>\n<pre><code>//html\n&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n    &#x3C;head>\n        &#x3C;meta charset=\"UTF-8\" />\n        &#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        &#x3C;title>Document&#x3C;/title>\n    &#x3C;/head>\n    &#x3C;body>\n      &#x3C;script type=\"text/javascript\" src=\"[file].js\" />\n    &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>css 스크립트는  태그 사이에 작성합니다.</p>\n<pre><code>&#x3C;head>\n  &#x3C;style lang=\"text/css\">&#x3C;/style>\n&#x3C;/head>\n</code></pre>\n<p>간단하게 HTML에서 자바스크립트를 사용하게 되었습니다.</p>\n<p>그런데 모듈화라는 개념이 생기면서,\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code></a> 를 통해 스크립트 모듈 파일을 가져오게 되었습니다.</p>\n<p><code>export</code>로 파일을 내보냈을 경우에 html 에서는 위와 같은 방법으로는 오류를 만나게 됩니다.</p>\n<blockquote>\n<p>Uncaught SyntaxError: Cannot use import statement outside a module</p>\n<p>해결 방법:</p>\n<pre><code>&#x3C;body>\n  &#x3C;script type=\"module\" src=\"[file].js\" />\n&#x3C;/body>\n</code></pre>\n</blockquote>\n<p><code>script type</code> 을 모듈이라 명시해주면서 문제를 해결할 수 있습니다.\n이렇게 간단한 방법도 매번 프레임워크의 렌더함수만 작성하다보면 잊어버리게 됩니다.</p>\n<p>다음은 만들어진 여러개의 모듈파일을 한번에 압축해주는 방법인 웹팩으로 HTML 파일에서 로드하는 방법을 적어봅니다.</p>\n<p><a href=\"https://webpack.js.org/guides/getting-started\">웹팩</a>을 설치하고, 프로젝트 구조를 다음과 같이 추가해서 세팅해줍니다.</p>\n<pre><code>npm init -y\nnpm install webpack webpack-cli --save-dev\n</code></pre>\n<h5>project 구조</h5>\n<pre><code>webpack-demo\n |- /dist\n+   |- index.html\n- |- index.html\n+ |- /src\n+    |- index.js\n+ |- webpack.config.js\n |- package.json\n</code></pre>\n<p>웹팩 설정 파일에서 entry 와 output 을 설정하면, entry 에 설정된 파일을 로드해서 output 의 번들파일을 생성해줍니다. <code>index.js</code> 모듈 파일을 호출하도록 해줍니다.</p>\n<pre><code>// src/index.js\n\nimport file from '[file].js';\n</code></pre>\n<pre><code>// webpack.config.js\n\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};\n</code></pre>\n<p>패키지 설정파일에 웹팩을 실행할 스크립트를 작성해줍니다.</p>\n<pre><code>// package.json\n\n{\n   \"scripts\": {\n    \"build\": \"webpack --mode development\"\n   }\n}\n</code></pre>\n<p><code>npm run build</code> 실행하면, 'dist' 경로에 'main.js' 라는 파일이 생성됩니다.\nHTML 파일에서 생성된 파일을 로드하도록 추가해주면 됩니다.</p>\n<pre><code>// dist/index.html\n\n&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>Document&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;script src=\"./main.js\">&#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n","category":"JavaScript"}},"__N_SSG":true}