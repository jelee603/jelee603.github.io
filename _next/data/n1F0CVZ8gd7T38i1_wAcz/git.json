{"pageProps":{"post":{"title":"Git 이야기","slug":"git","date":"2019-08-08","content":"<h4>안 쓰면 잊어버리는 Git 명령어</h4>\n<p>Git은 만들고 나면 크게 문제가 없고, 충돌나지 않으면 별 문제없이 편하지만, 가끔 발생하는 문제에 대해서는 조치 방법을 위해 정리해둘 필요가 있다.</p>\n<p><strong>Git First</strong></p>\n<pre><code>// git clone 할때, 레포가 없다하면.. 주소를 변경해주자..\nhttps://깃ID@github.com/레포주소 git clone XXX git init git add README.md git\ncommit -m 'first commit' git push origin main\n</code></pre>\n<p><strong>Git Branch</strong></p>\n<pre><code>git checkout -b develop(브랜치명) git add . git commit -m 'xxx' git push origin\ndevelop // hotfix git checkout main git checkout -b hotfix/YYYYMMDD\n</code></pre>\n<p>gitignore 파일을 만들고 추후에 파일들을 삭제하고 싶을땐, 항상 캐시문제로 stage 에 올라간 파일을 삭제하기가 어려웠다.\n<a href=\"https://brunch.co.kr/@hopeless/9\">hopeless</a> 블로그에서 보면 제외할 폴더나 파일을 cached 된걸 삭제해줘야한다고 한다.</p>\n<p><strong>Git Ignore</strong></p>\n<pre><code>// .gitignore 파일에 제외할 폴더 추가 ex) .idea/ git rm -r --cached . git add .\ngit commit -m 'ignore 수정'\n</code></pre>\n<p><strong>Git Rebase</strong></p>\n<pre><code>git rebase -i HEAD~2 // (직전 커밋한 갯수 포함) 병합할 갯수를 지정 pick -> s //\npick 을 squash (s) 로 변경 :wq\n</code></pre>\n<p><strong>Git Delete</strong></p>\n<pre><code>git branch -d feature/dev-1 git push origin -d feature/dev-1\n</code></pre>\n<p><strong>Git Conflict</strong></p>\n<pre><code>// 1. IDE 를 활용한 해결 방법 Webstorm : VCS > Git > Resolve Confilicts\nTerminal: git merge --continue :qa // 2. 수동 해결 방법 // HEAD ~ === 영역이\n원본이므로 수정하고, 다시 commit 해준다. git add . git commit -m 'confilct\nresolved'\n</code></pre>\n<p><strong>Git Cherry Pick</strong></p>\n<pre><code>git checkout release git cherry-pick #135bc\n</code></pre>\n<p><strong>Git Merge</strong></p>\n<pre><code>git checkout A git merge B (Fast-forward : 합칠때 하나로 만든다.) git merge\n--no-ff B (합칠때 merge 커밋을 만든다) // 충돌난 파일 목록을 확인한다. git\nstatus // git merge 해결방법 &#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD # 현재 checkout 한 A 브랜치의 상태\n///// # 구분자 >>>>>> B # 병합하려는 대상 B mereg conflic 수정 후 add, commit\n진행하면 정상적으로 merge commit이 진행된다.\n</code></pre>\n<p><strong>Git Merge 취소하기</strong></p>\n<pre><code>git merge --abort\n</code></pre>\n<p><strong>Git Reset</strong>\n해당 커밋을 push 했지만 되돌리고 싶을때 사용한다. (한번에 점프고하고 싶을때, 사용하지만 가급적이면 사용하지 않는다)</p>\n<pre><code>git reset --hard HEAD^\n</code></pre>\n<p><strong>Git Revert</strong>\n해당 커밋만 취소하고 싶을 때 사용한다. WebStorm IDE 에서는 Revert 기능을 제공하고 있다. (우클릭 - Git - Revert)</p>\n<pre><code>git revert &#x3C;되돌릴 커밋>\n</code></pre>\n<p><strong>Git Permission denied (Window10)</strong></p>\n<pre><code>// 로컬에 저장된 계정이 있으면, 새 계정으로 다시 로그인을 해줘야한다. git config\n--global user.name git config --global user.email\n</code></pre>\n<p><strong>Git 취약점 해결방법</strong></p>\n<pre><code>npm audit fix\n</code></pre>\n","category":"Git"}},"__N_SSG":true}