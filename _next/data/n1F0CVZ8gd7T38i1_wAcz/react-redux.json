{"pageProps":{"post":{"title":"React Redux","slug":"react-redux","date":"2021-11-26 13:45:56","content":"<h2>리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다.</h2>\n<ul>\n<li>여러 컴포넌트에 걸쳐 전달하게 될 경우, 불필요한 props 가 늘어날 수 있다.</li>\n<li>형제 컴포넌트에서 불필요한 렌더링이 일어날 수 있다.</li>\n<li>최상위 컴포넌트에서 상태관리 로직이 많아 길어지는 현상도 있을 수 있다.</li>\n</ul>\n<h2>리덕스의 동작 과정</h2>\n<pre><code>1. 리덕스는 스토어라는 객체 내부에 상태를 담게 됩니다.\n\n2. 상태를 변경시킬 때, 액션을 전달하는데 이 과정을 디스패치라합니다.\n\n3. 스토어가 액션을 받으면 리듀서가 상태를 변화시키는 로직으로 어떤 작업을 할지 정합니다.\n\n4. 액션 처리 후에 새 상태를 스토어에 담습니다.\n\n5. 스토어 안에 있는 상태가 바뀌면 구독하고 있는 컴포넌트에게 전달합니다.\n</code></pre>\n<pre><code>yarn add redux react-redux\n</code></pre>\n<p>타입스크립트 공식문서 <a href=\"https://ko.redux.js.org/recipes/usage-with-typescript\">예제</a>는 actions 와 reducer 파일을 분리했지만, 공부하는 입장에서 분리하지 않고 하나로 보면 아래와 같습니다.</p>\n<p><code>Action</code> 접미사를 붙인 객체에는</p>\n<p>type 에 넘겨줄 값들의 타입을 정의하고,</p>\n<p>payload 에 리듀서 상태를 변경하는 로직을 넣어줍니다.</p>\n<pre><code>// src/store/system.ts\n\nexport const UPDATE_SESSION = 'UPDATE_SESSION'\nexport interface SystemState {\n  loggedIn: boolean\n  session: string\n  userName: string\n}\n\ninterface UpdateSessionAction {\n  type: typeof UPDATE_SESSION\n  payload: SystemState\n}\n\n// 액션은 상태 변화 시킬 때 참조하는 객체를 정의한다.\nexport type SystemActionTypes = UpdateSessionAction\n\nconst initialState: SystemState = {\n  loggedIn: false,\n  session: '',\n  userName: ''\n}\n\n// 리듀서는 액션으로부터 받은 상태 변화 로직만 처리한다.\nexport function systemReducer(\n  state = initialState,\n  action: SystemActionTypes\n): SystemState {\n  switch (action.type) {\n    case UPDATE_SESSION: {\n      return {\n        ...state,\n        ...action.payload\n      }\n    }\n    default:\n      return state\n  }\n}\n</code></pre>\n<pre><code>// src/store/index.ts\n\nimport { systemReducer } from './system/reducers';\nimport { chatReducer } from './chat/reducers';\n\nconst rootReducer = combineReducers({\n  system: systemReducer,\n  chat: chatReducer,\n});\n\n// 2개이상의 리듀서를 합쳐서 내보낸다.\nexport type RootState = ReturnType&#x3C;typeof rootReducer>;\n</code></pre>\n<p>index 파일에서 위에 정의했던 리듀서를 합쳐서 내보내주게 됩니다.</p>\n<p><a href=\"https://lunit.gitbook.io/redux-in-korean/recipes/structuringreducers/usingcombinereducers\">combineReducers</a>를 사용하면 여러개의 리듀서를 한번에 호출할 수 있습니다.</p>\n<pre><code>// src/hooks/useUpdateSession.ts\n\nimport { useDispatch } from 'react-redux';\nimport { useCallback } from 'react';\nimport { SystemActionTypes } from '../store/system';\n\nexport default function useUpdateSession() {\n  const dispatch = useDispatch();\n  return useCallback((text) => dispatch(SystemActionTypes(text)), [dispatch]);\n}\n</code></pre>\n<p>useDispatch 함수는 액션을 전달합니다.\nhooks 디렉토리에는 이러한 dispatch 동작들을 정해둡니다.</p>\n<pre><code>// src/components/**.tsx\n\nconst updateSession = useUpdateSession({loggedIn: true, session: '', userName: ''};\n</code></pre>\n<p>화면에서 사용할 때는, <code>use</code> 접두사를 사용한 hook 을 사용합니다.</p>\n<p>디버깅으로 리덕스로 변경된 값을 확인하는 방법은 크롬 확장자 도구에 리덕스 개발자도구(<a href=\"https://react.vlpt.us/redux/06-redux-devtools.html\">적용 방법</a>)를 설치하시면 됩니다.</p>\n<pre><code>$ yarn add redux-devtools-extension\n\n// index.ts\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst store = createStore(rootReducer, composeWithDevTools());\n</code></pre>\n<h2>Reference</h2>\n<ul>\n<li>https://ko.redux.js.org/recipes/usage-with-typescript/</li>\n<li>https://velog.io/@velopert/use-typescript-and-redux-like-a-pro</li>\n<li>https://react.vlpt.us/redux/06-redux-devtools.html</li>\n</ul>\n","category":"React"}},"__N_SSG":true}