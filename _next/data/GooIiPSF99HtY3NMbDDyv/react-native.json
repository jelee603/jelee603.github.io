{"pageProps":{"post":{"title":"React Native","slug":"react-native","date":"2022-03-17 14:00:00","content":"<p>리액트 네이티브 앱은 <a href=\"https://docs.expo.dev/get-started/create-a-new-app\">Expo CLI</a>를 설치해서 시작합니다.</p>\n<h2>설치하기</h2>\n<pre><code>$ expo init my-app\n$ cd my-app\n$ expo start\n</code></pre>\n<p>핸드폰에 Expo 앱이 설치하고 <code>expo start</code> 실행 후 생성된 QR 코드를 핸드폰 카메라로 인식해서 링크로 이동합니다.\n와이파이로 같은 네트워크에 있다면, 화면을 확인할 수 있습니다.</p>\n<h2>Async Storage 적용하기</h2>\n<p><a href=\"https://reactnative.dev/docs/asyncstorage\">공식 문서</a>에 <code>react-native</code>패키지에서 사용하던 방법이 현재는 <code>react-native-async-storage</code>에서 사용하는 방법으로 권장됩니다.</p>\n<p><a href=\"https://www.youtube.com/watch?v=aCe0h50hyCc\">유튜브 영상</a>을 보면서 예제를 해봤습니다.</p>\n<pre><code>// App.js\n\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function App() {\n  let index = 0;\n  const saveData = async () => {\n    try {\n      let user = `Jelee ${index++}`;\n      AsyncStorage.setItem('user', user);\n    } catch (error) {\n      // Error saving data\n    }\n  };\n\n  const displayData = async () => {\n    try {\n      let user = await AsyncStorage.getItem('user');\n      alert(user);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    &#x3C;View style={styles.container}>\n      &#x3C;TouchableOpacity onPress={saveData}>\n        &#x3C;Text>Click me to save data&#x3C;/Text>\n      &#x3C;/TouchableOpacity>\n      &#x3C;TouchableOpacity onPress={displayData}>\n        &#x3C;Text>Click me to display data&#x3C;/Text>\n      &#x3C;/TouchableOpacity>\n    &#x3C;/View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n</code></pre>\n<p>버튼을 클릭하면, 카운트를 계속 증가시켜 스토리지에 추가해보고 <code>Click me to display data</code>버튼을 클릭하면 증가한 숫자가 팝업창에 뜹니다.</p>\n<h2>리액트 개발 툴</h2>\n<p>애뮬레이터를 실행했을 때, 개발 툴 명령어를 설치하면 개발자 도구로 UI 컴포넌트 트리를 확인할 수 있습니다.\n<a href=\"https://jeffgukang.github.io/react-native-tutorial/docs/basic-tutorial/basic-functions/02-debugging/debugging-kr.html\">참고</a></p>\n<h2>리액트 네이티브 버그 해결방안</h2>\n<blockquote>\n<p>Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports. \nCheck the render method of <code>App</code>. \n해결 방법:\nimport 한 경우 export 가 잘 되었는지 확인한다. 책에선 <code>import { AppLoading } from 'expo'</code> 로 사용했던 것이 그 후로 버전이 바뀌면서 <a href=\"https://docs.expo.dev/versions/latest/sdk/app-loading/\">expo-app-loading</a> 모듈 설치 방법으로 변경되었다.그래서 위와 같이 import 는 했는데, 올바른 모듈이 없을 경우에 발생한다.</p>\n</blockquote>\n<hr>\n<h5>XDLError: ValidationError: \"scheme\" is not allowed</h5>\n<blockquote>\n<p>XDLError: ValidationError: \"scheme\" is not allowed \n해결 방법:\n$ rm -rf .expo  //디렉토리를 삭제하고 실행해본다. <a href=\"https://github.com/expo/expo-cli/issues/2951\">[자세히]</a></p>\n</blockquote>\n<h5>React Native <code>RuntimeError: abort(Error: xcrun exited with non-zero code: 2</code> on iOS simulator</h5>\n<p>https://github.com/expo/expo-cli/issues/2413</p>\n","category":"React"}},"__N_SSG":true}