{"pageProps":{"post":{"title":"컨퍼런스 정리(2) - 몇 천 페이지의 유저 가이드를 새로 만들며","slug":"youtube-ab180-2023","date":"2023.11.15","content":"<p>YouTube URL: <a href=\"https://www.youtube.com/watch?v=V2E4ft7vqao\">https://www.youtube.com/watch?v=V2E4ft7vqao</a> - FECONF 2023</p>\n<h2>목차</h2>\n<ul>\n<li><p><a href=\"#%EC%9C%A0%EC%A0%80-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC\">유저 가이드에 관하여</a></p>\n<ul>\n<li>유저 가이드가 무엇인가요?</li>\n<li>왜, 어떻게 갈아엎었나요?</li>\n<li>리액트 서버 컴포넌트에 배팅하기</li>\n</ul>\n</li>\n<li><p><a href=\"#%EA%B0%9C%EB%B0%9C-%EA%B3%BC%EC%A0%95%EC%97%90%EC%84%9C-%EB%A7%8C%EB%82%9C-%EB%AC%B8%EC%A0%9C%EB%93%A4\">개발 과정에서 만난 문제들</a></p>\n<ul>\n<li>접혀진 아코디언은 검색할 수 없나요?</li>\n<li>정적 사이트 생성은 적절한 방법인가요?</li>\n</ul>\n</li>\n<li><p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>\n<h2>유저 가이드에 관하여</h2>\n<p>마케팅 성과분석 도구인 대시보드를 만드는 과정에서 고객의 궁금증과 사용자의 허들을 낮추기 위해 유저 가이드북을 제작하게 되었다. 회사에서 PW팀에서 운영관리를 해주고 있다. </p>\n<p>기존에는 Zendesk라는 <a href=\"https://namu.wiki/w/CMS#toc:~:text=%EA%B8%88%EC%9C%B5%EC%9E%90%EC%82%B0%20%EA%B2%B0%EC%A0%9C%20%EB%B0%A9%EB%B2%95.-,2.,-Contents%20Management%20System\">CMS</a> 서비스로 유저 가이드를 운영</p>\n<p>레이아읏, 테마를 핸들바 형식으로 작성하고, 업로드(WYSIWYG 에디터를 이용)\n글을 작성하면 HTML 코드를 생성해주고 있다. </p>\n<blockquote>\n<p>문제 정의</p>\n<ul>\n<li>중복되는 내용과 화면이 상당히 많다. -&gt; 콘텐츠 모델, 컴포넌트의 개념이 없다.</li>\n<li>HTML copy, past 방식으로 글을 작성하고 있었다.</li>\n<li>반복되는 내용을 찾거나 일괄 수정하기도 어려움 -&gt; 콘텐츠, 스타일, 스크립트가 강결합되어 유지보수가 어렵다.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>목표</p>\n<ul>\n<li>불편함을 해소할 수 있는 방법 -&gt; Headless CMS가 좋겠어!</li>\n<li>글 작성시에 구조화 가능한 콘텐츠를 작성하고, 프론트엔드 팀은 API를 통해서 사이트를 만들 수 있다.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>기술 선택</p>\n<ul>\n<li>가장 익숙한 라이브러리인 리액트를 선택하고, 서버 컴포넌트를 다뤄보고 싶어서 Next.JS 의 앱 라우터를 선택</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>목표 재정의</p>\n<ul>\n<li>코드블럭, 수형도 등 다양한 콘텐츠를 보여줘야한다.(많은 라이브러리 사용으로 번들 사이즈 증가) </li>\n<li>GraphQL로 콘텐츠를 쿼리해 가져와야한다.<ul>\n<li>쿼리 제한을 고려해 여러번 API를 호출해 조합해야한다</li>\n<li><a href=\"https://namu.wiki/w/BFF#:~:text=047AN%2C%20063AN-,3.,-Backend%20For%20Frontend\">BFF</a>를 만들어서 편하게 데이터를 받을 수는 없을까?</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>해결 방법</p>\n<ul>\n<li>클릭, 애니메이션 등 클라이언트에서 상호작용이 이뤄지는 컴포넌트와 로직을 분리한다.<ul>\n<li>나머지는 서버에서 렌더링 작업을 수행한 뒤 클라이언트에 결과만 전송한다 (번들 사이즈 감소)</li>\n</ul>\n</li>\n<li>DB 쿼리나 API 호출도 컴포넌트 안에서 결과만 클라이언트로 전송한다.<ul>\n<li>작업이 오래 걸리는 컴포넌트는 Suspense 로 묵어 점진적으로 렌더링할 수 있게 Streaming 구현</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2>개발 과정에서 만난 문제들</h2>\n<p>상대적으로 간단하게 풀렸지만 고민해볼 요소가 있는 문제 2가지.</p>\n<blockquote>\n<p>문제 정의 1</p>\n<ul>\n<li>Command + F 로 특정 검색했을 때, 해당 내용이 아코디언 안에 있다면 자동으로 아코디언이 펼쳐졌으면 좋겠다.</li>\n</ul>\n</blockquote>\n<p>상대적으로 최근에 추가된 HTML 스펙에서 방법을 찾을 수 있었다. (Chrome 102 부터 가능) \n이 스펙은 요소는 숨겨져 있지만 렌더링 상태는 유지될 수 있는 <code>content-visibility: hidden</code>스타일이 기본으로 적용되어 있다. </p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> hidden<span class=\"token operator\">=</span><span class=\"token string\">\"until-found\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleBeforeMatch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforematch\"</span><span class=\"token punctuation\">,</span> handleBeforeMatch<span class=\"token punctuation\">)</span></code></pre><p>검색에서 일치하는 항목이 영역 내에 있을 때 아코디언을 펼치는 핸들러를 선언해준다. 해당 DOM에 비포 매치이벤트에 대한 이벤트 리스너를 등록해준다. 하지만, jsx에서 <code>hidden</code>속성이 주입되지 않았다. 렌더링 단계를 나눠 문제를 탐색했다. </p>\n<p>** 렌더링 단계를 나눠 문제 탐색하기 **</p>\n<p>jsx 에서 작성된 객체를 리액트에서 리액트 컴포넌트로 변환을 하고, 상태를 업데이트, 이펙트 같은 렌더링 대상을 연산한 뒤에 ReactDOM이 실제 DOM에 반영을 한다. 동시에 DOM API를 연동해서 클릭 같은 인터렉션을 사용할 수 있다. 정확한 설명은 아니지만, 대략적인 렌더링 흐름을 보자면 이렇게 볼 수 있다. </p>\n<p>hidden 속성을 바꾼 위치는 ReactDOM 이 부분을 확인해볼 수 있다.\n실제 ReactDOM 코드를 분석.</p>\n<p><img src=/images/post/youtube-ab180-2023_1.png alt=ReactDOM 코드 width=\"100%\"/></p>\n<p>케이스를 확인해보면, function, symbol이 아니면 모두 빈 문자로 변환된다. 프로덕션에서 발생 가능한 보안 문제나 충돌을 최소화하기 위해서 리액트 속성값의 검증 로직이 들어가 있다. </p>\n<p>이 문제의 PR 이슈 사례를 첨부. 하지만, 1년 전에 남긴 이슈에 답변이 없음..😢\n코어 라이브러리가 접근성을 위한 기능을 제한한 것으로 우회하는 방향을 찾아내야했다.</p>\n<p>ReactDOM을 건드릴 수 없다면, 렌더링에 관여하는 다른 요소를 속이기로 했다. DOM에 그려지는 단계 HTML에서 변경.</p>\n<ul>\n<li>HTML은 기본적으로 대소문자를 구분하지 않는다. </li>\n<li>ReactDOM은 정의된 소문자, /on[A-Z]/로 시작되는 속성만 검증한다.</li>\n</ul>\n<p>jsx를 대문자로 표시를 하면, ReactDOM의 검증 로직에서 벗어날 수 있다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token operator\">-</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> hidden<span class=\"token operator\">=</span><span class=\"token string\">\"until-found\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">+</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token constant\">HIDDEN</span><span class=\"token operator\">=</span><span class=\"token string\">\"until-found\"</span><span class=\"token operator\">></span></code></pre><p>변경하면 잘 동작하는 것을 예시 영상으로 보여줌. 크롬 인스펙터를 확인하면, hidden 속성이 잘 들어가 있음.</p>\n<blockquote>\n<p>문제 정의 1-1</p>\n<ul>\n<li>아코디언을 접혔다 펼쳐지는 높이가 동적으로 변하는 애니메이션을 적용하고 싶다.</li>\n</ul>\n</blockquote>\n<p>애니메이션은 기본적으로 DOM의 영역이고, 애니메이션 실행 관련 제어를 위해서는 리액트에서 제어해야한다.\n<code>content-visibility: hidden</code> 스타일을 애니메이션 실행 중에 제거를 해야 애니메이션이 동작할 수 있다. </p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isAnimating<span class=\"token punctuation\">,</span> setIsAnimating<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setIsAnimating</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">,</span> nextIsOpened <span class=\"token operator\">?</span> variants<span class=\"token punctuation\">.</span>show <span class=\"token operator\">:</span> variants<span class=\"token punctuation\">.</span>hide<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsAnimating</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> hiddenProp <span class=\"token operator\">=</span> isAnimating <span class=\"token operator\">||</span> isOpen <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> <span class=\"token string\">'until-found'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token constant\">HIDDEN</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hiddenProp<span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre><p>애니메이션 실행 전/후로 상태를 변경한다. \n애니메이션이 샐행 중이거나 열려있을 때 Hidden 속성을 비우도록 처리해준다.</p>\n<p>CMS 예시를 담은 보일러 플레이트는 <a href=\"https://velog.io/@lky5697/what-the-heck-is-ssg-static-site-generation-explained-with-nextjs\">SSG</a> 로 생성된다.\n콘텐츠 변경이 자주 있지 않고, 초기 로딩 속도, SEO 관련 지표 향상 등이 주 목적이다.</p>\n<blockquote>\n<p>문제 정의 2</p>\n<ul>\n<li>PW 팀에서 전수 검사, 수정 후에 하나씩 새로운 CMS로 이사</li>\n<li>시간에 따라 이전되는 가이드의 양이 늘어나 빌드 속도가 점점 느려져서 업데이트가 느렸다.</li>\n<li>가이드 배포와 반영까지 걸리는 시간을 줄일 수 없을까?</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>해결 방법</p>\n<ul>\n<li>기존 CMS에서 업데이트가 일어나면, 웹 훅을 보내 새로운 빌드를 실행한다.</li>\n<li>수정이 잦아지면, <a href=\"https://nextjs.org/docs/pages/building-your-application/data-fetching/incremental-static-regeneration\">ISR</a> 활성화해 변경 대상만 재생성한다 -&gt; 빌드 횟수 감소</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>문제 정의 2-1</p>\n<ul>\n<li>동일한 사이드바를 노출하기 위해 사이드바를 업데이트 하는 방법을 고민 </li>\n<li>가이드 숫자 * 지원언어 수만큼 재생성해서 요청 보내기 (1000개 * 국가별(한/영/일/중) 요청을 서버로 전송)</li>\n<li>로그 분석 결과 (하루에 최소 3번 수정, 4일마다 최소 2개의 가이드 추가 등)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>해결 방법</p>\n<ul>\n<li>느리지만 확실한 새로운 빌드 방법을 모색 -&gt; 다른 관점으로 렌더링 바라보기</li>\n</ul>\n</blockquote>\n<p>Next.js 라우터가 페이지 라우터보다 느리다는 것을 반박하는 테오 브라운 유튜브 영상 첨부.\n앱 라우터가 3배 이상 빠르다는 결과를 수치상으로 보여줌. </p>\n<p>** 다른 관점으로 렌더링 바라보기 **</p>\n<p>동적인 것과 정적인 것을 나누는 기준을 네트워크 단위로 나눠보면 어떨까. 그렇다면, 태그와 그룹핑, 캐싱, 스트리밍으로 보여주고 공식문서에서는 스태틱 렌더링, 다이나믹 렌더링과 같은 용어를 더 많이 사용하고 있다.</p>\n<p>만드는 서비스는 정적인 페이지라도 동적인 요소가 있고, 그 반대도 있다. (스펙트럼 처럼)\n유저 가이드는 CMS에 작성된 콘텐츠를 네트워크 요청으로 가져오는 부분의 비중이 더 크다.\n정적인 부분과 동적 부분을 나누고 데이터 캐시를 더 적극적으로 활용하도록 바꾼다면, 초기 빌드 시간은 줄어들면서 업데이트가 빠르게 반영되는 환경을 만들 수 있지 않을까.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token operator\">-</span> tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token operator\">-</span>    <span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">-</span>    <span class=\"token string\">\"orders:ko\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">-</span>    <span class=\"token string\">\"orders:user-guid\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">]</span>\n<span class=\"token operator\">-</span> cache <span class=\"token operator\">=</span> <span class=\"token string\">\"force-cache\"</span>\n\n<span class=\"token operator\">+</span> tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token operator\">+</span>     <span class=\"token string\">\"guide\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">+</span>     <span class=\"token string\">\"guide:ko\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">+</span>     <span class=\"token string\">\"guide:${slug}\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token operator\">+</span> <span class=\"token punctuation\">]</span>\n<span class=\"token operator\">+</span> revalidate <span class=\"token operator\">=</span> <span class=\"token number\">2_592_000</span></code></pre><pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token comment\">// 사이드바에서의 요청은 매번 가져오게끔 요청 </span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">QUERY_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">'no-store'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 상대적으로 정적인 가이드 내용은 캐시를 길게 1개월로 설정</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">QUERY_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">revalidate</span><span class=\"token operator\">:</span> <span class=\"token number\">2_592_000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"guide\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"guide:ko\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"guide:${slug}\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre><p>두 환경에서의 페이지 스피드 인사이트 결과는 왼쪽이 기존 SSG를 했을 때, 오른쪽이 데이터 캐시를 적용한 다이나믹 렌더링 결과는 94점, 98점으로 차이가 별로 없었지만, 빌드 속도가 8분 -&gt; 1분 26초로 줄어듬</p>\n<blockquote>\n<p>문제 정의 2-2</p>\n<ul>\n<li>캐시가 동작을 하려면, 모든 페이지에 한 번은 접속해야 캐시가 돌지 않나요?</li>\n</ul>\n</blockquote>\n<p>유저 가이드는 사이트맵이 있는 서비스이고, 웹 크롤러는 모든 페이지에 1회 이상 방문한다.\n이 방문으로 데이터 캐시가 자동으로 활성화 될 것이라고 생각함. \n별도의 크론잡을 안 만들고 서치 콘솔에 등록하고, Web Vitals 만 모니터링하는 정도만해도 괜찮을 거다.</p>\n<h2>마무리</h2>\n<ol>\n<li><p>아코디언 문제를 통해 프레임워크/라이브러리 기능, 접근성 구현을 제한할 수 있음을 확인할 수 있었다. \n속성값을 검증하는 프레임워크나 라이브러리가 있으면 언제든 만날 수 있는 문제이다. </p>\n<ul>\n<li>문제를 해결하려면 구현을 할 것인지? 한다면 어디까지 할 것인지를 판단해야한다. </li>\n<li>문제에 관여하는 주체와 동작, 영향을 나누어 파악한다.</li>\n</ul>\n</li>\n<li><p>정적 페이지 생성이 느려지는 문제를 통해 단순한 것도 스케일이 커지면 복잡도 역시 늘어난다. </p>\n<ul>\n<li>스케일에 따라 기존의 방법론이 여전히 유효한지 판단해야한다.</li>\n<li>렌더링 관점을 페이지 단위 -&gt; 네트워크 요청 단위로 바라보기</li>\n</ul>\n</li>\n<li><p>제품의 특성을 파악하고 영향을 주는 요인을 찾아 복잡도를 제어하면 해답에 가까워질 수 있을것이다. \n그 과정 속에서 각자 엔지니어로써 넓은 관점으로 갖고 다양한 경험을 해볼 수 있을 것이다.</p>\n</li>\n</ol>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://engineering.linecorp.com/ko/blog/headless-cms-in-line\">서버 없이 웹 사이트 쉽게 만들기, LINE의 헤드리스 CMS</a></li>\n<li><a href=\"https://fe-developers.kakaoent.com/2022/220310-kakaopage-bff/\">카카오페이지는 BFF(Backend For Frontend)를 어떻게 적용했을까?</a></li>\n<li><a href=\"https://hiddenest.dev/accessible-accordion\">접혀진 아코디언은 검색할 수 없나요?</a></li>\n<li><a href=\"https://developer.chrome.com/articles/hidden-until-found\">Making collapsed content accessible with hidden=until-found</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=HbUDiNlU6Yw\">Next.js App Router SLOW?</a></li>\n</ul>\n","category":"React"},"posts":[{"slug":"react-study","title":"자주쓰는 리액트 방법","date":"2024.02.17","coverImage":"images/cover/default.png","category":null},{"slug":"what-zsh","title":"iTerms2 + ZSH 사용하기","date":"2023.12.02","coverImage":"images/cover/default.png","category":"Tip"},{"slug":"youtube-ab180-2023","title":"컨퍼런스 정리(2) - 몇 천 페이지의 유저 가이드를 새로 만들며","date":"2023.11.15","coverImage":"images/cover/youtube-ab180-2023.png","category":"React"},{"slug":"youtube-flex-2021","title":"컨퍼런스 정리(1) - 왜 나는 React를 사랑하는가","date":"2023.11.09","coverImage":"images/cover/react-flex.png","category":"React"},{"slug":"git-commit","title":"Git Commit 메시지 작성법","date":"2023.09.13","coverImage":"images/cover/default.png","category":"Tip"},{"slug":"testing-vanilla","title":"Vanilla JS Jest 적용해보기","date":"2023.09.06","coverImage":"images/cover/default.png","category":"JavaScript"},{"slug":"css-variable","title":"CSS 변수","date":"2023.09.02","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"css-position","title":"CSS Position absolute vs fixed","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"css-safari","title":"사파리 브라우저에서의 스크롤바 동작 없애기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"react-style-component","title":"React 스타일 컴포넌트 다루기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"React"},{"slug":"web-lighthouse","title":"Next.js 성능 측정","date":"2023.08.28","coverImage":"images/cover/default.png","category":"React"},{"slug":"next-portal","title":"Next.js Portal 만들기","date":"2023-08-29","coverImage":"/images/cover/default.png","category":"React"},{"slug":"css-semantic","title":"시맨틱 태그 (Semantic Tag)","date":"2023-08-24","coverImage":"/images/cover/default.png","category":"HTML_CSS"},{"slug":"blog-next","title":"Next.js로 마크다운 블로그 만들기","date":"2023-08-22","coverImage":"/images/cover/blog_next.png","category":"ToyProject"},{"slug":"css-unit","title":"CSS 단위","date":"2023-08-21","coverImage":null,"category":"HTML_CSS"},{"slug":"hello-world","title":"Hello","date":"2023-08-16"},{"slug":"shortcut-mac","title":"Mac을 편하게 사용하는 방법 7가지","date":"2022-04-06 23:00:14","coverImage":"/images/cover/shortcut-mac.png","category":"Tip"},{"slug":"react-native","title":"React Native","date":"2022-03-17 14:00:00","coverImage":"/images/cover/react-native.png","category":"React"},{"slug":"modern-js","title":"모던 자바스크립트 새로운 기능","date":"2022-01-27 23:47:36","coverImage":"/images/cover/modern-js.png","category":"JavaScript"},{"slug":"codespitz-86","title":"코드스피츠 [객체지향 자바스크립트] 돌아보기","date":"2022-01-27 21:11:37","coverImage":"/images/cover/codespitz.png","category":"JavaScript"},{"slug":"eslint-prettier","title":"VSCode 에서 ESLint와 Prettier 설정방법","date":"2022-01-15 17:05:58","coverImage":"/images/cover/eslint-prettier.png","category":"Tip"},{"slug":"typescript-config","title":"TSConfig 설정방법","date":"2022-01-14 16:14:08","coverImage":"/images/cover/typescript-config.png","category":"TypeScript"},{"slug":"react-cypress","title":"React에 Cypress 적용하기","date":"2022-01-14 13:58:02","coverImage":"/images/cover/react-cypress.png","category":"React"},{"slug":"react-runtime-error","title":"React 환경세팅에서 만난 오류들","date":"2021-12-28 14:57:17","coverImage":"/images/cover/react-runtime-error.png","category":"React"},{"slug":"browser-operation","title":"브라우저 동작 원리","date":"2021-12-01 21:59:43","coverImage":"/images/cover/browser-operation.png","category":"HTML_CSS"},{"slug":"react-redux","title":"React와 Redux","date":"2021-11-26 13:45:56","coverImage":"/images/cover/react-redux.png","category":"React"},{"slug":"css-selectors","title":"CSS 선택자","date":"2021-11-12 15:12:23","coverImage":"/images/cover/css-selectors.png","category":"HTML_CSS"},{"slug":"html-span","title":"HTML <span> 요소","date":"2021-11-12 15:08:11","coverImage":"/images/cover/html-span.png","category":"HTML_CSS"},{"slug":"create-thumbnail","title":"썸네일 이미지 생성","date":"2021-11-10 17:55:44","coverImage":"/images/cover/create-thumbnail.png","category":"ToyProject"},{"slug":"react-migration","title":"React 기존 프로젝트에 타입스크립트 마이그레이션","date":"2021-11-05 00:22:39","coverImage":"/images/cover/react-migration.png","category":"React"},{"slug":"react-vac","title":"React VAC Pattern","date":"2021-11-01 16:57:17","coverImage":"/images/cover/react-vac.png","category":"React"},{"slug":"typescript","title":"TypeScript 스터디","date":"2021-11-01 14:27:36","coverImage":"/images/cover/typescript.png","category":"TypeScript"},{"slug":"vanilla","title":"Vanilla JS 다뤄보기","date":"2021-10-30 23:20:00","coverImage":"/images/cover/vanilla.png","category":"JavaScript"},{"slug":"yarn","title":"Yarn","date":"2021-10-17 15:31:01","coverImage":"/images/cover/yarn.png","category":"JavaScript"},{"slug":"port","title":"Mac에서 Port 종료하기","date":"2021-10-10 23:31:07","coverImage":"/images/cover/port.png","category":"Tip"},{"slug":"react-condition","title":"React 조건부 렌더링","date":"2021-10-03 18:38:26","coverImage":"/images/cover/react-condition.png","category":"React"},{"slug":"load-map","title":"로드맵","date":"2021-09-24 14:39:08","coverImage":"/images/cover/default.png","category":"ToyProject"},{"slug":"blog-hexo","title":"Hexo를 이용한 github 블로그 만들기","date":"2021-09-24","coverImage":"/images/cover/blog-hexo.png","category":"ToyProject"},{"slug":"good-image","title":"good-image","date":"2021-09-13 12:59:37","coverImage":"/images/cover/study.png"},{"slug":"es6","title":"ES6 문법","date":"2020-02-04","coverImage":"/images/cover/es6.png","category":"JavaScript"},{"slug":"sass","title":"Sass(SCSS) 알아가기","date":"2020-01-22","coverImage":"/images/cover/sass.png","category":"HTML_CSS"},{"slug":"vscode","title":"VS Code 활용하기","date":"2020-01-09","coverImage":"/images/cover/vscode.png","category":"Tip"},{"slug":"storage","title":"Local & Session Storage","date":"2019-11-01","coverImage":"/images/cover/storage.png","category":"HTML_CSS"},{"slug":"testing-vue","title":"Vue.js 2.x 테스트 적용기","date":"2019-10-17","coverImage":"/images/cover/testing-vue.png","category":"Vue"},{"slug":"graphql","title":"Graphql 적용기","date":"2019-10-16","coverImage":"/images/cover/graphql.png","category":"JavaScript"},{"slug":"blob","title":"Load Image File","date":"2019-10-10","coverImage":"/images/cover/blob.png","category":"JavaScript"},{"slug":"d3","title":"D3 필요한 메서드 정리해보자","date":"2019-10-01","coverImage":"/images/cover/d3.png","category":"JavaScript"},{"slug":"settings","title":"개발환경 세팅하기","date":"2019-09-26","coverImage":"/images/cover/settings.png","category":"Tip"},{"slug":"pattern","title":"Javascript 디자인패턴 이야기","date":"2019-09-11","coverImage":"/images/cover/pattern.png","category":"JavaScript"},{"slug":"promise","title":"Javascript Promise 이야기","date":"2019-08-28","coverImage":"/images/cover/promise.png","category":"JavaScript"},{"slug":"event","title":"Javascript Event 이야기","date":"2019-08-22","coverImage":"/images/cover/event.png","category":"JavaScript"},{"slug":"object","title":"Javascript Object 이야기","date":"2019-08-21","coverImage":"/images/cover/object.png","category":"JavaScript"},{"slug":"browser","title":"Browser 이야기","date":"2019-08-19","coverImage":"/images/cover/browser.png","category":"HTML_CSS"},{"slug":"array","title":"Javascript Array 이야기","date":"2019-08-18","coverImage":"/images/cover/array.png","category":"JavaScript"},{"slug":"css-grid-flex","title":"Grid 와 Flex 사용법","date":"2019-08-16","coverImage":"/images/cover/css-grid-flex.png","category":"HTML_CSS"},{"slug":"vuejs","title":"Vue 이야기","date":"2019-08-14","coverImage":"/images/cover/vue-js.png","category":"Vue"},{"slug":"npm","title":"NPM","date":"2019-08-09","coverImage":"/images/cover/npm.png","category":"JavaScript"},{"slug":"git","title":"안 쓰면 잊어버리는 Git 명령어","date":"2019-08-08","coverImage":"/images/cover/git.png","category":"Tip"},{"slug":"blog-jekyll","title":"Jekyll을 이용한 github 블로그 만들기","date":"2019-08-07","coverImage":"/images/cover/blog-jekyll.png","category":"ToyProject"},{"slug":"canvas","title":"Canvas로 그래프 그리기","date":"2019-06-10","coverImage":"/images/cover/canvas.png","category":"HTML_CSS"}]},"__N_SSG":true}