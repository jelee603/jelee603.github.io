{"pageProps":{"post":{"title":"코드스피츠 [객체지향 자바스크립트] 돌아보기","slug":"codespitz-86","date":"2022-01-27 21:11:37","content":"<p><a href=\"https://www.youtube.com/watch?v=E9NZ0YEZrYU&list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw\">코드스피츠 86 - 객체지향 자바스크립트</a> 강의를 정리해봅니다. </p>\n<h2>프로그래밍의 기준을 어디에 둘까요?</h2>\n<p>Value Context: 메모리 주소에 관계없이 값이 같다고 보면 같은 것이라 보는 관점 (값 기반)</p>\n<ul>\n<li>할당하거나 가져올 때, 값을 사용한 경우는 끝없이 복사본을 만든다.</li>\n<li>상태가 관리되서 안전한게 아니라, 계속 불변하는 값들을 만들어내서 안전해 보이는 것일뿐</li>\n<li>연산을 기반으로 로직을 전개<!-- more -->\nidentifier Context: 힙 메모리에 있는 주소로 보는 관점 (식별 기반)</li>\n</ul>\n<p>기준을 정했으면, 하나의 컨텍스트만 쓰는 것을 권장합니다.</p>\n<pre><code>// 오브젝트 객체의 리터럴로 값을 만드는 방법\nconst a = {\n a: 3,\n b: 5\n}\n\nconst b = {\n a: 3,\n b: 5\n}\n\nconsole.log(a === b) // false (identifier context 기준으로 메모리의 주소를 보면 다른 값이다)\nconsole.log(JSON.stringify(a) === JSON.stringify(b)) // true (문자열로 환원하면, 값으로 보는것이라 같다)\n</code></pre>\n<h2>객체지향 세계</h2>\n<ul>\n<li>객체는 하나의 원본입니다. </li>\n<li>내부의 상태관리를 책임지는 객체입니다.</li>\n<li>메시지를 통해서 위임해서 로직을 전개합니다. </li>\n<li>객체 지향은 value context 를 쓰지 않습니다.</li>\n</ul>\n<h2>Polymorphism</h2>\n<ol>\n<li><p>substitution (대체 가능성)</p>\n<ul>\n<li>확장된 객체는 원본으로 대체 가능합니다. (자식은 부모를 대신할 수 있습니다)</li>\n</ul>\n</li>\n<li><p>internal identity (내적일관성)</p>\n<ul>\n<li>생성 시점의 타입이 내부에 일관성 있게 참조됩니다. (어느시점에서든 만들어질 때 상태를 유지합니다)</li>\n</ul>\n</li>\n</ol>\n<p>ex) 오버라이딩: 부모함수를 덮어서 없애고 자식함수로 대체하는 것을 말합니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token keyword\">const</span> Worker <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'working'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> HardWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Worker <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 하드워커의 부분집합이 워커, 확장될 클래스는 확장할 대상을 대체할 수 있다.</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hardWorking'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HardWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 워커의 인스턴스로 하드워커를 만듬</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>worker <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// substitution</span>\nworker<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// internal identity</span></code></pre><h2>Object Essentials (객체의 본질)</h2>\n<ul>\n<li>Maintenance of State (데이터를 은닉) \n: 객체의 속성이 모두 프라이빗이면서 내 데이터를 관리합니다.</li>\n<li>Encapsulation of Functionality (기능의 캡슐화) \n: 메소드를 감춥니다. 외부에 캡슐화해서 제공합니다.</li>\n<li>Isolation of Change (격리) \n: 변화의 여파를 막고 격리시킵니다. 오염시켰을 때, 전역 처리기를 걸어둡니다.</li>\n</ul>\n<pre><code>const EssentialObject = class {\n    #name = &quot;&quot;; // hide state\n    #screen = null;\n    constructor(name) {\n        this.#name = name;\n    }\n    camouflage() {\n        this.#screen = (Math.random() * 10).toString(16).replace(&quot;.&quot;, &quot;&quot;)\n    }\n    get name() {\n        return this.#screen || this.#name;\n    }\n}\n</code></pre>\n<h2>알려진 기본 설계요령 (SOLID 원칙)</h2>\n<ul>\n<li><p>SRP (Single Responsibility) 단일책임</p>\n<p>코드를 고쳐야하는 이유는 하나뿐이야라고 만드는 방법입니다. \n잘못하게 되면 산탄총 수술이 필요하게 됩니다. \n다른 객체에게 의뢰한다 = 다른 객체에게 메시지를 보내는 것.</p>\n</li>\n<li><p>OCP (Open Closed) 개방폐쇄</p>\n<p>기존의 객체를 건드리지 않게 설계를 해야합니다. \n새로운 문제가 일어났으면 새로운 객체를 만들어서 새로운 것에 대한 해결책만 내릴 수 있게 만듭니다. </p>\n<p>인터페이스나 추상클래스를 상속받아서 처리합니다. 그 다음번 문제도 추상화를 받아서 해결합니다.</p>\n</li>\n<li><p>LSP (Liskov Substitution, 리스코프 치환) </p>\n<p>부모쪽으로 캐스팅해서 형을 변환하는 것을 말합니다.(업캐스팅)</p>\n<p>Ex) 추상층: 생물(숨을 쉰다) 구상층: 사람(생물, 다리로 이동한다), 타조(생물, 다리로 이동한다), 아메바(생물)</p>\n</li>\n<li><p>ISP (Interface Substitution, ISP 치환)</p>\n<p>리스코프 치환법칙을 위반(똑같은 위치에서 같은 기능을 하는 경우에 위임이 불가능할 경우)하게 되면, 인터페이스로 분리하도록 해봅니다. </p>\n<p>역할에 맞게 분리해서 만들어야합니다. </p>\n<ol>\n<li>소유 방법으로 분리한다.</li>\n<li>인터페이스를 만들어서 오버라이딩하면 됩니다.</li>\n</ol>\n</li>\n<li><p>DIP (Dependency Inversion)</p>\n<p>의존성 역전의 법칙, 의존성은 항상 부모에서 자식으로만 상속됩니다.</p>\n</li>\n</ul>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token keyword\">const</span> Manager <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n  #workers<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>workers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workers<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> w <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#workers <span class=\"token operator\">=</span> workers<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#workers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">w</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> w<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> manager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Manager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HardWorker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmanager<span class=\"token punctuation\">.</span><span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><blockquote>\n<p>용어 정리</p>\n<ol>\n<li>DI (Dependency Injection) 의존성 주입</li>\n<li>DRY 중복방지</li>\n<li>Hollywood Principle 의존성 부패방지\n 물어보지 말고 요청하지 않습니다.. ex) 시간날 때, 나한테 연락을 줘.</li>\n<li>Law of demeter 최소 지식\n 최소한의 지식만 가지고, 내부에서 객체의 타입, 원래 필드의 타입, 인자로 가져온 객체의 타입만 알게 합니다.\n 너무 많아지면, train wreck (열차전복) 현상이 일어납니다.</li>\n<li>Inversion Of Control 제어 역전\n flow control (흐름 제어) = 역으로 대치하겠다. 즉, 위임하겠다라는 의미입니다.\n 프로그램 실행 통제 : 어떠한 흐름으로 제어할지 결정하는 것입니다.\n 제어를 추상화하고 제어문을 한번만 작성하면, 일반화합니다.\n 개별 제어의 차이점만 외부에서 주입합니다.\n 실제구현: 전략패턴 &amp; 템플릿 메소드 패턴 &lt; 컴포지트 패턴 &lt; 비지터 패턴</li>\n</ol>\n</blockquote>\n<h2>SRP 준수하는 객체망이 문제를 해결하는 방법은 뭘까요?</h2>\n<p>다른 객체에게 의뢰하는 것입니다.</p>\n<ol>\n<li>메시지 - 의뢰할 내용</li>\n<li>오퍼레이션 - 메시지를 수신할 객체가 제공하는 서비스</li>\n<li>메소드 - 오퍼레이션이 연결될 실제 처리기</li>\n</ol>\n<h2>의존성의 종류</h2>\n<ol>\n<li>객체의 생명 주기 전체에 걸친 의존성</li>\n</ol>\n<ul>\n<li>상속(extends)</li>\n<li>연관(association) : 상속을 소유를 합니다.</li>\n<li>의존성이 높거나 역할을 개개인별로 너무 많이 부여하면 코드가 망가집니다.</li>\n<li>부모는 방탄이다.</li>\n<li>필드의 객체 타입을 알고 있습니다.</li>\n</ul>\n<ol start=\"2\">\n<li>각 오퍼레이션 실행 시 임시적인 의존성</li>\n</ol>\n<blockquote>\n<p>이러한 의존성을 낮추고 격리시키는 방법을 배우는 것이 객체지향 방법론을 배우는 이유입니다. </p>\n</blockquote>\n<h3>MVVM 패턴을 알아보고 실습하면서 점진적으로 수정해가는 과정을 배운다.</h3>\n<h2>MVC</h2>\n<p>Model -&gt; Controller -&gt; View -&gt; Model</p>\n<p>뷰가 모델을 알고 있는 것이 문제가 됩니다. 모델은 비지니스 모델인데 화면에 표시되는 이유와 관련 없는데 밀접하게 연관되서 동작하게 됩니다. </p>\n<p>서버 프로그래밍에서는 컨트롤러로 가공하는 방법이라 괜찮은데 클라이언트 프로그래밍에서는 양방향이 서로 연동되면 안되서 문제가 됩니다.</p>\n<h2>제왕적 컨트롤러 MVC</h2>\n<p>View -&gt; Controller -&gt; Model -&gt; Controller -&gt; View</p>\n<p>뷰가 컨트롤러를 통해 모델을 바꾸고 뷰의 변화나 모델의 변화가 필요할 때, 컨트롤러를 변경하게 됩니다.</p>\n<h2>MVP</h2>\n<p>View (getter, setter) - Presenter -&gt; Model -&gt; Presenter -&gt; View (getter, setter)</p>\n<p>뷰는 인터페이스로써 세터와 게터가를 갖고 있습니다. </p>\n<p>프레젠터 입장에서 뷰의 게터, 세터를 호출합니다. 사실 모델을 모르고 호출하게 되므로, 뷰가 모델을 건드릴 수가 없습니다.</p>\n<p>프레젠터는 통제만 하는 역할을 합니다. </p>\n<h2>MVVM</h2>\n<p>View &lt;- Binder(옵저버) -&gt; ViewModel -&gt; Model -&gt; ViewModel</p>\n<p>뷰모델은 순수한 뷰입니다. 뷰의 변화가 있으면 바인더가 뷰모델을 갱신해줍니다. \n진짜 뷰와 뷰모델의 의존성을 바인더가 컨트롤하게 됩니다. </p>\n<p>여기서도 뷰모델이 뷰를 완전히 모르게 합니다.</p>\n<h2>코드 작성 <a href=\"https://gist.github.com/hikaMaeng/ae5301b2808afd150c4f55a47bd9466a\">(소스)</a></h2>\n<h3>1회차</h3>\n<ul>\n<li>TypeCheck() \n: 자바스크립트는 런타임에 에러가 발견되는 즉시, throw 로 멈추게 하는 코드가 필요합니다. 타입검사를 해서 &#39;string&#39; 또는 객체인지를 비교합니다.</li>\n</ul>\n<pre><code>typeof type == &#39;string&#39; // type 이 string 이 아니면 객체이다.\n</code></pre>\n<blockquote>\n<p>동등 연산자는(==) 강제 형변환을 일으키지 않아서 속도가 빠르다. 그래서 미리 체크하는 함수를 만들어서 사용하면 매번 일치 연산자(===) 로 비교하는 작업을 줄일 수 있다. 일치 연산자는 자료형 검사를 먼저하게 되서 속도가 느리다.</p>\n</blockquote>\n<ul>\n<li>Binder Class \n: 어떤 뷰 모델과 매칭할지 내부 hook과 뷰모델을 연결해서 반영해줍니다.</li>\n</ul>\n<p>바인딩에는 2가지 방식있습니다.</p>\n<ol>\n<li>태그를 스캔하게 만들어서 만드는 방식, 뷰와 모델을 분리해서 관리할 수 있습니다. (앵귤러의 방식)</li>\n<li>데이터와 연결되어 있는 뷰를 만들어서 이 뷰를 꽂게하는 컴포넌트 방식, 자기 뷰를 모델과 연결해서 만들어둡니다. (리액트의 방식)</li>\n</ol>\n<ul>\n<li>Scanner Class\n: 현재의 뷰모델을 이용해서 스캔합니다. 스캐너가 아이템을 체크하면서 Binder 클래스에 아이템을 추가합니다.</li>\n</ul>\n<p>SRP원칙을 기반으로 HTML 해석 스캐너를 따로 둡니다. </p>\n<blockquote>\n<p>HTML5 에서는 &#39;data-&#39; 만들지 않는 속성은 <a href=\"https://validator.w3.org/#validate_by_uri\">유효성 검사</a>에서 모두 깨지게 되어있습니다. 속성을 만들 때는 &#39;data-&#39; 프리픽스로 만들어줍니다. </p>\n</blockquote>\n<ul>\n<li>애니메이션 효과</li>\n</ul>\n<p>isStop 플래그로 색상이 변경된 후, 클릭했을 때 멈추도록 설정해줍니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token keyword\">const</span> viewmodel <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">isStop</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">changeContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">.</span>background <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rgb(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n            <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span>\n        <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n            <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span>\n        <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>contents<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        binder<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">wrapper</span><span class=\"token operator\">:</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n        <span class=\"token literal-property property\">events</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span> vm</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                vm<span class=\"token punctuation\">.</span>isStop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    viewmodel<span class=\"token punctuation\">.</span><span class=\"token function\">changeContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">.</span>isStop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>viewmodel<span class=\"token punctuation\">.</span>isStop<span class=\"token punctuation\">)</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3>2회차</h3>\n<p><img src=/images/post/ex-2.png alt=MVVM 패턴 width=\"100%\"/></p>\n<p>ViewModel &lt;- Binder[BinderItem] &lt;- Scanner -&gt; HTMLElement</p>\n<ul>\n<li>ViewModel Class <a href=\"https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2463\">[강의]</a>\n: 커스텀 key에 값을 추가할 수 있도록 변경합니다. \nDOM의 프로퍼티(엘리먼트)와 어트리뷰트(태그) 값을 업데이트 할 수 있습니다.</li>\n</ul>\n<pre class = \"line-numbers\"><code class = \"language-js\"> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'styles.attributes.properties'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newV</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                v <span class=\"token operator\">=</span> newV<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            v<span class=\"token punctuation\">.</span>subKey <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>Binder Class <a href=\"https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2908\">[강의]</a></li>\n</ul>\n<p>: 뷰를 그리는 제어문은 바인더에 작성합니다. *** ISP 제어역전이 성립합니다.\n  데이터를 조작하는 코드만 작성합니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">viewmodel<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>viewmodel<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>viewmodel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                el <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">;</span>\n\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre><ul>\n<li>Scanner Class <a href=\"https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=3955\">[강의]</a>\n: HTML을 스캔하고, hook 을 만들어서 바인더와 연결해주는 작업을 합니다.</li>\n</ul>\n<blockquote>\n<p>재귀로 함수가 함수를 호출하다보면 임시 메모리가 쌓이면서 스택오버플로우가 발생하게 됩니다. 해결하려면, 별도의 메모리 공간 스택을 만들고 while 로 돌면서 처리를 하면됩니다. 동적으로 스택을 빼가면서 만듭니다.</p>\n</blockquote>\n<pre class = \"line-numbers\"><code class = \"language-js\">  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>el<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> target<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkItem</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span>\n          stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre><ul>\n<li>ViewModel Class <a href=\"https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=4770\">[강의]</a>\n: 새로운 클릭했을 때의 이벤트를 추가합니다. style, attribute 를 key 로 잡아줍니다.\nwrapper 랑 contents 를 바꾼 후에 한번만 렌더합니다.</li>\n</ul>\n<pre class = \"line-numbers\"><code class = \"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'styles.attributes.properties'</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">,</span>\n            <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newV</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                newV <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            v<span class=\"token punctuation\">.</span>subKey <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3>3회차</h3>\n<p><img src=/images/post/ex-3.png alt=전략 패턴 width=\"100%\"/></p>\n<p>기존 바인더 코드를 전략적으로 변경하는 방법 (바인더가 모델이 변하면 자동으로 변경되게끔 만드는게 목적입니다)</p>\n<h2>전략 패턴 (Strategy)</h2>\n<p>어떤 문제를 해결하기 위한 핵심적인 지식 부분을 의미합니다. 객체에서 상태는 프로퍼티, 행동은 메소드로 표현합니다. </p>\n<ol>\n<li>변화가 생길 때마다 코드를 변경하는게 아니라 객체로 변경합니다. (컴포지션 패턴 -&gt; DI)<ul>\n<li>내부에서 만들면 다시 하드코딩이 됩니다. 코드를 변경하지 않고 외부에서 공급받으면 객체에 대한 의존성을 줄일 수 있습니다. (DI)</li>\n</ul>\n</li>\n<li>반드시 인터페이스나 타입으로 변환합니다. </li>\n<li>내부의 코드를 프로세서와의 계약으로 풀었기 때문에 프로세서로 풀어줍니다.(알고리즘의 일반화)</li>\n</ol>\n<blockquote>\n<p>공통로직으로 묶고, 타입이 제공하는 메소드로만 알고리즘을 수정하는 것 -&gt; 알고리즘의 일반화</p>\n</blockquote>\n<h2>템플릿 패턴</h2>\n<p>기존 Binder 기능을 Processor Class를 생성해서 위임합니다. </p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token keyword\">const</span> Processor <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    cat<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cat</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cat <span class=\"token operator\">=</span> cat<span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">process</span><span class=\"token punctuation\">(</span>\n        vm<span class=\"token punctuation\">,</span>\n        el<span class=\"token punctuation\">,</span>\n        k<span class=\"token punctuation\">,</span>\n        v<span class=\"token punctuation\">,</span>\n        _0 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> ViewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _1 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _2 <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_process</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">_process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token string\">'override'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nbinder<span class=\"token punctuation\">.</span><span class=\"token function\">addProcessor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Processor <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            el<span class=\"token punctuation\">.</span>styles<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'styles'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><blockquote>\n<p>자식한테 위임하는 방법 (템플릿 메소드 -&gt; <code>hook</code> 이라 부른다.)</p>\n</blockquote>\n<h2>옵저버 패턴 (Observer)</h2>\n<p>감시하는 쪽(observer)는 상대적으로 편합니다. \n감시 당하는 쪽(subject)은 변화가 일어나면 notify 로 알려줘야해서 subject가 더 피곤하다 보면 됩니다.</p>\n<p>ViewModel Class\n: notify 를 만들어 변경될 때마다 감지를 할 수 있도록 변경합니다. 타겟이 되는 결과 오브젝트를 해석한 후 프로퍼티로 세팅해줍니다. </p>\n<p>Binder Class\n: ViewModelListener 의 책임도 생기게 됩니다. 그래서 인터페이스 별로 분리해줘야합니다.\n  watch, unwatch 로 등록해서 뷰모델을 받아서 noti가 안 왔을 때, 렌더를 해줄 수 있도록 변경합니다. </p>\n<h2>컴포지트 패턴 (Composite)</h2>\n<p>동일한 문제를 위임을 반복해서 취합하는 방법을 말합니다.</p>\n<ol>\n<li>뷰모델인 자신이 자식 뷰모델을 옵저버가 되야합니다. \n자신의 변화를 알아차려야하므로, 뷰모델의 리스너가 되야합니다. 리스너가 아닐 때까지 계속 반복합니다. 백바인드를 걸어준다.</li>\n<li>옵저버 패턴의 인포 객체가 넘어오면 이벤트를 알아야합니다. </li>\n<li>리퀘스트 애니메이션 프레임 당 모든 걸 취합해서 noti 를 한번만 보내줍니다.</li>\n</ol>\n<p>vm 커버하는 단일 루프 하나에 등록해서 씁니다. 배열 루프가 훨씬 빠릅니다. (리스너를 100개 다는 것보다 리스너 1개만 걸고 루프 돌리는게 훨씬 빠름)</p>\n<blockquote>\n<p>계속 하다보면 쉬워집니다. 그래프 순회나 재귀로 푸는 것보다 컴포지트 패턴이 훨씬 쉽게 풀립니다. </p>\n</blockquote>\n<pre><code>font-size: 3.5rem;\n</code></pre>\n<h2>비지터 패턴</h2>\n<p>2개 이상의 알고리즘에 개입하도록 외부에서 공급되는 전략입니다.\n단일 컨트롤, 다양한 메서드 다른 곳에서 역할 수행하는 경우에 모두 비지터의 가능성이 있습니다.</p>\n<h2>Client</h2>\n<p>뷰모델의 부모의 isStop 을 업데이트해줍니다.</p>\n<h3>4회차</h3>\n<p><img src=/images/post/ex-4.png alt=권한 조정 width=\"100%\"/></p>\n<p>책임에 맞는 권한을 부여합니다.</p>\n<h2>ISP</h2>\n<p>뷰모델의 역할에 옵저버 패턴의 서브젝트 역할이 어울리지 않는 거 같습니다. - (역할분리를 해봅니다)\n역할에 맞게 ViewModel 을 개선하면서 ViewModelSubject 를 만듭니다. </p>\n<ul>\n<li>자바스크립트는 다중상속이 불가능합니다.</li>\n<li>뷰모델 리스너와 뷰모델 서브젝트를 상속 받은 것을 사용해야만합니다.</li>\n<li>리스너가 1개라도 생겼을 때, watch 할 수 있도록 만듭니다. </li>\n<li>리스너가 없으면 unwatch 하고 빼줍니다.</li>\n<li><code>#inited</code> 플래그를 이용한 간단한 제어입니다. 싱글스레드로 변경할 수 있는 방법이 한번뿐이라 쉽습니다.</li>\n</ul>\n<blockquote>\n<p>역할을 분리하고 행위에 대해서 생각합니다. 작명법으로 해결되지 않습니다. </p>\n</blockquote>\n<h2>섬세한 권한 조정</h2>\n<p>getter, setter 의 진짜 값을 갖고 있는 걸 백그라운드 필드라합니다. </p>\n<p>코드에서는 트랜잭션을 표현하려면, 함수로 만들어야합니다.\n한번에 일어나는 일인지(트랜잭션)를 함수로 표현하는 것이다. \n(외부에서도 필요할 때, 함수로 가져갈 수 있도록)</p>\n<blockquote>\n<p>public getter, private setter 패턴 -&gt; 자바스크립트에서 읽기전용을 구현하는 방법입니다.</p>\n</blockquote>\n<h2>Visitor 패턴</h2>\n<p>보살핌을 받는애가 있고, 그 애가 비지터에게 자기자신을 주면 비지터가 대신 돌아주는 것을 의미합니다. \n제어를 위임하기 위해 코드를 객체로 변경한다. </p>\n<blockquote>\n<p>어려운 자료구조나 특별한 코드에 대해서 제어코드가 완전히 외부로 위임되서 한 곳에 모여있습니다. \n특수한 제어를 빼놓기 위해 사용합니다. </p>\n</blockquote>\n<ul>\n<li>DOMVisitor Class</li>\n</ul>\n<p>DOM의 반복은 DOMVisitor의 역할입니다. \nDOMVisitor는 루프를 돌 필요가 있는 모든 곳에서 사용할 수 있는 함수가 됩니다.</p>\n<ul>\n<li>DOMScanner Class</li>\n</ul>\n<p>Binder가 스캐너의 역할을 가져가고 Scanner는 checkItem 정책을 돌고 HTML만 공급합니다. \n그래서 스캐너는 역할에 안 맞기 때문에 코드를 분리해서 위임합니다.</p>\n<blockquote>\n<p>소프트웨어 설계란, 코드를 재배치하는 기술을 설계라합니다.\n코드의 역할을 알고 분리할 줄 알아야한다. 객체를 재배치하는 게 아닙니다. </p>\n</blockquote>\n<h2>추상계층 불일치</h2>\n<p>계약을 잘못 쓰면 의존성을 잘못 설정하면, 망한 코드가 됩니다.<br>어떤 형에서는 부모를 사용하고 어떤 형에서는 자식을 사용하다보면, 불일치가 일어나게 됩니다. </p>\n<blockquote>\n<p>연습을 많이하면 역할별 분리하는 습관이 생기게 되는데 한쪽이 추상계층이면, 반대쪽도 추상계층으로 맞춰줘야 불일치가 없어진다.</p>\n</blockquote>\n<p>추상계층과 연결될 수 있게 바꾸면 OCP를 수정하지않고 확장할 수 있도록 바꿀 수 있습니다.</p>\n<blockquote>\n<p>기능적인 부분과 도메인적인 부분을 나눠서 개발해야 추후에 도메인 부분만 교체할 수 있습니다.</p>\n</blockquote>\n<h2>설계 종합</h2>\n<p>좋은 코드는 복잡성을 쪼개서 최적화를 적용할 수 있게 됩니다. \n가상화된 렌더러 시스템은 어떤 플랫폼으로든 교체가 가능하다는 점이 장점입니다.\n많은 구현체들은 직접 바인더 콜하는 경우가 많아졌고, 옵저버 패턴으로 연결된 부분만 복잡도가 높게 되었습니다. </p>\n<h3>5회차</h3>\n<h2>문제점 짚어보기</h2>\n<p>문제 1. binder 의 viewmodelUpdated 가 전역변수를 참조하고 있다. \n자신의 뷰모델을 보내주도록 변경해줍니다. set 안에 별도의 속성을 넣는 건 애매한 일이기에 인자에 따로 플래그를 준다.</p>\n<p>문제 2. 바인더에는 vm 의 특정 키를 인식하는 코드가 없다.\n뷰모델에는 key가 확정(하드코딩)되어있는데 다른 서브키를 가질 수 없다. </p>\n<ul>\n<li>임의의 키를 매핑할 수 있는 코드로 수정한다. (하드코딩을 제거한다.)</li>\n<li>처리기는 데이터 구조가 매핑된다. 데이터 구조도 동적으로 바꾸는과정이 필요하다. \ndefine 이 재귀로 호출하게끔 한다.</li>\n</ul>\n<blockquote>\n<p>reduce 는 초기값은 두고 첫번째 인자 accumulator 가 계속 앞에 인자로 들어오고 두번째 인자는 배열의 원소들이 들어온다. 그 다음에 있는  accumulator 있는 건 함수가 반환하는 값으로 변경된다. 오브젝트로 반환 될거다. ex) Object.entries().reduce(() =&gt; {}, {})</p>\n</blockquote>\n<p>문제3. setDomProcessor 세팅을 넣어준다. \n바인더에게 데코레이팅 해준다.</p>\n<p>문제4. binder에 공개 정보를 너무 많이 주고 있다? 프로세스의 자율성이 떨어진다.</p>\n<p>핵심 코어의 복잡성을 알려주기 위해 바인더가 무거워졌습니다. 본체는 가볍과 바깥쪽에 마지막 구현체의 실력에 따라 달라지도록 만든 것입니다. </p>\n<blockquote>\n<p>디자인이나 설계는 정답이 조직안에 있습니다. 누가 더 난이도 높은 쪽을 가져갈 것인가. \n디자인 의사결정은 코드의 배치 결정인데 항상 사람의 역량을 보고 결정해야합니다. </p>\n</blockquote>\n<h2>데코레이터 패턴 <a href=\"https://youtu.be/5UUISCK6CL4?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2791\">[강의]</a></h2>\n<p>자기가 일하고 계속 다음번에게 넘기는 것을 말합니다.\n바인더에 도움없이 프로세서 세터를 만들어줍니다. \n소유하는 것과 격리시켜서 분리할 수 있습니다.</p>\n<blockquote>\n<p>다음번 애한테 일을 시킬지 말지 결정해서 중간에 멈출 수 있는 패턴은 Chain of Responsibility 패턴이라 합니다.</p>\n</blockquote>\n<p>루프가 나왔을 때, 객체로 바꾸는 방법이 링크드리스트로 만드는 데코레이터 패턴입니다. </p>\n<h2>새로운 ol, li 만들기</h2>\n<p>확장가능한 밑작업 위에 템플릿 프로세서를 만듭니다. \n오브젝트의 검증 -&gt; err 순수함수 사용 or 클래스로 정의</p>\n<blockquote>\n<p>클래스의 싱글톤 객체와 static 의 차이\nstatic 은 상속이 안된다. 단순 함수와 상태만 있습니다. </p>\n</blockquote>\n<h2>쉴드 패턴</h2>\n<p>검증되어있는 코드, 모든 코드가 안정화된 것만 내려오도록 작성합니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n  template <span class=\"token operator\">=</span> <span class=\"token operator\">...</span> \n  data <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token comment\">// black list : 코드의 검증</span>\n\n<span class=\"token comment\">// white list: 위에 데이터를 이용하는 코드 (실수를 방지하기 위해)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">WL</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> template<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span></code></pre><p>유지보수 면에서는 로직 코드가 시작되기 전에 모두 검증이 끝나있어야합니다. </p>\n<blockquote>\n<p>옵셔널 코드와 쉴드패턴의 차이는 잘못되면 옵셔널은 전개가 되지 않습니다.</p>\n</blockquote>\n<p><img src=/images/post/result.png alt=결과 width=\"100%\"/></p>\n<hr>\n<p>강의 중간중간에 개발에 도움되는 얘기를 많이 듣게 됩니다. \n코드도 너무 잘 짜시고, 패턴대로 수정해나갈 수 있다는게 정말 엄청 신기하고 멋지다는 생각이 절로 듭니다. </p>\n<p>저는 직접가서 보기도 했었지만..(유튜브에 뒷통수가 출연했어요!) \n주옥같은 강의를 여러번 돌려볼 수 있다는게 너무 다행이란 생각입니다:)</p>\n","category":"JavaScript"},"posts":[{"slug":"youtube-react-flex","title":"컨퍼런스 정리(1) - 왜 나는 React를 사랑하는가","date":"2023.11.09","coverImage":"images/cover/react-flex.png","category":"React"},{"slug":"git-commit","title":"Git Commit 메시지 작성법","date":"2023.09.13","coverImage":"images/cover/default.png","category":"Tip"},{"slug":"testing-vanilla","title":"Vanilla JS Jest 적용해보기","date":"2023.09.06","coverImage":"images/cover/default.png","category":"JavaScript"},{"slug":"css-variable","title":"CSS 변수","date":"2023.09.02","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"css-position","title":"CSS Position absolute vs fixed","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"css-safari","title":"사파리 브라우저에서의 스크롤바 동작 없애기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"react-style-component","title":"React 스타일 컴포넌트 다루기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"React"},{"slug":"web-lighthouse","title":"Next.js 성능 측정","date":"2023.08.28","coverImage":"images/cover/default.png","category":"React"},{"slug":"next-portal","title":"Next.js Portal 만들기","date":"2023-08-29","coverImage":"/images/cover/default.png","category":"React"},{"slug":"css-semantic","title":"시맨틱 태그 (Semantic Tag)","date":"2023-08-24","coverImage":"/images/cover/default.png","category":"HTML_CSS"},{"slug":"blog-next","title":"Next.js로 마크다운 블로그 만들기","date":"2023-08-22","coverImage":"/images/cover/blog_next.png","category":"ToyProject"},{"slug":"css-unit","title":"CSS 단위","date":"2023-08-21","coverImage":null,"category":"HTML_CSS"},{"slug":"hello-world","title":"Hello","date":"2023-08-16"},{"slug":"shortcut-mac","title":"Mac을 편하게 사용하는 방법 7가지","date":"2022-04-06 23:00:14","coverImage":"/images/cover/shortcut-mac.png","category":"Tip"},{"slug":"react-native","title":"React Native","date":"2022-03-17 14:00:00","coverImage":"/images/cover/react-native.png","category":"React"},{"slug":"modern-js","title":"모던 자바스크립트 새로운 기능","date":"2022-01-27 23:47:36","coverImage":"/images/cover/modern-js.png","category":"JavaScript"},{"slug":"codespitz-86","title":"코드스피츠 [객체지향 자바스크립트] 돌아보기","date":"2022-01-27 21:11:37","coverImage":"/images/cover/codespitz.png","category":"JavaScript"},{"slug":"eslint-prettier","title":"VSCode 에서 ESLint와 Prettier 설정방법","date":"2022-01-15 17:05:58","coverImage":"/images/cover/eslint-prettier.png","category":"Tip"},{"slug":"typescript-config","title":"TSConfig 설정방법","date":"2022-01-14 16:14:08","coverImage":"/images/cover/typescript-config.png","category":"TypeScript"},{"slug":"react-cypress","title":"React에 Cypress 적용하기","date":"2022-01-14 13:58:02","coverImage":"/images/cover/react-cypress.png","category":"React"},{"slug":"react-runtime-error","title":"React 환경세팅에서 만난 오류들","date":"2021-12-28 14:57:17","coverImage":"/images/cover/react-runtime-error.png","category":"React"},{"slug":"browser-operation","title":"브라우저 동작 원리","date":"2021-12-01 21:59:43","coverImage":"/images/cover/browser-operation.png","category":"HTML_CSS"},{"slug":"react-redux","title":"React와 Redux","date":"2021-11-26 13:45:56","coverImage":"/images/cover/react-redux.png","category":"React"},{"slug":"css-selectors","title":"CSS 선택자","date":"2021-11-12 15:12:23","coverImage":"/images/cover/css-selectors.png","category":"HTML_CSS"},{"slug":"html-span","title":"HTML <span> 요소","date":"2021-11-12 15:08:11","coverImage":"/images/cover/html-span.png","category":"HTML_CSS"},{"slug":"create-thumbnail","title":"썸네일 이미지 생성","date":"2021-11-10 17:55:44","coverImage":"/images/cover/create-thumbnail.png","category":"ToyProject"},{"slug":"react-migration","title":"React 기존 프로젝트에 타입스크립트 마이그레이션","date":"2021-11-05 00:22:39","coverImage":"/images/cover/react-migration.png","category":"React"},{"slug":"react-vac","title":"React VAC Pattern","date":"2021-11-01 16:57:17","coverImage":"/images/cover/react-vac.png","category":"React"},{"slug":"typescript","title":"TypeScript 스터디","date":"2021-11-01 14:27:36","coverImage":"/images/cover/typescript.png","category":"TypeScript"},{"slug":"vanilla","title":"Vanilla JS 다뤄보기","date":"2021-10-30 23:20:00","coverImage":"/images/cover/vanilla.png","category":"JavaScript"},{"slug":"yarn","title":"Yarn","date":"2021-10-17 15:31:01","coverImage":"/images/cover/yarn.png","category":"JavaScript"},{"slug":"port","title":"Mac에서 Port 종료하기","date":"2021-10-10 23:31:07","coverImage":"/images/cover/port.png","category":"Tip"},{"slug":"react-condition","title":"React 조건부 렌더링","date":"2021-10-03 18:38:26","coverImage":"/images/cover/react-condition.png","category":"React"},{"slug":"load-map","title":"로드맵","date":"2021-09-24 14:39:08","coverImage":"/images/cover/default.png","category":"ToyProject"},{"slug":"blog-hexo","title":"Hexo를 이용한 github 블로그 만들기","date":"2021-09-24","coverImage":"/images/cover/blog-hexo.png","category":"ToyProject"},{"slug":"good-image","title":"good-image","date":"2021-09-13 12:59:37","coverImage":"/images/cover/study.png"},{"slug":"es6","title":"ES6 문법","date":"2020-02-04","coverImage":"/images/cover/es6.png","category":"JavaScript"},{"slug":"sass","title":"Sass(SCSS) 알아가기","date":"2020-01-22","coverImage":"/images/cover/sass.png","category":"HTML_CSS"},{"slug":"vscode","title":"VS Code 활용하기","date":"2020-01-09","coverImage":"/images/cover/vscode.png","category":"Tip"},{"slug":"storage","title":"Local & Session Storage","date":"2019-11-01","coverImage":"/images/cover/storage.png","category":"HTML_CSS"},{"slug":"testing-vue","title":"Vue.js 2.x 테스트 적용기","date":"2019-10-17","coverImage":"/images/cover/testing-vue.png","category":"Vue"},{"slug":"graphql","title":"Graphql 적용기","date":"2019-10-16","coverImage":"/images/cover/graphql.png","category":"JavaScript"},{"slug":"blob","title":"Load Image File","date":"2019-10-10","coverImage":"/images/cover/blob.png","category":"JavaScript"},{"slug":"d3","title":"D3 필요한 메서드 정리해보자","date":"2019-10-01","coverImage":"/images/cover/d3.png","category":"JavaScript"},{"slug":"settings","title":"개발환경 세팅하기","date":"2019-09-26","coverImage":"/images/cover/settings.png","category":"Tip"},{"slug":"pattern","title":"Javascript 디자인패턴 이야기","date":"2019-09-11","coverImage":"/images/cover/pattern.png","category":"JavaScript"},{"slug":"promise","title":"Javascript Promise 이야기","date":"2019-08-28","coverImage":"/images/cover/promise.png","category":"JavaScript"},{"slug":"event","title":"Javascript Event 이야기","date":"2019-08-22","coverImage":"/images/cover/event.png","category":"JavaScript"},{"slug":"object","title":"Javascript Object 이야기","date":"2019-08-21","coverImage":"/images/cover/object.png","category":"JavaScript"},{"slug":"browser","title":"Browser 이야기","date":"2019-08-19","coverImage":"/images/cover/browser.png","category":"HTML_CSS"},{"slug":"array","title":"Javascript Array 이야기","date":"2019-08-18","coverImage":"/images/cover/array.png","category":"JavaScript"},{"slug":"css-grid-flex","title":"Grid 와 Flex 사용법","date":"2019-08-16","coverImage":"/images/cover/css-grid-flex.png","category":"HTML_CSS"},{"slug":"vuejs","title":"Vue 이야기","date":"2019-08-14","coverImage":"/images/cover/vue-js.png","category":"Vue"},{"slug":"npm","title":"NPM","date":"2019-08-09","coverImage":"/images/cover/npm.png","category":"JavaScript"},{"slug":"git","title":"안 쓰면 잊어버리는 Git 명령어","date":"2019-08-08","coverImage":"/images/cover/git.png","category":"Tip"},{"slug":"blog-jekyll","title":"Jekyll을 이용한 github 블로그 만들기","date":"2019-08-07","coverImage":"/images/cover/blog-jekyll.png","category":"ToyProject"},{"slug":"canvas","title":"Canvas로 그래프 그리기","date":"2019-06-10","coverImage":"/images/cover/canvas.png","category":"HTML_CSS"}]},"__N_SSG":true}