{"pageProps":{"post":{"title":"Next.js로 마크다운 블로그 만들기","slug":"blog-next","date":"2023-08-22","content":"<h2>github 블로그를 또 바꾸는 이유</h2>\n<p>이전 블로그까지는 hexo 디자인을 적용해서 이쁘게 구성했었습니다. 하지만, Jeklly을 사용한 블로그는 레이아웃을 수정하거나 새 기능을 추가하는 건 가이드 문서를 참고하지 않으면 안되었구요. 내가 아는 언어로 마크다운 문서만 파싱할 수 있으면 새 기능도 넣고, 디자인도 커스텀하게 만들 수 있을텐데..😞 그러던 중 작년 글이지만, <a href=\"https://velog.io/@ctdlog/Next.js%EB%A1%9C-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\">마크다운 블로그 만드는 법</a>이라는 글을 읽게 되었습니다. 같은 고민으로 시작된 그 글은 마크다운 파싱하는 방법을  간단하게 알려줬고, Next.js를 사용했던 내 경험과 이번엔 내가 만들고 싶은 블로그를 만들 수 있을 거 같다는 큰 기대감을 안고 개발을 시작하게 되었습니다.</p>\n<h2>환경설정과 프로젝트 구조</h2>\n<ol>\n<li>next.js를 설치</li>\n<li>styled-components 사용</li>\n</ol>\n<p>프로젝트 구조는 <a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter\">공식문서</a>의 구조를 그대로 착안해서 만들게 되었습니다. 이전 블로그도 _posts 폴더에 마크다운을 넣어두기도 했었구요. _posts, pages, lib 폴더를 만들어서 마크다운 문서를 파싱할 유틸리티를 모아두었습니다.</p>\n<h2>주요 기능</h2>\n<ul>\n<li>_post 폴더 내 파일 문서를 읽어와서 파싱 후에 보여준다.</li>\n<li>모바일에서도 지원하는 블로그를 만든다.</li>\n</ul>\n<pre><code>// lib/api.ts\ngetPostSlugs() {\n    // fs 모듈을 이용해 _posts 안에 있는 파일들을 가져온다.\n    return fs.readdirSync(postsDirectory);\n}\n\ngetPostBySlug() {\n    // gray-matter 라이브러리를 사용해서 마크다운 파일의 front-matter를 파싱해준다. \n}\n</code></pre>\n<pre><code>// pages/_app.tsx\ngetStaticProps() {\n    posts = getAllPosts([&#39;slug&#39;]);\n    return {\n        props: {\n        posts,\n        },\n    };\n}\n\n// pages/[slug].tsx\nexport async function getStaticPaths(){\n  const posts = getAllPosts([&#39;slug&#39;]);\n\n  return {\n    paths: posts.map((post) =&gt; {\n      return {\n        params: {\n          slug: post.slug,\n          category: post.category,\n        },\n      };\n    }),\n    fallback: false,\n  }; \n}\n\nexport async function getStaticProps({ params,\n}: {\n  params: {\n    slug: string;\n    category: string;\n  };\n}) {\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      posts,\n    },\n  };\n}\n</code></pre>\n<h2>기술적인 고민과 해결책</h2>\n<ul>\n<li>카테고리별로 라우팅할 수 있게 만들고 싶었습니다. ex) /React/react-redux\n포스트는 기본적으로 [slug].tsx 페이지에서 본문 내용을 파싱해서 보여주고 있습니다. Next.js는 pages 에서 파일을 만들면 자동으로 라우팅 페이지가 만들어집니다. 그렇다면, 앞에 예제대로라면, 카테고리별로 폴더를 만들면 되는 것이 아닐까?🤔 그리고 간단하게 폴더를 구분하는 방법으로 해결했습니다.</li>\n</ul>\n<p><img src=/images/post/blog_next_3.png alt=라우팅 width='20%'/></p>\n<ul>\n<li>하지만, 위에 방법처럼 하는건 상당히 중복 작업이라 공통 레이아웃 페이지를 만들 필요가 생겼습니다.\n상세 페이지와 메인 페이지 레이아웃을 시멘틱 태그로 작업했습니다.</li>\n</ul>\n<pre><code>// PostLayout.tsx\n\ninterface PostLayoutProps {\n  children: ReactNode;\n  posts: PostType[];\n  category: PostCategory;\n}\nconst PostLayout = ({ posts, category, children }: PostLayoutProps) =&gt; {\n  return (\n    &lt;Container&gt;\n      &lt;Header /&gt;\n      &lt;Aside&gt;\n        &lt;PostSideBar posts={posts} category={category} /&gt;\n      &lt;/Aside&gt;\n      &lt;div&gt;ttt&lt;/div&gt;\n      &lt;Main&gt;{children}&lt;/Main&gt;\n    &lt;/Container&gt;\n  );\n};\n</code></pre>\n<h2>사용자 경험 개선</h2>\n<p><img src=/images/post/blog_next_1.png alt=데모1 width=\"100%\"/></p>\n<ul>\n<li>카테고리 별로 다른 레이아웃으로 본문을 보여줍니다.</li>\n</ul>\n<h2>배포</h2>\n<p>배포 자동화하는 .github/workflows에 yml 파일을 추가하여 워크플로우를 등록해줍니다.</p>\n<p>개발은 develop 브랜치에서 할꺼니까, build 후에 gh-pages 브랜치에 배포 파일이 업데이트 될 수 있게 스크립트를 수정해줬습니다. 그리고 최종적으로 github 사이트에서 호스팅할 브랜치를 변경해줍니다.</p>\n<p>github Project &gt; Settings &gt; Pages &gt; Branch 를 변경!</p>\n<p><a href=\"https://bepyan.github.io/blog/nextjs-blog/4-deploy\">Next.js 블로그 Github Pages에 자동 배포하기</a> 글을 참고했습니다.</p>\n<h2>회고</h2>\n<p>next.js 에서 기본 사용하는 메서드를 구별 못하고 있는 것을 알았다. 지금의 완성품은 겨우 따라 작성하는 수준밖에 안되고, 수정은 가능하지만 딱 그 수준이다. 모바일을 지원하는 사이트를 만들어 본 경험이 부족했다. 미디어 쿼리를 사용해서 모바일 사이즈를 지원한다는 건 사용자 경험을 상당부분 반영해야한다는 것도 알았다. 지금은 개선해야할 것이 아직 많지만, 블로그는 조금씩 개선할 생각이다.</p>\n<h2>개선 사항</h2>\n<ul>\n<li>모바일 사이즈일 땐, 메뉴 아이콘을 보여주고 클릭 시에만 메뉴 목록을 띄워준다.</li>\n<li>프로필에 경력기간 차트를 캔버스로 개발해서 모바일에서도 보이도록 지원한다.</li>\n<li>키워드 검색기능 추가</li>\n<li>코드블럭 색상과 이미지 사이즈 추가할 수 있도록 마크</li>\n</ul>\n","category":"ToyProject"},"posts":[{"slug":"web-lighthouse","title":"웹 성능 측정","date":"2023.08.28","coverImage":"images/cover/","category":"JavaScript"},{"slug":"css-semantic","title":"시맨틱 태그 (Semantic Tag)","date":"2023-08-24","coverImage":"/images/cover/default.png","category":"HTML_CSS"},{"slug":"react-portal","title":"React Portal","date":"2023-08-24","coverImage":"/images/cover/default.png","category":"React"},{"slug":"blog-next","title":"Next.js로 마크다운 블로그 만들기","date":"2023-08-22","coverImage":"/images/cover/blog_next.png","category":"ToyProject"},{"slug":"css-unit","title":"CSS 단위","date":"2023-08-21","coverImage":null,"category":"HTML_CSS"},{"slug":"hello-world","title":"Hello","date":"2023-08-16"},{"slug":"shortcut-mac","title":"Mac을 편하게 사용하는 방법 7가지","date":"2022-04-06 23:00:14","coverImage":"/images/cover/shortcut-mac.png","category":"Tip"},{"slug":"react-native","title":"React Native","date":"2022-03-17 14:00:00","coverImage":"/images/cover/react-native.png","category":"React"},{"slug":"modern-js","title":"모던 자바스크립트 새로운 기능","date":"2022-01-27 23:47:36","coverImage":"/images/cover/modern-js.png","category":"JavaScript"},{"slug":"codespitz-86","title":"코드스피츠 [객체지향 자바스크립트] 돌아보기","date":"2022-01-27 21:11:37","coverImage":"/images/cover/codespitz.png","category":"JavaScript"},{"slug":"eslint-prettier","title":"VSCode 에서 ESLint와 Prettier 설정방법","date":"2022-01-15 17:05:58","coverImage":"/images/cover/eslint-prettier.png","category":"Tip"},{"slug":"typescript-config","title":"TSConfig 설정방법","date":"2022-01-14 16:14:08","coverImage":"/images/cover/typescript-config.png","category":"TypeScript"},{"slug":"react-cypress","title":"React에 Cypress 적용하기","date":"2022-01-14 13:58:02","coverImage":"/images/cover/react-cypress.png","category":"React"},{"slug":"react-runtime-error","title":"React에서 만난 오류들","date":"2021-12-28 14:57:17","coverImage":"/images/cover/react-runtime-error.png","category":"React"},{"slug":"browser-operation","title":"브라우저 동작 원리","date":"2021-12-01 21:59:43","coverImage":"/images/cover/browser-operation.png","category":"HTML_CSS"},{"slug":"react-redux","title":"React와 Redux","date":"2021-11-26 13:45:56","coverImage":"/images/cover/react-redux.png","category":"React"},{"slug":"css-selectors","title":"CSS 선택자","date":"2021-11-12 15:12:23","coverImage":"/images/cover/css-selectors.png","category":"HTML_CSS"},{"slug":"html-span","title":"HTML <span> 요소","date":"2021-11-12 15:08:11","coverImage":"/images/cover/html-span.png","category":"HTML_CSS"},{"slug":"create-thumbnail","title":"썸네일 이미지 생성","date":"2021-11-10 17:55:44","coverImage":"/images/cover/create-thumbnail.png","category":"ToyProject"},{"slug":"react-migration","title":"React 기존 프로젝트에 타입스크립트 마이그레이션","date":"2021-11-05 00:22:39","coverImage":"/images/cover/react-migration.png","category":"React"},{"slug":"react-vac","title":"React VAC Pattern","date":"2021-11-01 16:57:17","coverImage":"/images/cover/react-vac.png","category":"React"},{"slug":"typescript","title":"TypeScript 스터디","date":"2021-11-01 14:27:36","coverImage":"/images/cover/typescript.png","category":"TypeScript"},{"slug":"vanilla","title":"Vanilla JS 다뤄보기","date":"2021-10-30 23:20:00","coverImage":"/images/cover/vanilla.png","category":"JavaScript"},{"slug":"yarn","title":"Yarn","date":"2021-10-17 15:31:01","coverImage":"/images/cover/yarn.png","category":"JavaScript"},{"slug":"port","title":"Mac에서 Port 종료하기","date":"2021-10-10 23:31:07","coverImage":"/images/cover/port.png","category":"Tip"},{"slug":"react-condition","title":"React 조건부 렌더링","date":"2021-10-03 18:38:26","coverImage":"/images/cover/react-condition.png","category":"React"},{"slug":"load-map","title":"로드맵","date":"2021-09-24 14:39:08","coverImage":"/images/cover/default.png","category":"ToyProject"},{"slug":"blog-hexo","title":"Hexo를 이용한 github 블로그 만들기","date":"2021-09-24","coverImage":"/images/cover/blog-hexo.png","category":"ToyProject"},{"slug":"good-image","title":"good-image","date":"2021-09-13 12:59:37","coverImage":"/images/cover/study.png"},{"slug":"es6","title":"ES6 문법","date":"2020-02-04","coverImage":"/images/cover/es6.png","category":"JavaScript"},{"slug":"sass","title":"Sass(SCSS) 알아가기","date":"2020-01-22","coverImage":"/images/cover/sass.png","category":"HTML_CSS"},{"slug":"shortcut","title":"단축키 모음","date":"2020-01-09","coverImage":"/images/cover/vscode.png","category":"Tip"},{"slug":"storage","title":"Local & Session Storage","date":"2019-11-01","coverImage":"/images/cover/storage.png","category":"HTML_CSS"},{"slug":"testing-vue","title":"Vue.js 2.x 테스트 적용기","date":"2019-10-17","coverImage":"/images/cover/testing-vue.png","category":"Vue"},{"slug":"graphql","title":"Graphql 적용기","date":"2019-10-16","coverImage":"/images/cover/graphql.png","category":"JavaScript"},{"slug":"blob","title":"Load Image File","date":"2019-10-10","coverImage":"/images/cover/blob.png","category":"JavaScript"},{"slug":"d3","title":"D3 필요한 메서드 정리해보자","date":"2019-10-01","coverImage":"/images/cover/d3.png","category":"JavaScript"},{"slug":"settings","title":"개발환경 세팅하기","date":"2019-09-26","coverImage":"/images/cover/settings.png","category":"Tip"},{"slug":"pattern","title":"Javascript 디자인패턴 이야기","date":"2019-09-11","coverImage":"/images/cover/pattern.png","category":"JavaScript"},{"slug":"promise","title":"Javascript Promise 이야기","date":"2019-08-28","coverImage":"/images/cover/promise.png","category":"JavaScript"},{"slug":"event","title":"Javascript Event 이야기","date":"2019-08-22","coverImage":"/images/cover/event.png","category":"JavaScript"},{"slug":"object","title":"Javascript Object 이야기","date":"2019-08-21","coverImage":"/images/cover/object.png","category":"JavaScript"},{"slug":"browser","title":"Browser 이야기","date":"2019-08-19","coverImage":"/images/cover/browser.png","category":"HTML_CSS"},{"slug":"array","title":"Javascript Array 이야기","date":"2019-08-18","coverImage":"/images/cover/array.png","category":"JavaScript"},{"slug":"css-grid-flex","title":"Grid 와 Flex 사용법","date":"2019-08-16","coverImage":"/images/cover/css-grid-flex.png","category":"HTML_CSS"},{"slug":"vuejs","title":"Vue 이야기","date":"2019-08-14","coverImage":"/images/cover/vue-js.png","category":"Vue"},{"slug":"npm","title":"NPM","date":"2019-08-09","coverImage":"/images/cover/npm.png","category":"JavaScript"},{"slug":"git","title":"안 쓰면 잊어버리는 Git 명령어","date":"2019-08-08","coverImage":"/images/cover/git.png","category":"Tip"},{"slug":"blog-jekyll","title":"Jekyll을 이용한 github 블로그 만들기","date":"2019-08-07","coverImage":"/images/cover/blog-jekyll.png","category":"ToyProject"},{"slug":"canvas","title":"Canvas로 그래프 그리기","date":"2019-06-10","coverImage":"/images/cover/canvas.png","category":"HTML_CSS"}]},"__N_SSG":true}