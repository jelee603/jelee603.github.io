{"pageProps":{"post":{"title":"React와 Redux","slug":"react-redux","date":"2021-11-26 13:45:56","content":"<h2>리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다.</h2>\n<ul>\n<li>여러 컴포넌트에 걸쳐 전달하게 될 경우, 불필요한 props 가 늘어날 수 있다.</li>\n<li>형제 컴포넌트에서 불필요한 렌더링이 일어날 수 있다.</li>\n<li>최상위 컴포넌트에서 상태관리 로직이 많아 길어지는 현상도 있을 수 있다.<!-- more --></li>\n</ul>\n<h2>리덕스의 동작 과정</h2>\n<pre><code>1. 리덕스는 스토어라는 객체 내부에 상태를 담게 됩니다.\n\n2. 상태를 변경시킬 때, 액션을 전달하는데 이 과정을 디스패치라합니다.\n\n3. 스토어가 액션을 받으면 리듀서가 상태를 변화시키는 로직으로 어떤 작업을 할지 정합니다.\n\n4. 액션 처리 후에 새 상태를 스토어에 담습니다.\n\n5. 스토어 안에 있는 상태가 바뀌면 구독하고 있는 컴포넌트에게 전달합니다.\n</code></pre>\n<pre class = \"line-numbers\"><code class = \"language-js\">yarn add redux react<span class=\"token operator\">-</span>redux</code></pre><p>타입스크립트 공식문서 <a href=\"https://ko.redux.js.org/recipes/usage-with-typescript\">예제</a>는 actions 와 reducer 파일을 분리했지만, 공부하는 입장에서 분리하지 않고 하나로 보면 아래와 같습니다.</p>\n<p><code>Action</code> 접미사를 붙인 객체에는</p>\n<p>type 에 넘겨줄 값들의 타입을 정의하고,</p>\n<p>payload 에 리듀서 상태를 변경하는 로직을 넣어줍니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token comment\">// src/store/system.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATE_SESSION</span> <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE_SESSION'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SystemState</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">loggedIn</span><span class=\"token operator\">:</span> boolean\n  <span class=\"token literal-property property\">session</span><span class=\"token operator\">:</span> string\n  <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UpdateSessionAction</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> <span class=\"token constant\">UPDATE_SESSION</span>\n  <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> SystemState\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 액션은 상태 변화 시킬 때 참조하는 객체를 정의한다.</span>\n<span class=\"token keyword\">export</span> type SystemActionTypes <span class=\"token operator\">=</span> UpdateSessionAction\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">initialState</span><span class=\"token operator\">:</span> SystemState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">loggedIn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">session</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 리듀서는 액션으로부터 받은 상태 변화 로직만 처리한다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">systemReducer</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">action</span><span class=\"token operator\">:</span> SystemActionTypes</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> SystemState <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">UPDATE_SESSION</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>payload\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token comment\">// src/store/index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> systemReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./system/reducers'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> chatReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./chat/reducers'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">system</span><span class=\"token operator\">:</span> systemReducer<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">chat</span><span class=\"token operator\">:</span> chatReducer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2개이상의 리듀서를 합쳐서 내보낸다.</span>\n<span class=\"token keyword\">export</span> type RootState <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> rootReducer<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre><p>index 파일에서 위에 정의했던 리듀서를 합쳐서 내보내주게 됩니다.</p>\n<p><a href=\"https://lunit.gitbook.io/redux-in-korean/recipes/structuringreducers/usingcombinereducers\">combineReducers</a>를 사용하면 여러개의 리듀서를 한번에 호출할 수 있습니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token comment\">// src/hooks/useUpdateSession.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SystemActionTypes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../store/system'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useUpdateSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">SystemActionTypes</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><p>useDispatch 함수는 액션을 전달합니다.\nhooks 디렉토리에는 이러한 dispatch 동작들을 정해둡니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\"><span class=\"token comment\">// src/components/**.tsx</span>\n\n<span class=\"token keyword\">const</span> updateSession <span class=\"token operator\">=</span> <span class=\"token function\">useUpdateSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">loggedIn</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">session</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">userName</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><p>화면에서 사용할 때는, <code>use</code> 접두사를 사용한 hook 을 사용합니다.</p>\n<p>디버깅으로 리덕스로 변경된 값을 확인하는 방법은 크롬 확장자 도구에 리덕스 개발자도구(<a href=\"https://react.vlpt.us/redux/06-redux-devtools.html\">적용 방법</a>)를 설치하시면 됩니다.</p>\n<pre class = \"line-numbers\"><code class = \"language-js\">$ yarn add redux<span class=\"token operator\">-</span>devtools<span class=\"token operator\">-</span>extension\n\n<span class=\"token comment\">// index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> composeWithDevTools <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-devtools-extension'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">,</span> <span class=\"token function\">composeWithDevTools</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h2>참고</h2>\n<ul>\n<li><a href=\"https://ko.redux.js.org/recipes/usage-with-typescript/\">https://ko.redux.js.org/recipes/usage-with-typescript/</a></li>\n<li><a href=\"https://velog.io/@velopert/use-typescript-and-redux-like-a-pro\">https://velog.io/@velopert/use-typescript-and-redux-like-a-pro</a></li>\n<li><a href=\"https://react.vlpt.us/redux/06-redux-devtools.html\">https://react.vlpt.us/redux/06-redux-devtools.html</a></li>\n</ul>\n","category":"React","coverImage":"/images/cover/react-redux.png"},"posts":[{"slug":"youtube-react-flex","title":"컨퍼런스 정리(1) - 왜 나는 React를 사랑하는가","date":"2023.11.09","coverImage":"images/cover/react-flex.png","category":"React"},{"slug":"git-commit","title":"Git Commit 메시지 작성법","date":"2023.09.13","coverImage":"images/cover/default.png","category":"Tip"},{"slug":"testing-vanilla","title":"Vanilla JS Jest 적용해보기","date":"2023.09.06","coverImage":"images/cover/default.png","category":"JavaScript"},{"slug":"css-variable","title":"CSS 변수","date":"2023.09.02","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"css-position","title":"CSS Position absolute vs fixed","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"css-safari","title":"사파리 브라우저에서의 스크롤바 동작 없애기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS"},{"slug":"react-style-component","title":"React 스타일 컴포넌트 다루기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"React"},{"slug":"web-lighthouse","title":"Next.js 성능 측정","date":"2023.08.28","coverImage":"images/cover/default.png","category":"React"},{"slug":"next-portal","title":"Next.js Portal 만들기","date":"2023-08-29","coverImage":"/images/cover/default.png","category":"React"},{"slug":"css-semantic","title":"시맨틱 태그 (Semantic Tag)","date":"2023-08-24","coverImage":"/images/cover/default.png","category":"HTML_CSS"},{"slug":"blog-next","title":"Next.js로 마크다운 블로그 만들기","date":"2023-08-22","coverImage":"/images/cover/blog_next.png","category":"ToyProject"},{"slug":"css-unit","title":"CSS 단위","date":"2023-08-21","coverImage":null,"category":"HTML_CSS"},{"slug":"hello-world","title":"Hello","date":"2023-08-16"},{"slug":"shortcut-mac","title":"Mac을 편하게 사용하는 방법 7가지","date":"2022-04-06 23:00:14","coverImage":"/images/cover/shortcut-mac.png","category":"Tip"},{"slug":"react-native","title":"React Native","date":"2022-03-17 14:00:00","coverImage":"/images/cover/react-native.png","category":"React"},{"slug":"modern-js","title":"모던 자바스크립트 새로운 기능","date":"2022-01-27 23:47:36","coverImage":"/images/cover/modern-js.png","category":"JavaScript"},{"slug":"codespitz-86","title":"코드스피츠 [객체지향 자바스크립트] 돌아보기","date":"2022-01-27 21:11:37","coverImage":"/images/cover/codespitz.png","category":"JavaScript"},{"slug":"eslint-prettier","title":"VSCode 에서 ESLint와 Prettier 설정방법","date":"2022-01-15 17:05:58","coverImage":"/images/cover/eslint-prettier.png","category":"Tip"},{"slug":"typescript-config","title":"TSConfig 설정방법","date":"2022-01-14 16:14:08","coverImage":"/images/cover/typescript-config.png","category":"TypeScript"},{"slug":"react-cypress","title":"React에 Cypress 적용하기","date":"2022-01-14 13:58:02","coverImage":"/images/cover/react-cypress.png","category":"React"},{"slug":"react-runtime-error","title":"React 환경세팅에서 만난 오류들","date":"2021-12-28 14:57:17","coverImage":"/images/cover/react-runtime-error.png","category":"React"},{"slug":"browser-operation","title":"브라우저 동작 원리","date":"2021-12-01 21:59:43","coverImage":"/images/cover/browser-operation.png","category":"HTML_CSS"},{"slug":"react-redux","title":"React와 Redux","date":"2021-11-26 13:45:56","coverImage":"/images/cover/react-redux.png","category":"React"},{"slug":"css-selectors","title":"CSS 선택자","date":"2021-11-12 15:12:23","coverImage":"/images/cover/css-selectors.png","category":"HTML_CSS"},{"slug":"html-span","title":"HTML <span> 요소","date":"2021-11-12 15:08:11","coverImage":"/images/cover/html-span.png","category":"HTML_CSS"},{"slug":"create-thumbnail","title":"썸네일 이미지 생성","date":"2021-11-10 17:55:44","coverImage":"/images/cover/create-thumbnail.png","category":"ToyProject"},{"slug":"react-migration","title":"React 기존 프로젝트에 타입스크립트 마이그레이션","date":"2021-11-05 00:22:39","coverImage":"/images/cover/react-migration.png","category":"React"},{"slug":"react-vac","title":"React VAC Pattern","date":"2021-11-01 16:57:17","coverImage":"/images/cover/react-vac.png","category":"React"},{"slug":"typescript","title":"TypeScript 스터디","date":"2021-11-01 14:27:36","coverImage":"/images/cover/typescript.png","category":"TypeScript"},{"slug":"vanilla","title":"Vanilla JS 다뤄보기","date":"2021-10-30 23:20:00","coverImage":"/images/cover/vanilla.png","category":"JavaScript"},{"slug":"yarn","title":"Yarn","date":"2021-10-17 15:31:01","coverImage":"/images/cover/yarn.png","category":"JavaScript"},{"slug":"port","title":"Mac에서 Port 종료하기","date":"2021-10-10 23:31:07","coverImage":"/images/cover/port.png","category":"Tip"},{"slug":"react-condition","title":"React 조건부 렌더링","date":"2021-10-03 18:38:26","coverImage":"/images/cover/react-condition.png","category":"React"},{"slug":"load-map","title":"로드맵","date":"2021-09-24 14:39:08","coverImage":"/images/cover/default.png","category":"ToyProject"},{"slug":"blog-hexo","title":"Hexo를 이용한 github 블로그 만들기","date":"2021-09-24","coverImage":"/images/cover/blog-hexo.png","category":"ToyProject"},{"slug":"good-image","title":"good-image","date":"2021-09-13 12:59:37","coverImage":"/images/cover/study.png"},{"slug":"es6","title":"ES6 문법","date":"2020-02-04","coverImage":"/images/cover/es6.png","category":"JavaScript"},{"slug":"sass","title":"Sass(SCSS) 알아가기","date":"2020-01-22","coverImage":"/images/cover/sass.png","category":"HTML_CSS"},{"slug":"vscode","title":"VS Code 활용하기","date":"2020-01-09","coverImage":"/images/cover/vscode.png","category":"Tip"},{"slug":"storage","title":"Local & Session Storage","date":"2019-11-01","coverImage":"/images/cover/storage.png","category":"HTML_CSS"},{"slug":"testing-vue","title":"Vue.js 2.x 테스트 적용기","date":"2019-10-17","coverImage":"/images/cover/testing-vue.png","category":"Vue"},{"slug":"graphql","title":"Graphql 적용기","date":"2019-10-16","coverImage":"/images/cover/graphql.png","category":"JavaScript"},{"slug":"blob","title":"Load Image File","date":"2019-10-10","coverImage":"/images/cover/blob.png","category":"JavaScript"},{"slug":"d3","title":"D3 필요한 메서드 정리해보자","date":"2019-10-01","coverImage":"/images/cover/d3.png","category":"JavaScript"},{"slug":"settings","title":"개발환경 세팅하기","date":"2019-09-26","coverImage":"/images/cover/settings.png","category":"Tip"},{"slug":"pattern","title":"Javascript 디자인패턴 이야기","date":"2019-09-11","coverImage":"/images/cover/pattern.png","category":"JavaScript"},{"slug":"promise","title":"Javascript Promise 이야기","date":"2019-08-28","coverImage":"/images/cover/promise.png","category":"JavaScript"},{"slug":"event","title":"Javascript Event 이야기","date":"2019-08-22","coverImage":"/images/cover/event.png","category":"JavaScript"},{"slug":"object","title":"Javascript Object 이야기","date":"2019-08-21","coverImage":"/images/cover/object.png","category":"JavaScript"},{"slug":"browser","title":"Browser 이야기","date":"2019-08-19","coverImage":"/images/cover/browser.png","category":"HTML_CSS"},{"slug":"array","title":"Javascript Array 이야기","date":"2019-08-18","coverImage":"/images/cover/array.png","category":"JavaScript"},{"slug":"css-grid-flex","title":"Grid 와 Flex 사용법","date":"2019-08-16","coverImage":"/images/cover/css-grid-flex.png","category":"HTML_CSS"},{"slug":"vuejs","title":"Vue 이야기","date":"2019-08-14","coverImage":"/images/cover/vue-js.png","category":"Vue"},{"slug":"npm","title":"NPM","date":"2019-08-09","coverImage":"/images/cover/npm.png","category":"JavaScript"},{"slug":"git","title":"안 쓰면 잊어버리는 Git 명령어","date":"2019-08-08","coverImage":"/images/cover/git.png","category":"Tip"},{"slug":"blog-jekyll","title":"Jekyll을 이용한 github 블로그 만들기","date":"2019-08-07","coverImage":"/images/cover/blog-jekyll.png","category":"ToyProject"},{"slug":"canvas","title":"Canvas로 그래프 그리기","date":"2019-06-10","coverImage":"/images/cover/canvas.png","category":"HTML_CSS"}]},"__N_SSG":true}