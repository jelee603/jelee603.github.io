{"pageProps":{"posts":[{"slug":"react-study","title":"자주쓰는 리액트 방법","date":"2024.02.17","coverImage":"images/cover/default.png","category":"React","content":"\n리액트를 공부하면서 매번 찾아보게 되는 것이 몇가지 있다. \n정리해서 적어본다.\n\n### 1. 리액트에서 왜 key를 써야하지?\n\n\"리액트는 뷰에 변화가 있을 때, 구 가상 DOM과 새 가상 DOM을 비교하여 변경된 내용만 DOM에 적용한다.\" 이게 핵심 포인트이다. \n반복문을 돌렸을 때, 같은 key를 가지고 있으면 리액트는 변화가 없다 판단하고, 업데이트를 하지 않는다. \n만약에 key를 인덱스로 사용하면, 항목 순서가 바뀔 때 마다 key도 같이 변경된다. \n업데이트로 인해, 변화가 필요한 경우가 아니라면 key를 고유한 값으로 인지할 수 있도록 하자. \n\n참고: [재조정과 key 사용 이유](https://charles098.tistory.com/204)\n\n\n### 2. 타입스크립트의 제네릭을 사용하는 방법\n\n제네릭은 타입을 사용자에게 맡기고 코드를 작성할 때 선언할 수 있게 해준다. \n함수에서 동작은 같지만, 리턴 받아야하는 타입이 다른 경우에 유용한데 아직 어렵다.\n\n```js\nconst output: <T>(input: T) => T = (input) => { return input }\n\nconsole.log(output<boolean>(true)) // true\n```\n\n참고: [인터페이스와 제네릭](https://charles098.tistory.com/165)\n\n\n### 3. MSW를 사용한 모킹을 쉽게 하는 방법\n\n실제 API 주소를 호출하면 중간에 모킹서버가 이 호출을 가로채 자기의 MOCK 데이터를 내려주는 방법이다. \n이 방법은 실제 따라하기를 하면, service 에 http 메서드를 호출할 수 있도록 미들웨어를 만들고, 호출할 수 있게 세팅을 해주면 된다.  \nresponse 타입을 지정할 때 2번의 제네릭을 활용하면, 더 깔끔하게 코드를 작성할 수 있다. \n\n참고: \n - [MSW 공식](https://mswjs.io/docs/integrations/browser)\n - [API 모킹 쉽고 빠르게 활용하는 방법](https://ryuhojin.tistory.com/46)\n - [Typescript로 더 깔끔하게 Axios 사용해보기](https://velog.io/@yyeonggg/Typescript%EB%A1%9C-%EB%8D%94-%EA%B9%94%EB%81%94%ED%95%98%EA%B2%8C-Axios-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0)\n\n\n### 4. 라디오 셀렉트 박스를 만들 때, 스타일만으로도 가능할까?\n\n```js\n\nonClick: (e: MouseEvent) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (e.defaultPrevented) return;\n\t\t\t\tstate.setSelectedValue(props.value);\n\t\t\t}, 0);\n\t\t},\n\n```\n\n참고: [더블 클릭시, 라디오 버튼 체크 푸는 방법](https://github.com/adobe/react-spectrum/issues/4971)\n\n\n### 5. 폼을 만드는 이유\n\n\"form\"은 데이터를 수집하는 컨테이너이고, \"input\"은 사용자로부터 실제로 데이터를 입력하는 데 사용되는 요소라 서로 다른 역할을 한다. \n\n\n참고: \n- [폼을 쉽게 만드는 방법](https://medium.com/@ketchasso72/how-to-handle-forms-in-react-the-easy-way-to-do-it-8a6805c7c1d5)\n- [react-hook-form](https://dealicious-inc.github.io/2022/07/25/ss-studio.html)\n\n### 6. 테스트는 어떻게 시작하지?\n\n유저 이벤트 테스트를 하는 방법부터 시작을 해볼까한다. \n위에 폼 만드는 방법으로 양식을 입력받고 userEvent를 발생시켜 동작시켜본다. \n\n테스트를 설정하는데 가장 힘든건 i18n을 적용했을 때가 아닐까, 다국어를 표현하기 위한건데 어떻게 테스트를 하지?라고 막막했지만 값을 비교하는게 아니라 호출하는 그 변수명을 그대로 string 으로 비교하는 것이었다. 그런데 이건 까다롭게도 jest에서 사용하려면 설정을 해줘야한다. \n\n```js\n// given\nconst props = {}\n\n// when\nrender()\n\n// then \nexpect().toBe()\n```\n\n참고: \n- [유저 이벤트 테스트](https://www.daleseo.com/testing-library-user-agent)\n- [TextEncoder is not defined](https://github.com/jsdom/whatwg-url/issues/209#issuecomment-1015559283)\n- [Jest에서 import가 안되는 오류 해결방법](https://velog.io/@yooha9621/nodejest%EC%97%90%EC%84%9C-import%EA%B0%80-%EC%95%88%EB%90%98%EB%8A%94-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95)\n\n\n### 7. Yarn Berry란?\n\nyarn berry는 당황할 수 밖에 없었다. node_modules 폴더는 온데간데 없고, .yarn/cache 폴더가 생기고 그로 인해 파생되는 몇가지 설정들이 여간 복잡한게 아니었다. 하지만, 더 빠른 퍼포먼스인 것은 확실했다. 설치 속도가 너무 빨랐으니.\n\n참고: \n- [Yarn Berry를 사용해보자](https://velog.io/@seokunee/Yarn-Berry%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90)\n- [yarn berry + Next.js + Typescript](https://kimyanglogging.tistory.com/7)\n\n\n### 8. 시멘틱 마크업은 매번 헷갈리는데 외울까?\n\nheader/aside/main(article/section)/footer\n\n참고: [알아두면 쓸모 있는 시멘틱 마크업](https://brunch.co.kr/@tigrisdesign/7)\n\n\n### 9. 객체를 타입으로 변환하는 방법은? \n\n참고: \n- [keyof/typeof 사용법](https://inpa.tistory.com/entry/TS-%F0%9F%93%98-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-keyof-typeof-%EC%82%AC%EC%9A%A9%EB%B2%95)\n- [union type, intersection type](https://fe-developers.kakaoent.com/2022/221124-typescript-tip/)\n\n### 10. useState props에 타입스크립트 타입을 지정하는 방법\n\n```js\n// element event 사용할 때\nimport {ChangeEvent} from \"react\"\n\ninterface ComponentProps {\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\n// useState props 사용할 때\nimport {Dispatch} from \"react\"\n\ninterface ComponentProps {\n    setState: Dispatch<boolean>\n}\n```"},{"slug":"what-zsh","title":"iTerms2 + ZSH 사용하기","date":"2023.12.02","coverImage":"images/cover/default.png","category":"Tip","content":"\n맥 OS에서 가상 터미널을 기본적으로 제공하지만, 터미널이 너무 투박해서 iTerms2를 사용하고 있습니다. iTerms2는 현재 오픈소스로 개발되고 있습니다. \n\nzsh은 bash의 확장팩이라고 볼 수 있습니다. \n기능으로 경로 자동추론과 타이핑 교정이 있습니다. \n\nzsh을 더 쉽게 사용하기 위해 'Oh My ZSH'을 플러그인을 설치해서 사용하고 있는데, 테마를 설정하면 무엇보다도 이쁩니다. \n\n\n## 설정방법\n1. [Homebrew](https://brew.sh) 설치합니다. \n2. zsh 설치 \n\n    ```js\n    brew install zsh\n    ```\n    \n3. [oh-my-zsh](https://ohmyz.sh/#install) 플러그인 설치\n4. [iTerms2](https://iterm2.com) 설치\n\n\n\n## 테마 설정방법\n1. agnoster 테마 설치하기 \n\n    설정파일을 열어줍니다.\n    ```js\n    vi ~/.zshrc \n    ```\n    'agnoster' 테마로 변경해줍니다. \n    ```js\n    // zshrc\n    - ZSH_THEME=\"robyrussell\"\n    + ZSH_THEME=\"agnoster\"\n    ```\n\n2. 폰트 설치하기\n\n    한글은 깨짐현상이 있어, powerline 폰트나 [d2Coding](https://github.com/naver/d2codingfont) 폰트를 사용합니다. \n\n    - iTerms2-Preferences-Text\n    - 터미널-설정-프로파일-텍스트\n\n## 편리한 단축키 설정\n\n```js\n// zshrc\n# alias\nalias dev=\"/Users/[사용자 폴더]/Desktop/dev\"\n```\n\n이렇게 써두면, dev 별칭으로 이동이 가능합니다.\n\n![터미널](/images/post/result-zsh.png)"},{"slug":"youtube-ab180-2023","title":"컨퍼런스 정리(2) - 몇 천 페이지의 유저 가이드를 새로 만들며","date":"2023.11.15","coverImage":"images/cover/youtube-ab180-2023.png","category":"React","content":"\nYouTube URL: https://www.youtube.com/watch?v=V2E4ft7vqao - FECONF 2023\n\n## 목차 \n\n- [유저 가이드에 관하여](#유저-가이드에-관하여)\n    - 유저 가이드가 무엇인가요?\n    - 왜, 어떻게 갈아엎었나요?\n    - 리액트 서버 컴포넌트에 배팅하기\n\n- [개발 과정에서 만난 문제들](#개발-과정에서-만난-문제들)\n    - 접혀진 아코디언은 검색할 수 없나요?\n    - 정적 사이트 생성은 적절한 방법인가요?\n- [마무리](#마무리)\n\n## 유저 가이드에 관하여\n\n마케팅 성과분석 도구인 대시보드를 만드는 과정에서 고객의 궁금증과 사용자의 허들을 낮추기 위해 유저 가이드북을 제작하게 되었다. 회사에서 PW팀에서 운영관리를 해주고 있다. \n\n기존에는 Zendesk라는 [CMS](https://namu.wiki/w/CMS#toc:~:text=%EA%B8%88%EC%9C%B5%EC%9E%90%EC%82%B0%20%EA%B2%B0%EC%A0%9C%20%EB%B0%A9%EB%B2%95.-,2.,-Contents%20Management%20System) 서비스로 유저 가이드를 운영\n\n레이아읏, 테마를 핸들바 형식으로 작성하고, 업로드(WYSIWYG 에디터를 이용)\n글을 작성하면 HTML 코드를 생성해주고 있다. \n\n\n> 문제 정의\n> - 중복되는 내용과 화면이 상당히 많다. -> 콘텐츠 모델, 컴포넌트의 개념이 없다.\n> - HTML copy, past 방식으로 글을 작성하고 있었다.\n> - 반복되는 내용을 찾거나 일괄 수정하기도 어려움 -> 콘텐츠, 스타일, 스크립트가 강결합되어 유지보수가 어렵다.\n\n> 목표\n> - 불편함을 해소할 수 있는 방법 -> Headless CMS가 좋겠어!\n> - 글 작성시에 구조화 가능한 콘텐츠를 작성하고, 프론트엔드 팀은 API를 통해서 사이트를 만들 수 있다. \n\n> 기술 선택\n> - 가장 익숙한 라이브러리인 리액트를 선택하고, 서버 컴포넌트를 다뤄보고 싶어서 Next.JS 의 앱 라우터를 선택\n\n> 목표 재정의\n> - 코드블럭, 수형도 등 다양한 콘텐츠를 보여줘야한다.(많은 라이브러리 사용으로 번들 사이즈 증가) \n> - GraphQL로 콘텐츠를 쿼리해 가져와야한다.\n>   - 쿼리 제한을 고려해 여러번 API를 호출해 조합해야한다\n>   - [BFF](https://namu.wiki/w/BFF#:~:text=047AN%2C%20063AN-,3.,-Backend%20For%20Frontend)를 만들어서 편하게 데이터를 받을 수는 없을까?\n\n\n> 해결 방법\n> - 클릭, 애니메이션 등 클라이언트에서 상호작용이 이뤄지는 컴포넌트와 로직을 분리한다.\n>   - 나머지는 서버에서 렌더링 작업을 수행한 뒤 클라이언트에 결과만 전송한다 (번들 사이즈 감소)\n> - DB 쿼리나 API 호출도 컴포넌트 안에서 결과만 클라이언트로 전송한다.\n>   - 작업이 오래 걸리는 컴포넌트는 Suspense 로 묵어 점진적으로 렌더링할 수 있게 Streaming 구현\n\n## 개발 과정에서 만난 문제들\n\n상대적으로 간단하게 풀렸지만 고민해볼 요소가 있는 문제 2가지.\n\n> 문제 정의 1\n> - Command + F 로 특정 검색했을 때, 해당 내용이 아코디언 안에 있다면 자동으로 아코디언이 펼쳐졌으면 좋겠다. \n\n상대적으로 최근에 추가된 HTML 스펙에서 방법을 찾을 수 있었다. (Chrome 102 부터 가능) \n이 스펙은 요소는 숨겨져 있지만 렌더링 상태는 유지될 수 있는 `content-visibility: hidden`스타일이 기본으로 적용되어 있다. \n\n```js\n<div ref={ref} hidden=\"until-found\">\n...\n</div>\n\nconst handleBeforeMatch = () => {\n    setIsOpen(true);\n}\nref.current.addEventListener(\"beforematch\", handleBeforeMatch)\n```\n\n검색에서 일치하는 항목이 영역 내에 있을 때 아코디언을 펼치는 핸들러를 선언해준다. 해당 DOM에 비포 매치이벤트에 대한 이벤트 리스너를 등록해준다. 하지만, jsx에서 `hidden`속성이 주입되지 않았다. 렌더링 단계를 나눠 문제를 탐색했다. \n\n** 렌더링 단계를 나눠 문제 탐색하기 **\n\njsx 에서 작성된 객체를 리액트에서 리액트 컴포넌트로 변환을 하고, 상태를 업데이트, 이펙트 같은 렌더링 대상을 연산한 뒤에 ReactDOM이 실제 DOM에 반영을 한다. 동시에 DOM API를 연동해서 클릭 같은 인터렉션을 사용할 수 있다. 정확한 설명은 아니지만, 대략적인 렌더링 흐름을 보자면 이렇게 볼 수 있다. \n\n\nhidden 속성을 바꾼 위치는 ReactDOM 이 부분을 확인해볼 수 있다.\n실제 ReactDOM 코드를 분석.\n\n![ReactDOM 코드](/images/post/youtube-ab180-2023_1.png)\n\n케이스를 확인해보면, function, symbol이 아니면 모두 빈 문자로 변환된다. 프로덕션에서 발생 가능한 보안 문제나 충돌을 최소화하기 위해서 리액트 속성값의 검증 로직이 들어가 있다. \n\n이 문제의 PR 이슈 사례를 첨부. 하지만, 1년 전에 남긴 이슈에 답변이 없음..😢\n코어 라이브러리가 접근성을 위한 기능을 제한한 것으로 우회하는 방향을 찾아내야했다.\n\nReactDOM을 건드릴 수 없다면, 렌더링에 관여하는 다른 요소를 속이기로 했다. DOM에 그려지는 단계 HTML에서 변경.\n\n- HTML은 기본적으로 대소문자를 구분하지 않는다. \n- ReactDOM은 정의된 소문자, /on[A-Z]/로 시작되는 속성만 검증한다.\n\njsx를 대문자로 표시를 하면, ReactDOM의 검증 로직에서 벗어날 수 있다.\n\n```js\n- <div ref={ref} hidden=\"until-found\">\n+ <div ref={ref} HIDDEN=\"until-found\">\n```\n\n변경하면 잘 동작하는 것을 예시 영상으로 보여줌. 크롬 인스펙터를 확인하면, hidden 속성이 잘 들어가 있음.\n\n> 문제 정의 1-1\n> - 아코디언을 접혔다 펼쳐지는 높이가 동적으로 변하는 애니메이션을 적용하고 싶다.\n\n애니메이션은 기본적으로 DOM의 영역이고, 애니메이션 실행 관련 제어를 위해서는 리액트에서 제어해야한다.\n`content-visibility: hidden` 스타일을 애니메이션 실행 중에 제거를 해야 애니메이션이 동작할 수 있다. \n\n\n```js\nconst [isAnimating, setIsAnimating] = useState(false);\n\nsetIsAnimating(true);\nanimate(ref.current, nextIsOpened ? variants.show : variants.hide, \n{\n    onComplete() {\n    setIsAnimating(false)\n    }\n})\n\nconst hiddenProp = isAnimating || isOpen ? undefined : 'until-found';\n\n<div ref={ref} HIDDEN={hiddenProp}>\n```\n\n애니메이션 실행 전/후로 상태를 변경한다. \n애니메이션이 샐행 중이거나 열려있을 때 Hidden 속성을 비우도록 처리해준다.\n\n\nCMS 예시를 담은 보일러 플레이트는 [SSG](https://velog.io/@lky5697/what-the-heck-is-ssg-static-site-generation-explained-with-nextjs) 로 생성된다.\n콘텐츠 변경이 자주 있지 않고, 초기 로딩 속도, SEO 관련 지표 향상 등이 주 목적이다.\n\n> 문제 정의 2\n> - PW 팀에서 전수 검사, 수정 후에 하나씩 새로운 CMS로 이사\n> - 시간에 따라 이전되는 가이드의 양이 늘어나 빌드 속도가 점점 느려져서 업데이트가 느렸다.\n> - 가이드 배포와 반영까지 걸리는 시간을 줄일 수 없을까? \n\n> 해결 방법\n> - 기존 CMS에서 업데이트가 일어나면, 웹 훅을 보내 새로운 빌드를 실행한다.\n> - 수정이 잦아지면, [ISR](https://nextjs.org/docs/pages/building-your-application/data-fetching/incremental-static-regeneration) 활성화해 변경 대상만 재생성한다 -> 빌드 횟수 감소\n\n\n> 문제 정의 2-1\n> - 동일한 사이드바를 노출하기 위해 사이드바를 업데이트 하는 방법을 고민 \n> - 가이드 숫자 * 지원언어 수만큼 재생성해서 요청 보내기 (1000개 * 국가별(한/영/일/중) 요청을 서버로 전송)\n> - 로그 분석 결과 (하루에 최소 3번 수정, 4일마다 최소 2개의 가이드 추가 등)\n\n> 해결 방법\n> - 느리지만 확실한 새로운 빌드 방법을 모색 -> 다른 관점으로 렌더링 바라보기\n\nNext.js 라우터가 페이지 라우터보다 느리다는 것을 반박하는 테오 브라운 유튜브 영상 첨부.\n앱 라우터가 3배 이상 빠르다는 결과를 수치상으로 보여줌. \n\n** 다른 관점으로 렌더링 바라보기 **\n\n동적인 것과 정적인 것을 나누는 기준을 네트워크 단위로 나눠보면 어떨까. 그렇다면, 태그와 그룹핑, 캐싱, 스트리밍으로 보여주고 공식문서에서는 스태틱 렌더링, 다이나믹 렌더링과 같은 용어를 더 많이 사용하고 있다.\n\n만드는 서비스는 정적인 페이지라도 동적인 요소가 있고, 그 반대도 있다. (스펙트럼 처럼)\n유저 가이드는 CMS에 작성된 콘텐츠를 네트워크 요청으로 가져오는 부분의 비중이 더 크다.\n정적인 부분과 동적 부분을 나누고 데이터 캐시를 더 적극적으로 활용하도록 바꾼다면, 초기 빌드 시간은 줄어들면서 업데이트가 빠르게 반영되는 환경을 만들 수 있지 않을까.\n\n```js\n- tags = [\n-    \"orders\",\n-    \"orders:ko\",\n-    \"orders:user-guid\",\n- ]\n- cache = \"force-cache\"\n\n+ tags = [\n+     \"guide\",\n+     \"guide:ko\",\n+     \"guide:${slug}\",\n+ ]\n+ revalidate = 2_592_000\n```\n\n```js\n// 사이드바에서의 요청은 매번 가져오게끔 요청 \nfetch(`${QUERY_URL}`, {\n    method: 'POST',\n    cache: 'no-store',\n})\n\n// 상대적으로 정적인 가이드 내용은 캐시를 길게 1개월로 설정\nfetch(`${QUERY_URL}`, {\n    method: 'POST',\n    next: {\n        revalidate: 2_592_000,\n        tags: [\n            \"guide\",\n            \"guide:ko\",\n            \"guide:${slug}\",\n        ]\n    }\n})\n```\n두 환경에서의 페이지 스피드 인사이트 결과는 왼쪽이 기존 SSG를 했을 때, 오른쪽이 데이터 캐시를 적용한 다이나믹 렌더링 결과는 94점, 98점으로 차이가 별로 없었지만, 빌드 속도가 8분 -> 1분 26초로 줄어듬\n\n> 문제 정의 2-2\n> - 캐시가 동작을 하려면, 모든 페이지에 한 번은 접속해야 캐시가 돌지 않나요?\n\n유저 가이드는 사이트맵이 있는 서비스이고, 웹 크롤러는 모든 페이지에 1회 이상 방문한다.\n이 방문으로 데이터 캐시가 자동으로 활성화 될 것이라고 생각함. \n별도의 크론잡을 안 만들고 서치 콘솔에 등록하고, Web Vitals 만 모니터링하는 정도만해도 괜찮을 거다.\n\n## 마무리\n\n1. 아코디언 문제를 통해 프레임워크/라이브러리 기능, 접근성 구현을 제한할 수 있음을 확인할 수 있었다. \n속성값을 검증하는 프레임워크나 라이브러리가 있으면 언제든 만날 수 있는 문제이다. \n    - 문제를 해결하려면 구현을 할 것인지? 한다면 어디까지 할 것인지를 판단해야한다. \n    - 문제에 관여하는 주체와 동작, 영향을 나누어 파악한다. \n\n2. 정적 페이지 생성이 느려지는 문제를 통해 단순한 것도 스케일이 커지면 복잡도 역시 늘어난다. \n    - 스케일에 따라 기존의 방법론이 여전히 유효한지 판단해야한다.\n    - 렌더링 관점을 페이지 단위 -> 네트워크 요청 단위로 바라보기\n\n3. 제품의 특성을 파악하고 영향을 주는 요인을 찾아 복잡도를 제어하면 해답에 가까워질 수 있을것이다. \n그 과정 속에서 각자 엔지니어로써 넓은 관점으로 갖고 다양한 경험을 해볼 수 있을 것이다.\n\n## 참고 \n\n- [서버 없이 웹 사이트 쉽게 만들기, LINE의 헤드리스 CMS](https://engineering.linecorp.com/ko/blog/headless-cms-in-line)\n- [카카오페이지는 BFF(Backend For Frontend)를 어떻게 적용했을까?](https://fe-developers.kakaoent.com/2022/220310-kakaopage-bff/)\n- [접혀진 아코디언은 검색할 수 없나요?](https://hiddenest.dev/accessible-accordion)\n- [Making collapsed content accessible with hidden=until-found](https://developer.chrome.com/articles/hidden-until-found)\n- [Next.js App Router SLOW?](https://www.youtube.com/watch?v=HbUDiNlU6Yw)"},{"slug":"youtube-flex-2021","title":"컨퍼런스 정리(1) - 왜 나는 React를 사랑하는가","date":"2023.11.09","coverImage":"images/cover/react-flex.png","category":"React","content":"\nYouTube URL: https://www.youtube.com/watch?v=dJAEWhR83Ug - FECONF 2021\n\n## 목차 \n\n- [클리어한 멘탈 모델, 작고 단단한 코어](#클리어한-멘탈-모델,-작고-단단한-코어)\n    - 한번 배우면 동일한 언어로 여러곳에 사용 \n- [꾸준히 성장하는 거대한 커뮤니티](#꾸준히-성장하는-거대한-커뮤니티)\n- [도전적인 과제, 우아한 해결책](#도전적인-과제,-우아한-해결책)\n    - Fiber, Hooks, Suspense 개념\n    - '와', 어떻게 이런 생각을 했지?\n\n## 스토리텔링\n\n리액트 팀이 문제를 어떻게 풀어내려 했다는 점도 그렇고 문제를 풀어내는 것을 보면 '와 멋지다'라는 생각이 들었다. \n\n발표의 시각은 React= 프로그래밍 언어?라는 생각이다. \n\n공식 문서에 리액트는 자바스립트 라이브러리이다. 리액트를 프로그래밍 언어로 바라보면 어떨까?\n\n큰 그림에서의 유사점을 찾기 위한 시도이고, 다음과 같이 정리해볼 수 있다.\n\n## 클리어한 멘탈 모델, 작고 단단한 코어\n\n1. React = 프로그래밍 언어?\n\n- 리액트와 프로그래밍 언어: 값\nUI 프로그래밍 언어에서의 역할, 화면에 그려지는 특정 UI 조각에 대응하는 무언가.\njsx 문법으로도 엘리먼트를 작성할 수 있고,\n리액트의 createElement API 를 사용할 수도 있다. \n\n\n- 리액트와 프로그래밍 언어: 함수\n\n특정 동작을 수행하는 부분을 별도로 나눠서 함수로 정의할 수 있다. 함수는 입력값을 받을 수도 있고, 동작을 수행하고 값을 반환한다. 그 과정에서 다른 함수를 부르기도 한다. \n리액트의 함수는 컴포넌트이다. props라는 입력을 받아서 리액트의 값인 엘리먼트를 반환한다. \n함수가 다른 함수를 호출하는 것처럼 리액트 역시 다른 컴포넌트를 호출한다. \n\n- 리액트와 프로그래밍 언어: 예외 처리 \n\n예외처리에 대한 대응할 수단이 필요하다. 특정 코드르 블럭에서 예외가 발생하려고 할 때, try문을 감싼 뒤에 catch 문에서 예외를 잡아 처리할 수 있다. 리액트는 함수 호출 중 렌더링 중에 발생한 오류를 처리하기 위한 에러 바운더리라는 API 를 제공한다. \n\n```js\n<Try catch={(e) => <Fallback error={e} />}><Widget /></Try>\n```\n\n- 리액트와 프로그래밍 언어: 타입 체크\n\n정적 타입을 제공하는 언어라면 특정 종류의 예외가 실제 사용자에게 영향을 미치기 전에 잡아줄 수 있는 수단을 제공\n리액트도 아주 원시적이지만 prop types라는 패키지로 함수 입력 즉, 컴포넌트의 props에 대한 타입체크까지 제공한다. \n\n\n2. 소스 코드, 엔진, 어셈블리 \n\n소스코드는 엔진을 통해서 해석및 실행되는 과정을 거친다. \n가장 유명한 Node.js, 크롬 등에 내장된 V8엔진이 있다. \n\ncpu가 해석할 수 있는 언어로 변환해서 기계에게 일을 시키게 된다. 이 기계가 이해할 수 있는 명령의 집합을 어셈블리어라고 부른다. 우리는 소스코드가 엔진이 해석할 수 있는 형태인지, 즉 올바른 문법으로 작성된 자바스크립트 코드인지만 신경을 쓰면 아키텍쳐와 무관하게 잘 동작하는 프로그램을 만들 수 있다. \n\n```js\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\n```\n\n리액트 돔과 리액트를 왜 나눌까?라는 궁금증이 있었는데 알고보니 되게 좋은 이유가 있었다. \n\n과거 리액트 코어팀 매니저 - Sophie Alpert 의 Building a Custom React Renderer(2019) 발표를 예시.\n\n리액트라는 모든 문법적 요소가 Renderer와 무관하게 다루는 내용을 다룸\n\n\nreconciler 라는 부분은 리액트 코드를 해석하고 실행하는 역할을 한다. 실행하고 해석하는 엔진의 역할을 맡았다고 볼 수 있다. 엔진이 소통하는 기계, 근본적으로 환경별로 공유할 수 없는 코드가 존재하는데 네이티브에서 html 을 그리기 위한 코드를 사용할 수 없듯이 리액트의 UI트리가 실제로 그려지는 고유한 환경이 프로그램이 실행되는 기계에 해당한다. \n\nUI가 그려지는 환경이 어디냐에 따라 호스트 환경이 리액트가 실행되는 CPU 또는 기계에 해당한다.\n호스트 환경 API가 리액트의 어셈블리가 된다. \n\n\nDOM API 호출이 될 수 있고, JSON 환경에서의 Array의 push프로토타입 메서드가 될 수도 있고, 그 외에도 환경에 따라 달라지는 임의의 방식으로 번역될 수 있다. \n\n커스텀 환경만 존재한다면, 임의의 리액트 앱을 그릴 수 있다. \n\n리액트가 자바스크립트의 문법을 취하고 있지만, 동시에 UI 프로그래밍 언어로 바라볼 수 있다는 게 어떤 의미인지 어느정도 전달, 더 많은 것은 생각해보는 것도 좋을 거 같다. \n\n\n3. 명확한 문제 및 목표 정의\n\n리액트가 웹 UI 라이브러리였다면? 웹에서 쓰일거니깐 코어 라우터나, renderDOM 을 react 라이브러리에서 임포트해서 사용할 수 있지 않았을까. 개인적으로 해석이 가능한 부분을 설명한다.\n\n> Virtual DOM은 너무 느려!\n\n다양한 라이브러리에서 비판하는 점 중에 하나가 DOM을 직접 조작하면 되는데 왜 별도의 UI트리를 관리해서 코드 베이스의 복잡도를 올리고 오버헤드를 감수하는가? 그렇기 때문에 너무 느린거 아닌가하는 비판이 있다. 웹 환경만을 생각하면 올바른 비판일 수 있다. 리액트의 맥락에서는 핀트가 벗어난 게 아닐까라고 개인적으로 생각한다. \n\n코어로직이 웹 환경과 직접적으로 붙지 않는거 자체가 리액트의 의도적인 결정이기 때문.\n\n> Just JavaScript\n\nhook이나 서스펜스같은 복잡한 개념이 잔뜩이지만, 자바스크립트로 작성한 소스코드는 다양한 환경에서 실행될 수도 있다. 그 환경은 브라우저가 아닐 수도 있고 Node.js 에서 돌아가는 서버환경이 아닐 수도 있다. 리액트는 자바스크립트가 쓰이는 모든 환경에서 UI를 만들기 위한 수단으로 쓰일 수 있다.\n\n언어로 발전시키지 않았던 이유가, 문제와 목표 정의 단계에서의 작은 차이가 지금까지 발전해온 방향에 영향을 미쳤을 것이라고 생각한다.\n\n\n## 꾸준히 성장하는 거대한 커뮤니티\n\n리액트를 사용하는 사람들, 리액트로 제품을 만드는 사람들, 리액트에 관련된 블로그 글과 유튜브 영상, 스택오버플로우 질문 답변 등등 점점 더 새로운 가치가 만들어지고 있다는 점이 있다. \n\n러스트 프로그래밍 언어 코어팀 - Steve Klabnik 의 문구를 인용.\n\n가치가 비용보다 큰 물건들 중에서도 전체 비용의 합이 예산을 초과하지 않는 범위 내에서 소비계획을 세우게 됩니다.\n\n기술 선택에도 마찬가지로 비용이든다. 리액트는 지금도 자바스크립트라는 언어의 다양한 제약을 라이브러리 단에서 워크어라운드하고 있는데 Elm, ReScript 는 상대적으로 그런 제약을 받고 있지 않다.\n\n아예 새로운 언어를 만들지 않고, 라이브러리의 형태를 취하는게 지금의 리액트의 성공에 큰 기여를 한 것이라고 생각한다.\n리액트가 언어였다면, \n- 부족한 리소스 텅빈 스택오버플로우\n- 적은 유저풀\n- 새로운 패키지 매니저\n----\n- jsx \n- 선언적 렌더링\n- 컴포넌트 기반 개발\n\n라는 문제들을 부딪쳤을테지만, 자바스크립트를 선택함으로 문법적 요소와 동작에서의 새로운 멘탈 모델에만 집중할 수 있었다. 아주 좋은 접근이었다고 생각한다.\n\n\n## 도전적인 과제, 우아한 해결책\n\nDan abramov가 리액트 코어팀에서의 시간을 회고하는 스레드에서 발췌 \n모든 문제를 어떻게 환원가능한지 찾는 행위가 중요성으로 이어지는 것 같다.\n\n새로운 문제 A가 생겼는데, 이미 답안지를 알고 있는 B라는 문제의 해결책을 A라는 문제에 가져다 쓸 수 있다. \n리액트에서의 환원의 사례는?\n\n> 컴포넌트가 트리 저 위쪽에 정의된 무언가의 값을 꺼내올 수단이 필요하다. -> 참조 시점에 둘러싼 환경을 기준으로 평가되는 변수니까 유사하니까, 프로그래밍 언어의 동적 스코핑과 비슷하다? Context\n\n> 자바스크립트 싱글 스레드 환경에서 느린 컴포넌트가 우선순위가 높은 업데이트를 막아 생기는 반응성 저해(사용자의 인풋에 대한 반응, 애니메이션 등)를 방지할 수단이 필요하다. -> 우선순위가 다른 작업들이 동시에 잘 실행되는 것처럼 보이게 만드는 일? 운영체제의 스케쥴링과 비슷하다? Fiber (비선점형 스케쥴링에서 가벼울 실행 스레드를 나타내는 용어)\n\n> 함수와 라이프사이클을 클래스 컴포넌트만 사용하지 말고, 함수 컴포넌트의 제약을 제거하고 상태 로직의 응집성,재사용성을 개선하고 싶다. -> 특정 효과(상태라든지 라이프사이클 이펙트)를 처리하는 방식을 리액트에게 위임할 수단을 찾는다. 대수적 효과랑 비슷하다? Hooks\n\n비동기로 불러와야하는 리소스를 선적으로 정의하고 싶다. -> 특정 효과(비동기 호출)처리를 리액트에게 위임할 수단을 찾는다. 대수적 효과랑 비슷하다? Suspense\n\n리액트의 행보는 이런 문제를 이렇게 풀 수 있다는 점이 모두 환원들을 찾아서 해결할 수 있었다. \n\n이런 자각들이 알게 모르게 문제를 해결할 수 있게 된다.\n\n플렉스팀에서의 환원 예시.\n\n리모트 레이어 개편 작업, axios 호출 등이 다양한 형태로 동일한 역할을 하는 코드가 작성되고 있는 문제가 있었다. \n리모트 레이어는 (서버 API 모델 정의, 엔드포인트 호출, 데이터 관리 등) 영역 전반을 의미한다. \n\n리모트 데이터를 가져오는 과정에서 필요한 재검증, 로딩상태 처리, 에러 처리 등의 다양한 부분을 자동화해주는 SWR 라이브러리를 사용하고 있었다. 서로 달라야하는 키나 같아야하는 키가 다른 키를 사용하게 되면 크고 작은 문제의 원인이 된다. 그 전에는 리모트 키를 관리하고 유니크하게 관리하는 책임이 개발자에게 맡겨진 영역이었다. \n\n리모트 데이터를 가져오는 방법에 대한 수많은 패턴의 코드를 개선하고 싶어졌다. \n\n> 문제 정의 \n> - 사용처 별로 제각각이다. \n> - 리모트 리소스 정의 방식\n> - SWR 생성 방식\n\n> 목표?\n> - 리모트 레이어 사용\n> - 컨벤션 마련! -> 문제가 발생하는 이유가 근본적인 원인이 아니라 현상이 아닐까? \n\n> 문제 재정의 \n> - 근본적인 원인은 꼭 그래야할 이유가 없음에도 불구하고 작업을 각 개발자가 수동으로 반복하고 있다. \n\n> 목표 재정의\n> - 반복 작업과 실수 여지를 최소화할 수 있는 자동화를 만들자! \n\n> 해결 방법\n> - 개발하는 방식을 바꾸면, 각자 조직에서의 우선순위 바쁜 일정이 있는 입장에서 부담스러워 도입이 늦어질 수 있다. \n> - 할부로 구매할 수 있는 수단을 제공하자\n>    - 리모트 리소스 정의 방식 일원화 (마일스톤 1)\n>    - 리모트 리소스 -> 리모트 훅\n>    - 스펙 -> 리모트 리소스 서버호출 함수 생성까지 자동화 (마일스톤 2)\n> - 답안지 훔쳐보기\n>   - useRequest, graphql-code-generator, openapi-generator, FEConf 발표를 참고로 삽질없이\n>       빠르게 작업할 수 있었다. \n\n"},{"slug":"git-commit","title":"Git Commit 메시지 작성법","date":"2023.09.13","coverImage":"images/cover/default.png","category":"Tip","content":"\n\n## Commit Message Type\n\n- feat : 새로운 기능 추가\n- fix : 버그 수정\n- docs : 문서 수정\n- style : 코드 formatting, 세미콜론(;)누락, 코드 변경이 없는 경우\n- refactor : 코드 리팩터링\n- test : 테스트 코드, 리팩터링 테스트 코드 추가(프로덕션 코드 변경 X)\n- build : 빌드 관련 파일 수정에 대한 커밋\n- chore : 빌드 업무 수정, 패키지 매니저 수정(프로덕션 코드 변경 X)\n- ci : CI 관련 설정 수정에 대한 커밋\n- design : CSS 등 사용자 UI 디자인 변경\n- comment : 필요한 주석 추가 및 변경\n- rename : 파일 혹은 폴더명을 수정하거나 옮기는 작업만인 경우\n- remove : 파일을 삭제하는 작업만 수행한 경우\n- !BREAKING CHANGE : 커다란 API 변경의 경우 ⚡️\n- !HOTFIX : 급하게 치명적인 버그를 고쳐야 하는 경우\n\n\n## Popular Emoji\n- ✨ : 새로운 기능 추가\n- 🚑 : 버그 수정\n- 📚 : 문서 수정\n- 🔨 : 코드 리팩토링\n- 📝 : 파일 수정\n- 🔥 : 파일 삭제\n\n\n"},{"slug":"testing-vanilla","title":"Vanilla JS Jest 적용해보기","date":"2023.09.06","coverImage":"images/cover/default.png","category":"JavaScript","content":"\n## 시작하기\n\njest 를 설치하는 방법은 이 [블로그](https://buddy.works/tutorials/testing-with-jest-basic-to%C2%AD-do-application)를 참고해서 정리했습니다.\n\n## 환경 설정\n1. jest를 설치합니다. \n\n```js\nyarn add -D jest\n```\n\n2. jest 파일을 컴파일 하기 위해 바벨을 설치합니다. \n\n```js\nyarn add -D babel-jest @babel/core @babel/preset-env\n```\n\n3. `babel.config.js` 파일을 설정합니다.\n\n```js\n// babel.config.js\n\nmodule.export = {\n    presets: [[\"@babel/preset-env\"]]\n}\n```\n\n4. `package.json` 파일에 jest 를 테스트할 수 있게 설정합니다. \n\n```js\n// package.json\n\n\"scripts\": {\n    \"test: \"jest\"\n}\n```\n\n5. 실행하세요.\n\n`.test.js` 파일을 만들거나 혹은 `__tests__`폴더 아래에 파일을 만들어두고 명령어를 실행한다.\n\n```js\nyarn test\n```\n\n\n### 간단한 테스트 "},{"slug":"css-variable","title":"CSS 변수","date":"2023.09.02","coverImage":"images/cover/default.png","category":"HTML_CSS","content":"\n## CSS\nCSS란 Cascading Style Sheets의 약자입니다.\n\nCSS는 HTML 요소들이 각종 미디어에서 어떻게 보이는가를 정의하는 데 사용되는 스타일 시트 언어입니다.\n\n여러개의 스타일 적용되어 있으면, 적용되는 순서는 아래와 같이, 인라인 스타일이 먼저 적용됩니다.\n\n1. 인라인 스타일 \n\n    ex) `<p style=\"color:green; text-decoration:underline\"></p>`\n\n2. 내부/외부 스타일 시트\n\n    ex) `<style></style> , <link rel=\"stylesheet\" href=\"style.css\" />`\n\n3. 웹 브라우저 기본 스타일\n\n    별도 스타일을 지정하지 않으면 브라우저(크롬, 사파링, 엣지 등)마다 갖고 있는 기본 스타일이 적용됩니다. 스타일 기본 값을 무시하는 방법은 2가지가 있습니다. \n\n    |[reset.css](https://gist.github.com/DavidWells/18e73022e723037a50d6)|[normalize.css](https://necolas.github.io/normalize.css/)|\n    |--|--|\n    |브라우저가 지정한 모든 속성을 지운다|모든 브라우저에서 표준 스타일을 보여준다|\n    |당연하다 싶은 스타일마저 다시 설정해야한다|스타일을 바닥부터 재정의하지 않고 표준 스타일만 보여준다|\n    |파일 크기가 작다|reset.css에 비해 파일이 크다|\n\n## CSS 변수 \n\nCSS 표기법을 사용해 정의하고 var() 함수를 사용해서 접근할 수 있습니다. \n필요한 곳에서 참조하여 사용함으로 반복되는 CSS를 줄일 수 있습니다. \n\n참고: [사용자 지정 CSS 속성 사용](https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_custom_properties)\n\n\n```js\n// css\n:root {\n  --main-bg-color: brown;\n}\n\n.one {\n  color: white;\n  background-color: var(--main-bg-color);\n  margin: 10px;\n  width: 50px;\n  height: 50px;\n  display: inline-block;\n}\n\n// 상속 구문은 쉼표를 사용한다\n.two {\n  color: var(--my-var, red); /* --my-var가 정의되지 않았을 경우 red로 표시됨 */\n}\n```\n\n\n```js\n// 인라인 스타일에서 변수 얻기\nelement.style.getPropertyValue(\"--my-var\");\n```\n\n## Styled-Component 응용\n\n- 상수화 설정\n```js\n\n// constants.js\nexport const COLORS = {\n  text: 'black';\n  background: 'white',\n}\n\n// jsx\nimport {COLORS} from \"../constants\";\n\nconst Buttons = styled.button`background: ${COLORS.background}`\n```\n\n- theme 설정 \n\n```js\n\n// jsx\n\nimport { ThemeProvider } from \"styled-components\";\nimport {COLORS} from \"../constants\";\n\nconst App = ({children}) => {\n  return (<ThemeProvider theme={{color: COLORS}}>\n            {children}\n          </ThemeProvider>)\n}\nconst Buttons = styled.button`background: ${(props) => props.theme.background}`\n```\n\n- css variable 설정\n\n```js\n// GlobalStyles.js\nimport { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`html {\n  --bg-element: white;\n}`;\n\n\n// jsx\nconst App = ({children}) => {\n  return (\n    <>\n      <GlobalStyles />\n      {children}\n    </>\n  )\n}\n\nconst Buttons = styled.button`background: ${(props) => var(--bg-element)}`\n```\n\n## 참고\n- [CSS Variables for React Devs](https://www.joshwcomeau.com/css/css-variables-for-react-devs/)"},{"slug":"css-position","title":"CSS Position absolute vs fixed","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS","content":"\n## CSS Position absolute vs fixed \n\nabsolute 부모의 시작점을 기준으로 보여준다. \nfixed 는 부모의 속성에 상관없이 화면에서 절대적인 위치로 보여준다. \n\n\n\n"},{"slug":"css-safari","title":"사파리 브라우저에서의 스크롤바 동작 없애기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"HTML_CSS","content":"\n\n## 사파리 브라우저에서 스크롤바 동작 없애기 \n\n\n모달 팝업 뒤에 스크롤 동작을 고정하기 위해 overflow-y: hidden 을 추가했다. 이렇게 하면, 크롬 브라우저에서는 스크롤이 보이지 않으면서 스크롤 기능도 동작하지 않는다.\n\n그런데 사파리 브라우저에서는 스크롤만 안 보일 뿐 기능이 동작하고 있었다.😨\n\n비슷한 문제를 해결한 사례를 [스택오버플로우](https://stackoverflow.com/questions/3047337/does-overflowhidden-applied-to-body-work-on-iphone-safari) 에서 찾았다. \nbody { overflow: 'hidden'} 으로 x, y 축 구분없이 2개를 모두 처리하면 스크롤이 동작하지 않는다. \n\n\n\n"},{"slug":"react-style-component","title":"React 스타일 컴포넌트 다루기","date":"2023.09.01","coverImage":"images/cover/default.png","category":"React","content":"\n\n## 스타일 컴포넌트에서 props 조건문 추가하기 \n\n\n[공식문서](https://styled-components.com/docs/api)에 찾아보면, 조건문에 따라 스타일 조정이 필요할 때, classList 를 추가하지 않고 스타일 컴포넌트에 props 를 주입해서 사용할 수 있다. \n\n```js\n\n// tsx\n<Button $backgroundColor={'yellow'}/>\n\nconst Button = styled.button<{ $backgroundColor: string }>`\n  background-color: ${(props) => props.$backgroundColor};\n`;\n```\n\n`$`로 표시해서 스타일 전달하고, 타입을 지정해주면 된다. 이 방법이 클래스 목록을 조작하는 것보다 가독성도 있다고 생각된다.\n"},{"slug":"web-lighthouse","title":"Next.js 성능 측정","date":"2023.08.28","coverImage":"images/cover/default.png","category":"React","content":"\n웹 성능을 따질 정도로 규모가 큰 프로젝트를 해오지 않았기에 사실상 성능을 높이기 위한 방안을 생각해본 적이 없었던 거 같습니다. 그러던 중에 [프론트엔드 성능 측정](https://youtu.be/IRj9vKBy9CA)에 대한 유튜브를 보게 되었습니다. 그리고 웹 브라우저의 성능 체크는 해보지 않으면 영영 모르는거겠구나라는 걸 어렴풋이 느꼈습니다. 그리고 이 참에 제 블로그에서만이라도 시작을 해보자라는 마음으로 라이트하우스 테스트를 해봤습니다.\n\n## 고민과 해결\n\n![성능측정(1)](/images/post/web_lighthouse_1.png)\n\n결과는 처참했다고 볼 수 있겠네요. Next.js 를 사용했으니, 성능에서 이슈가 될만한 것이 없을 것이라 생각되었습니다. html로 만들어서 서버 렌더링을 해주는데 느려질 일이 없을거라 생각했죠. \n하지만, 너무 쉽게 생각했었나봅니다. 아래로 읽다보면, 어디서 문제가 있는지 짚어줍니다.\n\n1. 이미지 압축\n2. 웹 폰트 사용\n\n위 2가지의 문제가 해결해야할 과제였습니다. \n\n헤더에 사용하는 이미지는 사실상 압축을 하면 60x60 사이즈라 충분히 압축을 하면 크기를 줄일 수 있을 거 같았습니다. 구글에서 만든 [Squoosh](https://squoosh.app) 웹에서 거의 원본 손상없이 압축할 수 있는 기술로 압축 가능하다고 하니, 이 사이트를 이용했습니다. \n\n웹 폰트를 사용하기 위해서 ttf 파일을 내려받아 fonts/ 폴더에서 호출할 수 있도록 했었습니다. 상대주소를 갖고 오게되니, 빠를 거라 예상했었는데 오히려 많이 느렸습니다. \n\n결국 cdn 에서 가져오는 방법이 가장 빠른 방법이었습니다. cdn 주소에서 호출하려면, 도메인 주소가 달라지니, CORS 오류를 해결해야하는데 Next.js에서는 [Rewrite](https://nextjs.org/docs/pages/api-reference/next-config-js/rewrites)로 Proxy를 대체하고 있습니다. \n\n구글에서 제공하는 [google font cdn](https://fonts.google.com/specimen/Nanum+Gothic?query=nanum)을 이용해 호출할 수 있도록 처리했습니다. 이 방법은 Rewrite 를 사용하지 않아도 스크립트에서 cors 오류가 발생하지 않습니다. \n\n![폰트](/images/post/web_lighthouse_2.png)\n\nNext.js 에서 스타일시트를 지정하려면, [Document](https://nextjs.org/docs/messages/no-stylesheets-in-head-component)에 스타일시트를 추가하게 되어있습니다. \n\n이 페이지에 link 주소를 넣어주고, [crossOrigin](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) 속성을 부여해줍니다.\n\n```js\nimport Head from 'next/head';\nreturn (\n    <>\n        <Head>\n            <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n            <link\n            rel=\"preconnect\"\n            href=\"https://fonts.gstatic.com\"\n            crossOrigin=\"anonymous\"\n            />\n            <link\n            href=\"https://fonts.googleapis.com/css2?family=Nanum+Gothic&display=swap\"\n            rel=\"stylesheet\"\n            ></link>\n        </Head>\n        <Component {...pageProps} />\n    </>\n)\n```\n\n## 회고\n\n점수가 많이 개선되었습니다.\n\n|LCP| FID | CLS|\n|--|--|--|\n|서버 응답 시간 개선| 사용하지 않는 자바스크립트 분할| 이미지 크기 설정|\n|리소스 요청 최적화| 자바스크립트 실행 시간 단축| 광고를 위한 고정 공간 확보, 웹 폰트 대응|\n\n위와 같은 방법으로 성능 지표를 해결할 수 있다고 유튜브에서도 봤지만, 이미지 압축과 cdn 서버를 이용하는 것이 얼마나 중요한 일이었는지 새삼 알게 되었습니다. 웹 성능을 점수로 확인하고나니, 더 개선하고 싶은 마음도 생기고 가이드로 보여주는 항목들이 앞으로 개발할 때는 성능을 고려하면서 개발을 해야겠다는 생각이 듭니다.\n\n![성능측정(2)](/images/post/web_lighthouse_3.png)"},{"slug":"next-portal","title":"Next.js Portal 만들기","date":"2023-08-29","coverImage":"/images/cover/default.png","category":"React","content":"\n## 포탈은 왜 사용할까?\n\n리액트에서 말하는 포탈은 부모 컴포넌트의 DOM 계층 바깥에 있는 DOM 노드로 자식을 렌더링하는 방법입니다.\n\n리액트는 컴포넌트를 만들 때, 트리 구조로 생각해서 만드는데 부모-자식 관계로 된 구조로 만들게 됩니다. \n이 상황에서 모달창과 같은 항상 젤 위에 떠 있어야만 하는 컴포넌트의 경우에 유용하게 사용될 수 있습니다. \n가장 젤 위에 떠 있게 하려면, z-index 값을 엄청 크게 써서 덮어씌워거나 스타일을 변경해주면 가능은 하지만, 예상치 못한 스타일 오류로 부터 편하게 처리할 수 있게 할 수 있는 방법입니다. \n\n## 고민과 해결\n\nNext.js 에서도 리액트와 같이 포탈 기능을 사용할 수 있었습니다만, 예상치 못한 버그는 여기서도 만나게 되었습니다. \n\n> Error: Hydration failed because the initial UI does not match what was rendered on the server.\n\nHydrate는 렌더링된 정적 페이지와 번들 파일을 클라이언트에 보낸 후, HTML DOM 위에 다시 렌더링 되면서 매칭되는 과정입니다. 정적 페이지의 dom 들을 리액트 코드에서 찾을 수 있는 과정이라고 생각하면 될거 같습니다. 그러면, 위와 같은 오류가 발생한 원인은 Next.js에서 생성한 pre-rendering 과 브라우저에서 처음 렌더링되는 리액트 트리가 달랐다고 볼 수 있습니다. \n\n[공식문서](https://nextjs.org/docs/messages/react-hydration-error)에서의 해결법은 useEffect 에서 초기 클라이언트 렌더링과 동일한 콘텐츠를 렌더링을 하는지 체크하는 방법으로 사용하는 것입니다. 아래와 같이 체크를 하게 되면, 불일치 되는 경우를 처리할 수 있습니다. \n\n\n```js\n// _app.tsx\n<Component {...pageProps} />\n<div id=\"modal\"></div>\n\n\n// ModalPortal.tsx\n\ninterface ModalPortalProps {\n  children: ReactNode;\n}\n\nconst ModalPortal = ({ children }: ModalPortalProps) => {\n  const [element, setElement] = useState<HTMLElement | null>(null);\n\n  useEffect(() => {\n    setElement(document.getElementById('modal'));\n  }, []);\n\n  if (!element) {\n    return <></>;\n  }\n\n  return createPortal(children, element);\n};\n```\n\n아래와 같이 사용처에서 만든 포탈을 호출해서 자식 컴포넌트를 넘겨주게 되면, `<div id=\"modal\"></div>`에 자식 컴포넌트가 생성됩니다. \n\n```js\n// index.tsx\nreturn (<ModalPortal>\n  <SideMenu isOpen={modalOpen} onClose={handleModal} />\n</ModalPortal>);\n```\n\n## 결과 \n이렇게 되면, 어느 위치에서든 모달의 컨텐츠만 변경된 모달 팝업 화면을 띄울 수 있습니다.\n\n\n![포탈 화면](/images/post/next-portal.png)\n"},{"slug":"css-semantic","title":"시맨틱 태그 (Semantic Tag)","date":"2023-08-24","coverImage":"/images/cover/default.png","category":"HTML_CSS","content":"\n\n시맨틱 태그, 나온지 꽤 오래된 용어지만 \"의미를 부여한 태그\"라는 것 이외에는 제대로 사용해보지 못한 거 같아 이번 기회에 제대로 정리를 해볼까 합니다. \n\n## 시맨틱 태그는 왜 사용할까?\n\n시맨틱 태그는 웹 문서 내에서 의미를 부여하는 HTML 태그를 말합니다. 콘텐츠를 의미적으로 표현할 수 있어 웹 개발자들이 쉽게 의미를 파악할 수 있게 되었습니다. div, span과 같은 비의미적인 요소로 코드를 작성하던 시절을 떠올려보면, 조금만 중첩된 태그에서도 스타일 수정하는데 5분이면 될 것을 2-30분을 찾아야할 때도 있었던 거 같습니다. 그런면에서 이 의미 부여는 웹 접근성을 향상시키고, 게다가 검색 엔진이 사이트를 크롤링하는데도 도움이 됩니다. \n\n## 시맨틱 태그의 예시 \n\n![html5_w3schools](https://www.w3schools.com/html/img_sem_elements.gif)\n\n먼저 가장 쉽게 찾을 수 있는 w3schools 의 이미지입니다. 너무 심플하게 정리되어 이대로만 작성하는 건 어렵지 않을 거 같습니다.\n\n1. `<header>` : 웹 페이지나 섹션의 머리말을 나타냅니다. 주로 사이트 로고, 제목, 탐색 메뉴 등을 포함합니다.\n\n2. `<nav>`: 탐색 링크를 그룹화하여 사이트 내에서의 탐색을 나타냅니다.\n\n3. `<main>`: 문서의 주요 콘텐츠를 정의합니다. 한 문서 내에 하나의 main 요소만 사용하는 것이 좋습니다.\n보통은 article 을 묶어주는 용도로 사용합니다.\n![semrush](https://static.semrush.com/blog/uploads/media/cc/85/cc85d452a743e27f68d426df35e4da7d/EN-Semantic-Search-Non-Semantic.webp)\n\n4. `<article>`: 독립적인 콘텐츠 조각을 나타냅니다. 뉴스 기사, 블로그 포스트, 포럼 글 등이 이에 해당합니다.\n\n5. `<section>`: 문서의 구획을 나타내며, 주제에 관련된 콘텐츠 그룹을 정의합니다.\n\n6. `<aside>`: 주 콘텐츠와 관련성이 낮은 사이드 콘텐츠를 나타냅니다. 주로 사이드바나 광고 등을 배치할 때 사용됩니다.\n\n7. `<footer>`: 웹 페이지나 섹션의 푸터(마지막 부분)를 나타냅니다. 연락처 정보, 저작권 정보 등이 여기에 포함될 수 있습니다.\n\n8. `<figure>`과 `<figcaption>`: 이미지나 도표와 그림 설명을 그룹화하여 나타냅니다. figure는 미디어 자체를, figcaption은 설명을 포함합니다.\n\n9. `<details>`과 `<summary>`: 세부 정보를 접을 수 있는 위젯을 생성합니다. 사용자가 summary를 클릭하면 details 내용이 펼쳐집니다.\n\n\n\n## 과연 이것만 알아도 될까?\n\n[HTML 요소 참고서](https://developer.mozilla.org/ko/docs/Web/HTML/Element)를 찾아보면, 다양한 요소에 관련된 세부사항들이 있습니다. 시멘틱은 문서 콘텐츠를 나누기 위한 레이아웃에 의미를 부여한 것이고, 실제로는 HTML 요소들의 의미대로 사용해야한다고 생각합니다. 양식이나 텍스트 관련된 form, ul, ol 태그 등 자주 사용하는 태그들은 사용하다보면 외워지겠지만 한번쯤은 의미를 짚어보고 사용하려는 노력이 필요하다고 생각합니다.\n"},{"slug":"blog-next","title":"Next.js로 마크다운 블로그 만들기","date":"2023-08-22","coverImage":"/images/cover/blog_next.png","category":"ToyProject","content":"\n## github 블로그를 또 바꾸는 이유\n\n이전 블로그까지는 hexo 디자인을 적용해서 이쁘게 구성했었습니다. 하지만, Jeklly을 사용한 블로그는 레이아웃을 수정하거나 새 기능을 추가하는 건 가이드 문서를 참고하지 않으면 안되었구요. 내가 아는 언어로 마크다운 문서만 파싱할 수 있으면 새 기능도 넣고, 디자인도 커스텀하게 만들 수 있을텐데..😞 그러던 중 작년 글이지만, [마크다운 블로그 만드는 법](https://velog.io/@ctdlog/Next.js%EB%A1%9C-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0)이라는 글을 읽게 되었습니다. 같은 고민으로 시작된 그 글은 마크다운 파싱하는 방법을  간단하게 알려줬고, Next.js를 사용했던 내 경험과 이번엔 내가 만들고 싶은 블로그를 만들 수 있을 거 같다는 큰 기대감을 안고 개발을 시작하게 되었습니다.\n\n## 환경 설정과 프로젝트 구조\n\n1. next.js를 설치\n2. styled-components 사용\n\n프로젝트 구조는 [공식문서](https://github.com/vercel/next.js/tree/canary/examples/blog-starter)의 구조를 그대로 착안해서 만들게 되었습니다. 이전 블로그도 _posts 폴더에 마크다운을 넣어두기도 했었구요. _posts, pages, lib 폴더를 만들어서 마크다운 문서를 파싱할 유틸리티를 모아두었습니다.\n\n\n## 주요 기능 \n\n- _post 폴더 내 파일 문서를 읽어와서 파싱 후에 보여준다.\n- 모바일에서도 지원하는 블로그를 만든다. \n```js\n// lib/api.ts\ngetPostSlugs() {\n    // fs 모듈을 이용해 _posts 안에 있는 파일들을 가져온다.\n    return fs.readdirSync(postsDirectory);\n}\n\ngetPostBySlug() {\n    // gray-matter 라이브러리를 사용해서 마크다운 파일의 front-matter를 파싱해준다. \n}\n```\n\n```js\n// pages/_app.tsx\ngetStaticProps() {\n    posts = getAllPosts(['slug']);\n    return {\n        props: {\n        posts,\n        },\n    };\n}\n\n// pages/[slug].tsx\nexport async function getStaticPaths(){\n  const posts = getAllPosts(['slug']);\n\n  return {\n    paths: posts.map((post) => {\n      return {\n        params: {\n          slug: post.slug,\n          category: post.category,\n        },\n      };\n    }),\n    fallback: false,\n  }; \n}\n\nexport async function getStaticProps({ params,\n}: {\n  params: {\n    slug: string;\n    category: string;\n  };\n}) {\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      posts,\n    },\n  };\n}\n```\n\n## 고민과 해결\n- 카테고리별로 라우팅할 수 있게 만들고 싶었습니다. ex) /React/react-redux\n포스트는 기본적으로 [slug].tsx 페이지에서 본문 내용을 파싱해서 보여주고 있습니다. Next.js는 pages 에서 파일을 만들면 자동으로 라우팅 페이지가 만들어집니다. 그렇다면, 앞에 예제대로라면, 카테고리별로 폴더를 만들면 되는 것이 아닐까?🤔 그리고 간단하게 폴더를 구분하는 방법으로 해결했습니다. \n\n![라우팅](/images/post/blog_next_3.png \"20%\")\n\n- 하지만, 위에 방법처럼 하는건 상당히 중복 작업이라 공통 레이아웃 페이지를 만들 필요가 생겼습니다.\n상세 페이지와 메인 페이지 레이아웃을 시멘틱 태그로 작업했습니다.\n\n```js\n// PostLayout.tsx\n\ninterface PostLayoutProps {\n  children: ReactNode;\n  posts: PostType[];\n  category: PostCategory;\n}\nconst PostLayout = ({ posts, category, children }: PostLayoutProps) => {\n  return (\n    <Container>\n      <Header />\n      <Aside>\n        <PostSideBar posts={posts} category={category} />\n      </Aside>\n      <div>ttt</div>\n      <Main>{children}</Main>\n    </Container>\n  );\n};\n```\n\n## 사용자 경험 개선\n\n![데모1](/images/post/blog_next_1.png)\n- 카테고리 별로 다른 레이아웃으로 본문을 보여줍니다. (첫번째 시도)\n\n![데모6](/images/post/blog_next_6.png)\n- 목록에 카테고리를 보여주고, 첫화면에 리스트를 보여줍니다. (두번째 시도) \n\n\n## 배포\n\n배포 자동화하는 .github/workflows에 yml 파일을 추가하여 워크플로우를 등록해줍니다.\n\n개발은 develop 브랜치에서 할꺼니까, build 후에 gh-pages 브랜치에 배포 파일이 업데이트 될 수 있게 스크립트를 수정해줬습니다. 그리고 최종적으로 github 사이트에서 호스팅할 브랜치를 변경해줍니다.\n\ngithub Project > Settings > Pages > Branch 를 변경!\n\n[Next.js 블로그 Github Pages에 자동 배포하기](https://bepyan.github.io/blog/nextjs-blog/4-deploy) 글을 참고했습니다.\n\n## 회고\n\nnext.js 에서 기본 사용하는 메서드를 구별 못하고 있는 것을 알았다. 지금의 완성품은 겨우 따라 작성하는 수준밖에 안되고, 수정은 가능하지만 딱 그 수준이다. 모바일을 지원하는 사이트를 만들어 본 경험이 부족했다. 미디어 쿼리를 사용해서 모바일 사이즈를 지원한다는 건 사용자 경험을 상당부분 반영해야한다는 것도 알았다. 지금은 개선해야할 것이 아직 많지만, 블로그는 조금씩 개선할 생각이다.\n\n## 개선 사항\n\n1. 모바일 사이즈일 땐, 메뉴 아이콘을 보여주고 클릭 시에만 메뉴 목록을 띄워준다. (2023.08.29)\n2. 프로필에 경력기간 차트를 캔버스로 개발해서 모바일에서도 보이도록 변경\n3. 키워드 검색기능 추가 (2023.08.24)\n\n![데모4](/images/post/blog_next_4.png \"50%\")\n\n4. 코드블럭 색상과 이미지 사이즈 추가할 수 있도록 마크다운 수정 (2023.08.23)\n\n![데모5](/images/post/blog_next_5.png)\n\n5. 상단 헤더에 블러효과 (2023.08.29)\n\n![데모7](/images/post/blog_next_7.png)"},{"slug":"css-unit","title":"CSS 단위","date":"2023-08-21","coverImage":null,"category":"HTML_CSS","content":"\n## CSS 단위\nCSS 사용되는 단위는 상대값(em,rem)과 절대값(px) 2가지가 있다. \n\n|단위|관련사항|\n|---|------|\n|em |요소의 글꼴 크기|\n|rem|루트 요소의 글꼴 크기|\n|vw| 뷰포트의 초기 컨테이너 너비 1%와 같음|\n|vh| 뷰포트의 초기 컨테이너 높이 1%와 같음|\n\n\n\n## rem (root em)\n\nem은 현재의 font-size를 말한다. \nbody에 em 사이즈를 지정하면 모든 자식 요소들은 body의 폰트 사이즈에 영향을 받는다.\n\n```\n// CSS\nbody {\n    font-size: 14px;\n}\ndiv {\n    font-size: 1.2em; // 14px * 1.2 => 16.8px\n}\n\n// HTML\n<div>\n    16.8px\n    <div>\n        16.8px * 1.2 = 20.16px\n        <div>20.16px * 1.2 = 25.192px </div>\n    </div>\n</div>\n```\n\nem을 중첩으로 사용하면, 각 부모의 폰트 사이즈를 상속받아 크기가 점점 커지게 된다. \n대부분의 경우는 단순하게 단일 사이즈로 표현할 때, 사용하고 이런 경우엔 rem 단위를 사용하면 된다. \n\nr은 root(최상위)를 뜻한다. \n\n```\n// CSS\nhtml {\n    font-size: 14px;\n}\ndiv {\n    font-size: 1.2rem; // 14px * 1.2 => 16.8px\n}\n\n// HTML\n<div>\n    16.8px\n    <div>\n        16.8px\n        <div>16.8px</div>\n    </div>\n</div>\n```\n\n이렇게 중첩문에서는 rem을 사용이 균일하게 크기 조정을 할 수 있는 방법이다.\n\n\n\n\n\n\n"},{"slug":"hello-world","title":"Hello","date":"2023-08-16","content":"\n### Hello World"},{"slug":"shortcut-mac","title":"Mac을 편하게 사용하는 방법 7가지","date":"2022-04-06 23:00:14","coverImage":"/images/cover/shortcut-mac.png","category":"Tip","content":"\n#### Mac 단축키\n\n- `option + cmd + esc` : 응용 프로그램 강제 종료\n- `option + cmd + i` : 크롬 개발자 도구\n- `cmd + space` : 스포트라이트 검색 - (활성 상태 보기)\n- `cmd + w` : 크롬 텝 닫기\n- `cmd + y` : 크롬 브라우저 방문기록 보기\n- `cmd + shift + 4` : 영역지정 캡쳐\n\n<!-- more -->\n\n#### 1. 화면 잠금 (⌘ + L)\n시스템 환경설정 - 키보드 - 단축키 - 앱 단축키 - 화면 잠금(command+L)으로 추가하기 \n\n![화면잠금](/images/post/keyboard.png)\n\n#### 2. 브라우저에서 탭으로 키워드 검색하기\n시스템 환경설정 - 트랙패드 - 포인트 및 클릭 - 찾아보기 및 데이터 탐색기(세 손가락으로 탭하기)\n\n![세 손가락으로 탭하기](/images/post/trackpad.png)\n\n#### 3. 우클릭처럼 사용하기\n시스템 환경설정 - 트랙패드 - 포인트 및 클릭 - 보조 클릭(두 손가락으로 클릭 또는 탭하기)\n\n![두 손가락으로 클릭 또는 탭하기](/images/post/right-click.png)\n\n\n#### 4. 브라우저에서 페이지 이동하기 \n시스템 환경설정 - 트랙패드 - 추가 제스처 - 페이지 쓸어넘기기(두 손가락으로 좌우로 스크롤하기)\n\n#### 5. 스크롤방향 바꾸기 (원도우처럼 사용하기)\n시스템 환경설정 - 트랙패드 - 스크롤 및 확대/축소 - 스크롤 방향: 자연스럽게 (해제)\n\n![스크롤 방향](/images/post/scroll.png)\n\n\n#### 6. 드래그하기\n> 트랙패드에서 세 손가락으로 드래그하기 기능\n\n시스템 환경설정 - 손쉬운 사용 - 포인터 제어기 - 마우스와 트랙패드 - 스크롤(관성 사용), 드래그 활성화 (세 손가락으로 드래그하기)\n\n![드래그 파일](/images/post/drag.png)\n\n\n#### 7. 핫 코너 단축키\n> 모니터 화면의 상하좌우에 마우스 커서를 이동하면 단축키 실행\n데스크탑 > 핫 코너 단축키\n\n\n![핫코너 단축키](/images/post/shortcut_mac_2.png)"},{"slug":"react-native","title":"React Native","date":"2022-03-17 14:00:00","coverImage":"/images/cover/react-native.png","category":"React","content":"\n리액트 네이티브 앱은 [Expo CLI](https://docs.expo.dev/get-started/create-a-new-app)를 설치해서 시작합니다. \n\n<!-- more -->\n## 설치하기\n\n```js\n$ expo init my-app\n$ cd my-app\n$ expo start\n```\n\n핸드폰에 Expo 앱이 설치하고 `expo start` 실행 후 생성된 QR 코드를 핸드폰 카메라로 인식해서 링크로 이동합니다. \n와이파이로 같은 네트워크에 있다면, 화면을 확인할 수 있습니다. \n\n## Async Storage 적용하기\n\n[공식 문서](https://reactnative.dev/docs/asyncstorage)에 `react-native`패키지에서 사용하던 방법이 현재는 `react-native-async-storage`에서 사용하는 방법으로 권장됩니다. \n\n[유튜브 영상](https://www.youtube.com/watch?v=aCe0h50hyCc)을 보면서 예제를 해봤습니다.\n\n```js\n// App.js\n\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function App() {\n  let index = 0;\n  const saveData = async () => {\n    try {\n      let user = `Jelee ${index++}`;\n      AsyncStorage.setItem('user', user);\n    } catch (error) {\n      // Error saving data\n    }\n  };\n\n  const displayData = async () => {\n    try {\n      let user = await AsyncStorage.getItem('user');\n      alert(user);\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <TouchableOpacity onPress={saveData}>\n        <Text>Click me to save data</Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={displayData}>\n        <Text>Click me to display data</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n버튼을 클릭하면, 카운트를 계속 증가시켜 스토리지에 추가해보고 `Click me to display data`버튼을 클릭하면 증가한 숫자가 팝업창에 뜹니다.\n\n## 리액트 개발 툴\n애뮬레이터를 실행했을 때, 개발 툴 명령어를 설치하면 개발자 도구로 UI 컴포넌트 트리를 확인할 수 있습니다. \n[참고](https://jeffgukang.github.io/react-native-tutorial/docs/basic-tutorial/basic-functions/02-debugging/debugging-kr.html)\n\n## 리액트 네이티브 버그 해결방안 \n\n> Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports. <br/>\n> Check the render method of `App`. <br/>\n> 해결 방법:\n> import 한 경우 export 가 잘 되었는지 확인한다. 책에선 `import { AppLoading } from 'expo'` 로 사용했던 것이 그 후로 버전이 바뀌면서 [expo-app-loading](https://docs.expo.dev/versions/latest/sdk/app-loading/) 모듈 설치 방법으로 변경되었다.그래서 위와 같이 import 는 했는데, 올바른 모듈이 없을 경우에 발생한다.\n\n----\n##### XDLError: ValidationError: \"scheme\" is not allowed\n\n> XDLError: ValidationError: \"scheme\" is not allowed <br/>\n> 해결 방법: \n> $ rm -rf .expo  //디렉토리를 삭제하고 실행해본다. [[자세히]](https://github.com/expo/expo-cli/issues/2951)\n\n\n##### React Native `RuntimeError: abort(Error: xcrun exited with non-zero code: 2` on iOS simulator\n\nhttps://github.com/expo/expo-cli/issues/2413"},{"slug":"modern-js","title":"모던 자바스크립트 새로운 기능","date":"2022-01-27 23:47:36","coverImage":"/images/cover/modern-js.png","category":"JavaScript","content":"\nES2016 ~ ES2020 까지 자바스크립트의 많은 변화가 있었습니다. \n[모던자바스립트 핵심가이드](http://www.yes24.com/Product/Goods/101478466)책이 너무 잘 정리되어있어 책을 보는 것을 추천합니다. 여기엔 자주 사용하는 몇가지 문법만 정리해봅니다.\n<!-- more -->\n#### JavaScript\n\n[Object.fromEntries()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries)\n\n키/값 쌍이 포함된 배열을 객체로 변환합니다. \n\n```js\nconst entries = [['foo', 'v1'], ['baz', 'v2']]\nObject.fromEntries(entries)\n// {foo: 'v1', baz: 'v2'}\n```\n\n[Object.entries()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)\n\n주어진 객체를 [key, value] 쌍의 배열로 반환합니다.\n\n```js\nconst object1 = {\n  a: 'somestring',\n  b: 42\n};\n\nObject.entries(object1).forEach(([k, v] = e)  => console.log(k, v));\n// a somestring\n// b 42\n```\n\n[Object.values()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/values)\n\n모든 값이 담긴 배열을 반환합니다. \n```js\nObject.values(object1)\n// ['somestring', 42]\n```\n\n[Object.seal()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n\n객체의 새로운 속성을 추가할 수 없게 얼려버리는 걸 말합니다. 하지만 [Object.freeze()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) 과 다르게 데이터 속성값을 변경하는 것은 가능합니다. \n\n[Array.from()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n\n유사배열객체나 이터러블한 객체를 얕게 복사해 새로운 배열을 생성합니다. \n```js\nconst arr_like_obj = {\n0: 'a',\n1: 'b',\n2: 'c',\nlength: 3}\n\nArray.from(arr_like_obj)\n// ['a', 'b', 'c']\n```\n\n[typeof](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/typeof)\n\n자료형을 나타내는 문자열을 반환합니다. \n\n[instanceof](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/instanceof)\n\n해당 속성이 프로토타입 체인 어딘가에 존재하는지 판별합니다. \n\n[Symbol](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n\n항상 고유하며 객체 속성의 식별자로 사용할 수 있습니다. \n\n[defineProperties](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\n\n메서드 객체에 새로운 속성을 정의하거나 기존의 속성을 수정하고 그 객체를 반환합니다.\n\n#### Class \n\n[private class fields](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/Private_class_fields)\n\n`#` 해쉬를 추가해 클래스의 속성을 외부에서 호출할 수 없게 만들 수 있습니다. \n\n\n[static](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/static)\n\n클래스의 정적 메서드 키워드입니다. 인스턴스가 아닌 클래스 자체에서 접근할 수 있는 메서드입니다. \n\n[get](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/get)\n\n클래스 내에서 설정한 객체를 읽기 전용으로 가져올 수 있습니다. \n\n#### Web API  \nDocument에 상속된 가장 일반적인 기본 클래스입니다. \nHTML 태그를 직접 짚어서 사용할 경우에 하위 클래스들의 요소들을 선택할 수 있습니다.\n\n[firstElementChild](https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild)\n\n엘리먼트의 첫번째 자식요소를 반환합니다. \n\n[lastElementChild](https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild)\n\n엘리먼트의 마지막 자식요소를 반환합니다. \n\n\n[nextElementSibling](https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling)\n\n엘리먼트 지정한 요소의 바로 다음 요소를 반환합니다. 지정된 요소가 목록의 마지막 요소일 경우엔 null을 반환합니다.\n\n\n[requestAnimationFrame()](https://developer.mozilla.org/ko/docs/Web/API/Window/requestAnimationFrame)\n\n브라우저에게 애니메이션을 호출하는 합수입니다. 실행할 콜백을 인자로 넘겨주면, 리페인트 되기 전에 업데이트 함수를 실행합니다. "},{"slug":"codespitz-86","title":"코드스피츠 [객체지향 자바스크립트] 돌아보기","date":"2022-01-27 21:11:37","coverImage":"/images/cover/codespitz.png","category":"JavaScript","content":"\n[코드스피츠 86 - 객체지향 자바스크립트](https://www.youtube.com/watch?v=E9NZ0YEZrYU&list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw) 강의를 정리해봅니다. \n\n## 프로그래밍의 기준을 어디에 둘까요?\n\nValue Context: 메모리 주소에 관계없이 값이 같다고 보면 같은 것이라 보는 관점 (값 기반)\n\n- 할당하거나 가져올 때, 값을 사용한 경우는 끝없이 복사본을 만든다.\n- 상태가 관리되서 안전한게 아니라, 계속 불변하는 값들을 만들어내서 안전해 보이는 것일뿐\n- 연산을 기반으로 로직을 전개\n<!-- more -->\nidentifier Context: 힙 메모리에 있는 주소로 보는 관점 (식별 기반)\n\n기준을 정했으면, 하나의 컨텍스트만 쓰는 것을 권장합니다.\n\n```\n// 오브젝트 객체의 리터럴로 값을 만드는 방법\nconst a = {\n a: 3,\n b: 5\n}\n\nconst b = {\n a: 3,\n b: 5\n}\n\nconsole.log(a === b) // false (identifier context 기준으로 메모리의 주소를 보면 다른 값이다)\nconsole.log(JSON.stringify(a) === JSON.stringify(b)) // true (문자열로 환원하면, 값으로 보는것이라 같다)\n```\n\n## 객체지향 세계\n\n- 객체는 하나의 원본입니다. \n- 내부의 상태관리를 책임지는 객체입니다.\n- 메시지를 통해서 위임해서 로직을 전개합니다. \n- 객체 지향은 value context 를 쓰지 않습니다. \n\n## Polymorphism \n\n1. substitution (대체 가능성)\n\n   - 확장된 객체는 원본으로 대체 가능합니다. (자식은 부모를 대신할 수 있습니다)\n\n2. internal identity (내적일관성)\n   - 생성 시점의 타입이 내부에 일관성 있게 참조됩니다. (어느시점에서든 만들어질 때 상태를 유지합니다)\n\nex) 오버라이딩: 부모함수를 덮어서 없애고 자식함수로 대체하는 것을 말합니다.\n\n```js\nconst Worker = class {\n  run() {\n    console.log('working');\n  }\n  print() {\n    this.run();\n  }\n};\n\nconst HardWorker = class extends Worker {\n  // 하드워커의 부분집합이 워커, 확장될 클래스는 확장할 대상을 대체할 수 있다.\n  run() {\n    console.log('hardWorking');\n  }\n};\n\nconst worker = new HardWorker(); // 워커의 인스턴스로 하드워커를 만듬\nconsole.log(worker instanceof Worker); // substitution\nworker.print(); // internal identity\n```\n\n## Object Essentials (객체의 본질)\n\n- Maintenance of State (데이터를 은닉) \n  : 객체의 속성이 모두 프라이빗이면서 내 데이터를 관리합니다.\n- Encapsulation of Functionality (기능의 캡슐화) \n  : 메소드를 감춥니다. 외부에 캡슐화해서 제공합니다.\n- Isolation of Change (격리) \n  : 변화의 여파를 막고 격리시킵니다. 오염시켰을 때, 전역 처리기를 걸어둡니다.\n\n```\nconst EssentialObject = class {\n\t#name = \"\"; // hide state\n\t#screen = null;\n\tconstructor(name) {\n\t\tthis.#name = name;\n\t}\n\tcamouflage() {\n\t\tthis.#screen = (Math.random() * 10).toString(16).replace(\".\", \"\")\n\t}\n\tget name() {\n\t\treturn this.#screen || this.#name;\n\t}\n}\n```\n\n## 알려진 기본 설계요령 (SOLID 원칙)\n\n- SRP (Single Responsibility) 단일책임\n\n  코드를 고쳐야하는 이유는 하나뿐이야라고 만드는 방법입니다. \n  잘못하게 되면 산탄총 수술이 필요하게 됩니다. \n  다른 객체에게 의뢰한다 = 다른 객체에게 메시지를 보내는 것.\n\n- OCP (Open Closed) 개방폐쇄\n\n  기존의 객체를 건드리지 않게 설계를 해야합니다. \n  새로운 문제가 일어났으면 새로운 객체를 만들어서 새로운 것에 대한 해결책만 내릴 수 있게 만듭니다. \n\n  인터페이스나 추상클래스를 상속받아서 처리합니다. 그 다음번 문제도 추상화를 받아서 해결합니다.\n\n- LSP (Liskov Substitution, 리스코프 치환) \n\n  부모쪽으로 캐스팅해서 형을 변환하는 것을 말합니다.(업캐스팅)\n\n  Ex) 추상층: 생물(숨을 쉰다) 구상층: 사람(생물, 다리로 이동한다), 타조(생물, 다리로 이동한다), 아메바(생물)\n\n- ISP (Interface Substitution, ISP 치환)\n\n  리스코프 치환법칙을 위반(똑같은 위치에서 같은 기능을 하는 경우에 위임이 불가능할 경우)하게 되면, 인터페이스로 분리하도록 해봅니다. \n  \n  역할에 맞게 분리해서 만들어야합니다. \n  1. 소유 방법으로 분리한다.\n  2. 인터페이스를 만들어서 오버라이딩하면 됩니다.\n\n- DIP (Dependency Inversion)\n\n  의존성 역전의 법칙, 의존성은 항상 부모에서 자식으로만 상속됩니다.\n\n\n```js\nconst Manager = class {\n  #workers;\n  constructor(...workers) {\n    if (workers.every((w) => w instanceof Worker)) this.#workers = workers;\n  }\n  doWork() {\n    this.#workers.forEach((w) => w.run());\n  }\n};\n\nconst manager = new Manager(new Worker(), new HardWorker());\nmanager.doWork();\n```\n> 용어 정리\n> 1. DI (Dependency Injection) 의존성 주입\n> 2. DRY 중복방지\n> 3. Hollywood Principle 의존성 부패방지\n>  물어보지 말고 요청하지 않습니다.. ex) 시간날 때, 나한테 연락을 줘.\n> 4. Law of demeter 최소 지식\n>  최소한의 지식만 가지고, 내부에서 객체의 타입, 원래 필드의 타입, 인자로 가져온 객체의 타입만 알게 합니다.\n>  너무 많아지면, train wreck (열차전복) 현상이 일어납니다.\n> 5. Inversion Of Control 제어 역전\n>  flow control (흐름 제어) = 역으로 대치하겠다. 즉, 위임하겠다라는 의미입니다.\n>  프로그램 실행 통제 : 어떠한 흐름으로 제어할지 결정하는 것입니다.\n>  제어를 추상화하고 제어문을 한번만 작성하면, 일반화합니다.\n>  개별 제어의 차이점만 외부에서 주입합니다.\n>  실제구현: 전략패턴 & 템플릿 메소드 패턴 < 컴포지트 패턴 < 비지터 패턴\n\n## SRP 준수하는 객체망이 문제를 해결하는 방법은 뭘까요?\n\n다른 객체에게 의뢰하는 것입니다.\n\n1. 메시지 - 의뢰할 내용\n2. 오퍼레이션 - 메시지를 수신할 객체가 제공하는 서비스\n3. 메소드 - 오퍼레이션이 연결될 실제 처리기\n\n## 의존성의 종류\n\n1. 객체의 생명 주기 전체에 걸친 의존성\n\n- 상속(extends)\n- 연관(association) : 상속을 소유를 합니다.\n- 의존성이 높거나 역할을 개개인별로 너무 많이 부여하면 코드가 망가집니다.\n- 부모는 방탄이다.\n- 필드의 객체 타입을 알고 있습니다.\n\n2. 각 오퍼레이션 실행 시 임시적인 의존성\n\n> 이러한 의존성을 낮추고 격리시키는 방법을 배우는 것이 객체지향 방법론을 배우는 이유입니다. \n\n\n### MVVM 패턴을 알아보고 실습하면서 점진적으로 수정해가는 과정을 배운다.\n\n## MVC\n\nModel -> Controller -> View -> Model\n\n뷰가 모델을 알고 있는 것이 문제가 됩니다. 모델은 비지니스 모델인데 화면에 표시되는 이유와 관련 없는데 밀접하게 연관되서 동작하게 됩니다. \n\n서버 프로그래밍에서는 컨트롤러로 가공하는 방법이라 괜찮은데 클라이언트 프로그래밍에서는 양방향이 서로 연동되면 안되서 문제가 됩니다.\n\n## 제왕적 컨트롤러 MVC\n\nView -> Controller -> Model -> Controller -> View\n\n뷰가 컨트롤러를 통해 모델을 바꾸고 뷰의 변화나 모델의 변화가 필요할 때, 컨트롤러를 변경하게 됩니다.\n\n## MVP\n\nView (getter, setter) - Presenter -> Model -> Presenter -> View (getter, setter)\n\n뷰는 인터페이스로써 세터와 게터가를 갖고 있습니다. \n\n프레젠터 입장에서 뷰의 게터, 세터를 호출합니다. 사실 모델을 모르고 호출하게 되므로, 뷰가 모델을 건드릴 수가 없습니다.\n\n프레젠터는 통제만 하는 역할을 합니다. \n\n## MVVM\n\nView <- Binder(옵저버) -> ViewModel -> Model -> ViewModel\n\n뷰모델은 순수한 뷰입니다. 뷰의 변화가 있으면 바인더가 뷰모델을 갱신해줍니다. \n진짜 뷰와 뷰모델의 의존성을 바인더가 컨트롤하게 됩니다. \n\n여기서도 뷰모델이 뷰를 완전히 모르게 합니다.\n\n## 코드 작성 [(소스)](https://gist.github.com/hikaMaeng/ae5301b2808afd150c4f55a47bd9466a)\n\n### 1회차\n\n- TypeCheck() \n: 자바스크립트는 런타임에 에러가 발견되는 즉시, throw 로 멈추게 하는 코드가 필요합니다. 타입검사를 해서 'string' 또는 객체인지를 비교합니다.\n\n```\ntypeof type == 'string' // type 이 string 이 아니면 객체이다.\n```\n\n> 동등 연산자는(==) 강제 형변환을 일으키지 않아서 속도가 빠르다. 그래서 미리 체크하는 함수를 만들어서 사용하면 매번 일치 연산자(===) 로 비교하는 작업을 줄일 수 있다. 일치 연산자는 자료형 검사를 먼저하게 되서 속도가 느리다.\n\n- Binder Class \n: 어떤 뷰 모델과 매칭할지 내부 hook과 뷰모델을 연결해서 반영해줍니다. \n  \n바인딩에는 2가지 방식있습니다.\n\n1. 태그를 스캔하게 만들어서 만드는 방식, 뷰와 모델을 분리해서 관리할 수 있습니다. (앵귤러의 방식)\n2. 데이터와 연결되어 있는 뷰를 만들어서 이 뷰를 꽂게하는 컴포넌트 방식, 자기 뷰를 모델과 연결해서 만들어둡니다. (리액트의 방식)\n\n- Scanner Class\n: 현재의 뷰모델을 이용해서 스캔합니다. 스캐너가 아이템을 체크하면서 Binder 클래스에 아이템을 추가합니다.\n\nSRP원칙을 기반으로 HTML 해석 스캐너를 따로 둡니다. \n\n> HTML5 에서는 'data-' 만들지 않는 속성은 [유효성 검사](https://validator.w3.org/#validate_by_uri)에서 모두 깨지게 되어있습니다. 속성을 만들 때는 'data-' 프리픽스로 만들어줍니다. \n\n- 애니메이션 효과 \n\nisStop 플래그로 색상이 변경된 후, 클릭했을 때 멈추도록 설정해줍니다.\n```js\nconst viewmodel = ViewModel.get({\n    isStop: false,\n    changeContents() {\n        this.wrapper.styles.background = `rgb(${\n            parseInt(Math.random() * 150) + 100\n        },${parseInt(Math.random() * 150) + 100},${\n            parseInt(Math.random() * 150) + 100\n        })`;\n        this.contents.properties.innerHTML = Math.random()\n            .toString(16)\n            .replace('.', '');\n        binder.render(viewmodel);\n    },\n    wrapper: ViewModel.get({\n        ....\n        events: {\n            click(e, vm) {\n                vm.isStop = true;\n                console.log('click', vm);\n            },\n        },\n    }),\n    ...\n});\n\nconst f = (_) => {\n    viewmodel.changeContents();\n    console.log(viewmodel.isStop);\n    if (!viewmodel.isStop) requestAnimationFrame(f);\n};\n\nrequestAnimationFrame(f);\n```\n\n\n### 2회차\n\n![MVVM 패턴](/images/post/ex-2.png)\n\nViewModel <- Binder[BinderItem] <- Scanner -> HTMLElement\n\n- ViewModel Class [[강의]](https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2463)\n: 커스텀 key에 값을 추가할 수 있도록 변경합니다. \n  DOM의 프로퍼티(엘리먼트)와 어트리뷰트(태그) 값을 업데이트 할 수 있습니다.\n\n```js\n Object.entries(data).forEach(([k, v]) => {\n    if ('styles.attributes.properties'.includes(k)) {\n        this[k] = ViewModel.define(this, k, v);\n    } else {\n        Object.defineProperty(this, k, {\n            enumerable: true,\n            get: (_) => v,\n            set: (newV) => {\n                v = newV;\n            },\n        });\n\n        if (v instanceof ViewModel) {\n            v.subKey = k;\n        }\n    }\n});\n```\n\n\n- Binder Class [[강의]](https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2908)\n\n: 뷰를 그리는 제어문은 바인더에 작성합니다. *** ISP 제어역전이 성립합니다.\n  데이터를 조작하는 코드만 작성합니다.\n```js\n render(viewmodel, _ = type(viewmodel, ViewModel)) {\n        this.#items.forEach((item) => {\n            const vm = type(viewmodel[item.viewmodel], ViewModel),\n                el = item.el;\n\n            Object.entries(vm.styles).forEach(([k, v]) => (el.style[k] = v));\n            Object.entries(vm.attributes).forEach(([k, v]) =>\n                el.setAttribute(k, v)\n            );\n            Object.entries(vm.properties).forEach(([k, v]) => (el[k] = v));\n        });\n    }\n```\n\n- Scanner Class [[강의]](https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=3955)\n: HTML을 스캔하고, hook 을 만들어서 바인더와 연결해주는 작업을 합니다. \n\n> 재귀로 함수가 함수를 호출하다보면 임시 메모리가 쌓이면서 스택오버플로우가 발생하게 됩니다. 해결하려면, 별도의 메모리 공간 스택을 만들고 while 로 돌면서 처리를 하면됩니다. 동적으로 스택을 빼가면서 만듭니다.\n\n```js\n  const stack = [el.firstElementChild];\n  let target;\n\n  while ((target = stack.pop())) {\n      this.checkItem(binder, target);\n\n      if (target.firstElementChild) stack.push(target.firstElementChild);\n      if (target.nextElementSibling)\n          stack.push(target.nextElementSibling);\n  }\n```\n\n- ViewModel Class [[강의]](https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=4770)\n: 새로운 클릭했을 때의 이벤트를 추가합니다. style, attribute 를 key 로 잡아줍니다.\n  wrapper 랑 contents 를 바꾼 후에 한번만 렌더합니다.\n\n```js\nObject.entries(data).forEach(([k, v]) => {\n    if ('styles.attributes.properties'.includes(k)) {\n        this[k] = ViewModel.define(this, k, v);\n    } else {\n        Object.defineProperty(this, k, {\n            enumerable: true,\n            get: (_) => v,\n            set: (newV) => {\n                newV = v;\n            },\n        });\n\n        if (v instanceof ViewModel) {\n            v.subKey = k;\n        }\n    }\n});\n```\n### 3회차\n\n![전략 패턴](/images/post/ex-3.png)\n\n기존 바인더 코드를 전략적으로 변경하는 방법 (바인더가 모델이 변하면 자동으로 변경되게끔 만드는게 목적입니다)\n\n## 전략 패턴 (Strategy)\n\n어떤 문제를 해결하기 위한 핵심적인 지식 부분을 의미합니다. 객체에서 상태는 프로퍼티, 행동은 메소드로 표현합니다. \n\n1. 변화가 생길 때마다 코드를 변경하는게 아니라 객체로 변경합니다. (컴포지션 패턴 -> DI)\n   - 내부에서 만들면 다시 하드코딩이 됩니다. 코드를 변경하지 않고 외부에서 공급받으면 객체에 대한 의존성을 줄일 수 있습니다. (DI)\n2. 반드시 인터페이스나 타입으로 변환합니다. \n3. 내부의 코드를 프로세서와의 계약으로 풀었기 때문에 프로세서로 풀어줍니다.(알고리즘의 일반화)\n\n> 공통로직으로 묶고, 타입이 제공하는 메소드로만 알고리즘을 수정하는 것 -> 알고리즘의 일반화\n\n\n## 템플릿 패턴\n기존 Binder 기능을 Processor Class를 생성해서 위임합니다. \n\n```js\nconst Processor = class {\n    cat;\n    constructor(cat) {\n        this.cat = cat;\n        Object.freeze(this);\n    }\n    process(\n        vm,\n        el,\n        k,\n        v,\n        _0 = type(vm, ViewModel),\n        _1 = type(el, HTMLElement),\n        _2 = type(k, 'string')\n    ) {\n        this._process(vm, el, k, v);\n    }\n\n    _process(vm, el, k, v) {\n        throw 'override';\n    }\n};\n\nbinder.addProcessor(\n    new (class extends Processor {\n        _process(vm, el, k, v) {\n            el.styles[k] = v;\n        }\n    })('styles')\n);\n\n```\n\n> 자식한테 위임하는 방법 (템플릿 메소드 -> `hook` 이라 부른다.)\n\n\n## 옵저버 패턴 (Observer)\n\n감시하는 쪽(observer)는 상대적으로 편합니다. \n감시 당하는 쪽(subject)은 변화가 일어나면 notify 로 알려줘야해서 subject가 더 피곤하다 보면 됩니다.\n\nViewModel Class\n: notify 를 만들어 변경될 때마다 감지를 할 수 있도록 변경합니다. 타겟이 되는 결과 오브젝트를 해석한 후 프로퍼티로 세팅해줍니다. \n\n\nBinder Class\n: ViewModelListener 의 책임도 생기게 됩니다. 그래서 인터페이스 별로 분리해줘야합니다.\n  watch, unwatch 로 등록해서 뷰모델을 받아서 noti가 안 왔을 때, 렌더를 해줄 수 있도록 변경합니다. \n\n\n## 컴포지트 패턴 (Composite)\n동일한 문제를 위임을 반복해서 취합하는 방법을 말합니다.\n\n1. 뷰모델인 자신이 자식 뷰모델을 옵저버가 되야합니다. \n   자신의 변화를 알아차려야하므로, 뷰모델의 리스너가 되야합니다. 리스너가 아닐 때까지 계속 반복합니다. 백바인드를 걸어준다.\n2. 옵저버 패턴의 인포 객체가 넘어오면 이벤트를 알아야합니다. \n3. 리퀘스트 애니메이션 프레임 당 모든 걸 취합해서 noti 를 한번만 보내줍니다.\n\nvm 커버하는 단일 루프 하나에 등록해서 씁니다. 배열 루프가 훨씬 빠릅니다. (리스너를 100개 다는 것보다 리스너 1개만 걸고 루프 돌리는게 훨씬 빠름)\n\n> 계속 하다보면 쉬워집니다. 그래프 순회나 재귀로 푸는 것보다 컴포지트 패턴이 훨씬 쉽게 풀립니다. \n\n    font-size: 3.5rem;\n## 비지터 패턴\n2개 이상의 알고리즘에 개입하도록 외부에서 공급되는 전략입니다.\n단일 컨트롤, 다양한 메서드 다른 곳에서 역할 수행하는 경우에 모두 비지터의 가능성이 있습니다.\n\n\n## Client\n뷰모델의 부모의 isStop 을 업데이트해줍니다.\n\n\n### 4회차\n\n![권한 조정](/images/post/ex-4.png)\n\n책임에 맞는 권한을 부여합니다.\n\n## ISP\n\n뷰모델의 역할에 옵저버 패턴의 서브젝트 역할이 어울리지 않는 거 같습니다. - (역할분리를 해봅니다)\n역할에 맞게 ViewModel 을 개선하면서 ViewModelSubject 를 만듭니다. \n\n- 자바스크립트는 다중상속이 불가능합니다.\n- 뷰모델 리스너와 뷰모델 서브젝트를 상속 받은 것을 사용해야만합니다.\n- 리스너가 1개라도 생겼을 때, watch 할 수 있도록 만듭니다. \n- 리스너가 없으면 unwatch 하고 빼줍니다.\n- `#inited` 플래그를 이용한 간단한 제어입니다. 싱글스레드로 변경할 수 있는 방법이 한번뿐이라 쉽습니다. \n\n> 역할을 분리하고 행위에 대해서 생각합니다. 작명법으로 해결되지 않습니다. \n\n## 섬세한 권한 조정\n\ngetter, setter 의 진짜 값을 갖고 있는 걸 백그라운드 필드라합니다. \n\n코드에서는 트랜잭션을 표현하려면, 함수로 만들어야합니다.\n한번에 일어나는 일인지(트랜잭션)를 함수로 표현하는 것이다. \n(외부에서도 필요할 때, 함수로 가져갈 수 있도록)\n\n\n> public getter, private setter 패턴 -> 자바스크립트에서 읽기전용을 구현하는 방법입니다.\n\n\n## Visitor 패턴\n보살핌을 받는애가 있고, 그 애가 비지터에게 자기자신을 주면 비지터가 대신 돌아주는 것을 의미합니다. \n제어를 위임하기 위해 코드를 객체로 변경한다. \n\n> 어려운 자료구조나 특별한 코드에 대해서 제어코드가 완전히 외부로 위임되서 한 곳에 모여있습니다. \n> 특수한 제어를 빼놓기 위해 사용합니다. \n\n- DOMVisitor Class\n\nDOM의 반복은 DOMVisitor의 역할입니다. \nDOMVisitor는 루프를 돌 필요가 있는 모든 곳에서 사용할 수 있는 함수가 됩니다.\n\n\n- DOMScanner Class\n\nBinder가 스캐너의 역할을 가져가고 Scanner는 checkItem 정책을 돌고 HTML만 공급합니다. \n그래서 스캐너는 역할에 안 맞기 때문에 코드를 분리해서 위임합니다.\n\n\n> 소프트웨어 설계란, 코드를 재배치하는 기술을 설계라합니다.\n> 코드의 역할을 알고 분리할 줄 알아야한다. 객체를 재배치하는 게 아닙니다. \n\n\n## 추상계층 불일치\n\n계약을 잘못 쓰면 의존성을 잘못 설정하면, 망한 코드가 됩니다.  \n어떤 형에서는 부모를 사용하고 어떤 형에서는 자식을 사용하다보면, 불일치가 일어나게 됩니다. \n\n> 연습을 많이하면 역할별 분리하는 습관이 생기게 되는데 한쪽이 추상계층이면, 반대쪽도 추상계층으로 맞춰줘야 불일치가 없어진다.\n\n추상계층과 연결될 수 있게 바꾸면 OCP를 수정하지않고 확장할 수 있도록 바꿀 수 있습니다.\n\n> 기능적인 부분과 도메인적인 부분을 나눠서 개발해야 추후에 도메인 부분만 교체할 수 있습니다.\n\n\n## 설계 종합\n\n좋은 코드는 복잡성을 쪼개서 최적화를 적용할 수 있게 됩니다. \n가상화된 렌더러 시스템은 어떤 플랫폼으로든 교체가 가능하다는 점이 장점입니다.\n많은 구현체들은 직접 바인더 콜하는 경우가 많아졌고, 옵저버 패턴으로 연결된 부분만 복잡도가 높게 되었습니다. \n\n\n### 5회차\n\n## 문제점 짚어보기\n\n문제 1. binder 의 viewmodelUpdated 가 전역변수를 참조하고 있다. \n자신의 뷰모델을 보내주도록 변경해줍니다. set 안에 별도의 속성을 넣는 건 애매한 일이기에 인자에 따로 플래그를 준다.\n\n문제 2. 바인더에는 vm 의 특정 키를 인식하는 코드가 없다.\n뷰모델에는 key가 확정(하드코딩)되어있는데 다른 서브키를 가질 수 없다. \n- 임의의 키를 매핑할 수 있는 코드로 수정한다. (하드코딩을 제거한다.)\n- 처리기는 데이터 구조가 매핑된다. 데이터 구조도 동적으로 바꾸는과정이 필요하다. \ndefine 이 재귀로 호출하게끔 한다.\n\n> reduce 는 초기값은 두고 첫번째 인자 accumulator 가 계속 앞에 인자로 들어오고 두번째 인자는 배열의 원소들이 들어온다. 그 다음에 있는  accumulator 있는 건 함수가 반환하는 값으로 변경된다. 오브젝트로 반환 될거다. ex) Object.entries().reduce(() => {}, {})\n\n\n문제3. setDomProcessor 세팅을 넣어준다. \n바인더에게 데코레이팅 해준다.\n\n문제4. binder에 공개 정보를 너무 많이 주고 있다? 프로세스의 자율성이 떨어진다.\n\n핵심 코어의 복잡성을 알려주기 위해 바인더가 무거워졌습니다. 본체는 가볍과 바깥쪽에 마지막 구현체의 실력에 따라 달라지도록 만든 것입니다. \n\n> 디자인이나 설계는 정답이 조직안에 있습니다. 누가 더 난이도 높은 쪽을 가져갈 것인가. \n> 디자인 의사결정은 코드의 배치 결정인데 항상 사람의 역량을 보고 결정해야합니다. \n\n\n## 데코레이터 패턴 [[강의]](https://youtu.be/5UUISCK6CL4?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2791)\n\n자기가 일하고 계속 다음번에게 넘기는 것을 말합니다.\n바인더에 도움없이 프로세서 세터를 만들어줍니다. \n소유하는 것과 격리시켜서 분리할 수 있습니다.\n\n> 다음번 애한테 일을 시킬지 말지 결정해서 중간에 멈출 수 있는 패턴은 Chain of Responsibility 패턴이라 합니다.\n\n\n루프가 나왔을 때, 객체로 바꾸는 방법이 링크드리스트로 만드는 데코레이터 패턴입니다. \n\n## 새로운 ol, li 만들기\n\n확장가능한 밑작업 위에 템플릿 프로세서를 만듭니다. \n오브젝트의 검증 -> err 순수함수 사용 or 클래스로 정의\n\n> 클래스의 싱글톤 객체와 static 의 차이\n> static 은 상속이 안된다. 단순 함수와 상태만 있습니다. \n\n## 쉴드 패턴\n검증되어있는 코드, 모든 코드가 안정화된 것만 내려오도록 작성합니다.\n\n```js\nif (..){ \n  template = ... \n  data = ...\n}// black list : 코드의 검증\n\n// white list: 위에 데이터를 이용하는 코드 (실수를 방지하기 위해)\nconst WL = { template, data }\n```\n유지보수 면에서는 로직 코드가 시작되기 전에 모두 검증이 끝나있어야합니다. \n\n> 옵셔널 코드와 쉴드패턴의 차이는 잘못되면 옵셔널은 전개가 되지 않습니다.\n\n![결과](/images/post/result.png)\n\n---\n\n강의 중간중간에 개발에 도움되는 얘기를 많이 듣게 됩니다. \n코드도 너무 잘 짜시고, 패턴대로 수정해나갈 수 있다는게 정말 엄청 신기하고 멋지다는 생각이 절로 듭니다. \n\n저는 직접가서 보기도 했었지만..(유튜브에 뒷통수가 출연했어요!) \n주옥같은 강의를 여러번 돌려볼 수 있다는게 너무 다행이란 생각입니다:)"},{"slug":"eslint-prettier","title":"VSCode 에서 ESLint와 Prettier 설정방법","date":"2022-01-15 17:05:58","coverImage":"/images/cover/eslint-prettier.png","category":"Tip","content":"\nESLint 와 Prettier 를 적용 후 VSCode에서 자동 저장이 되게 하기 위해서는 다음과 같이 코드를 추가해주면 됩니다.\n<!-- more -->\n\n## Settings 파일을 직접 수정하는 방법\ncommand + shift + P : Command Palette\n\n![file open](/images/post/settings.png)\n\n```js\n// VSCode > settings.json\n{\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": true // ESLint\n    },\n    \"editor.formatOnSave\": true, // Prettier\n}\n```\n## IDE에서 파일을 설정하는 방법\nPreference > Settings (⌘ ,)\n![auto-save](/images/post/auto-save.png)\n\n## 규칙 설정 방법\n[ESLint](https://eslint.org/docs/user-guide/getting-started)는 코드가 정의된 규칙과 일치하지 않을 때, 판별해주는 정적 코드 분석 도구입니다. <br/> 자동저장 시, 코드 스타일을 바꿔줄 수 있습니다.\n\n문자열 배열의 경우에 쉼표 뒤에 아래로 한칸씩 떨어지는 스타일을 더 선호한다면, [규칙](https://eslint.org/docs/rules/indent#:~:text=bar%2C%0Abaz%2C%0A%20%20%20%20%20%20qux%0A%5D%3B-,Examples,-of%20correct%20code)을 추가해서 사용하면 됩니다.\n\n```js\n// .eslintrc\n{\n    \"rules\": {\n        \"indent\": [\"error\", 4, { \"ArrayExpression\": 1 }]\n    }\n}\n```\n\n[Prettier](https://prettier.io/docs/en/index.html)는 공통 스타일 가이드에 따라 더 이쁘게 표현하기 위한 코드 포맷터입니다.\n\n```js\n// .prettierrc\n{\n    \"trailingComma\": \"es5\",\n    \"tabWidth\": 4,\n    \"semi\": true,\n    \"singleQuote\": true\n}\n```\n\n대부분 2가지를 같이 사용하기에 일관성 있는 코드가 될 수 있게 자동 저장시에 반영될 수 있게 적용해서 사용하시길 바랍니다.\n"},{"slug":"typescript-config","title":"TSConfig 설정방법","date":"2022-01-14 16:14:08","coverImage":"/images/cover/typescript-config.png","category":"TypeScript","content":"\n타입스크립트로 전환하면, config 파일을 생성해서 프로퍼티를 추가하게 되는데요,\n기본 리액트 버전으로 설치하면 가장 먼저 만나게 되는 오류가 있습니다.\n<!-- more -->\n\n> <span style='color:red'> Could not find a declaration file for module 'react'.\n> ...\n> implicitly has an 'any' type. </span>\n\n암시적으로 any 타입을 가집니다. 라고 해석할 수 있는데요.\n타입스크립트에서 타입을 사용하도록 엄격하게 권장하고 있습니다.\n\n어떤 타입인지 모르고 지나칠 때가 있습니다. 그러면 `'any'`라고 명시해야하는데 이 조차도 너무 번거롭다 느껴질 때 약간 느슨하게 타입을 안쓰고 넘어가게 해주는 방법이 있습니다.\n\n[noImplicitAny](https://www.typescriptlang.org/tsconfig#noImplicitAny) 프로퍼티를 추가해주는 방법인데요, off 로 바꿔주면 오류는 발생하지 않을것입니다.\n\n결과적으로는 타입스크립트로 전환했으면, 모든 타입을 작성해주는 것은 매우 중요한 거 같습니다.\n\n```js\n// tsconfig.json\n{\n    \"compilerOptions\":\n    {\n        \"noImplicitAny\": false\n    }\n}\n```\n"},{"slug":"react-cypress","title":"React에 Cypress 적용하기","date":"2022-01-14 13:58:02","coverImage":"/images/cover/react-cypress.png","category":"React","content":"\n이 글은 Cypress 블로그의 [원문](https://www.cypress.io/blog/2021/04/06/cypress-component-testing-react)을 직역해서 [실습](https://github.com/jelee603/cypress-testing-example)하기 위해 작성했습니다.\n<!-- more -->\n## Cypress 시작하기\n\nCypress7.0 중, Cypress와 함께 패키지로 묶은 새로운 컴포넌트입니다.\n이것은 테스팅을 실행으로부터 만드는 법을 배우고, `experimentalComponentTesting` 플래그가 숨겨져 있습니다.\n\n블로그의 이 글에서는 타입스크립트를 사용한 새로운 리액트 앱을 통해 리액트를 생성하고 Cypress 컴포넌트 테스트 러너를 설치하는 방법을 볼 수 있을 것입니다.\n\n블로그에 사용된 예제코드는 [여기](https://github.com/lmiller1990/cypress-react-template)서 얻을 수 있습니다.\n\n## 새 리액트 프로젝트 생성\n\n새로운 리액트는 만드는 법을 시작합니다. 옵션으로 타입스크립트를 추가합니다. - 이 예제를 사용할 것입니다.\n\n```\nyarn create react-app cypress-test-react --template typescript\n```\n\n## Cypress 컴포넌트 테스트 러너를 구성하는 방법\n\n리액트 프로젝트를 한번 얻고, Cypress 설치와 웹팩 DevServer 와 리액트 어댑터를 설치합니다.\n\n리액트 앱 프로젝트는 웹팩 기반에 있습니다. 웹팩 어댑터와 연관된 설치중입니다.\n또한 `@cypress/react` 필요하고, 컴포넌트(`mount`하기 위해 비슷한 Enzyme 또는 테스팅 라이브러리에 `render`)들과 상호적으로 붙일 수 있는 방법이 우선입니다.\n\n```\nyarn add cypress @cypress/react @cypress/webpack-dev-server --dev\n```\n\n다음, 기본 설정을 위해 `cypress.json` 만듭니다:\n\n```\n{\n  \"component\": {\n    \"testFiles\": \"**/*.test.{js,ts,jsx,tsx}\",\n    \"componentFolder\": \"src\"\n  }\n}\n```\n\n여기에 몇가지 컴포넌트 테스팅 상세 옵션을 추가하고, 앞으로는 `\"component\"` 키를 사용합니다.\n`\"componentFolder\"`에 모든 컴포넌트와 테스트들이 위치하고 `\"testFiles\"`은 테스트파일을 찾기위한 패턴입니다.\n\n마지막으로 컴포넌트 테스트를 위해 `@cypress/webpack-dev-server`가 필요합니다.\n플러그인은 [Cypress 문서](https://docs.cypress.io/guides/tooling/plugins-guide#Installing-plugins)가 상세하게 설명합니다.\n기본 플러그인은 `cypress/plugins/index.js` 부터 로드 됩니다. 파일을 만들고 추가합니다:\n\n```\n// cypress/plugins/index.js\n\nconst injectDevServer = require(\"@cypress/react/plugins/react-scripts\")\n\nmodule.exports = (on, config) => {\n  injectDevServer(on, config)\n  return config\n}\n```\n\n이것은 Cypress 웹팩 Dev Server를 사용하기 위해 웹팩과 같은 설정으로 리액트 앱을 사용합니다.\n\n다른 템플릿을 사용한다면, Next.js 같은, 몇가지 다른 유용한 어댑터를 가져야합니다.\n\n또한 1개의 어댑터를 만드는게 가능합니다.\n\n## 테스트 작성법\n\nCypress 를 사용하기 위해, `src/App.test.tsx` 이동시켜, 리액트 앱 템플릿으로 가져옵니다.\n간단한 이동입니다:\n\n```\n// src/App.test.tsx\n\nimport React from 'react';\nimport { mount } from '@cypress/react';\nimport App from './App';\n\nit('renders learn react link', () => {\n  mount(<App />);\n  cy.get('a').contains('Learn React');\n});\n```\n\n대부분의 테스트는 `@cypress/react` 로 부터 `mount`할 때 시작할 것입니다. 테스트 라이브러리의 `render`와 유사합니다. 컴포넌트가 한번 마운트되면, Cypress의 확장된 올바른 행동을 확인하기 위한[query and assertion APIs](https://docs.cypress.io/api/table-of-contents) 를 사용할 수 있습니다.\n이 예제는 `\"Learn React\"` 렌더되었다고 확증할 수 있습니다.\n\n테스트 러너에서 Cypress 컴포넌트를 실행하세요:\n\n```\nyarn cypress open-ct\n```\n\n그리고 왼쪽 트리구조에서 스펙을 선택하세요.\n\n변경되도록 해보세요 - 테스트는 즉각 재실행됩니다. 오로지 즉각적인 것은 아닙니다. 테스트가 통과되거나 실패 되었다면, 시각적으로 점검하고 디버그가 가능합니다.\n\n`yarn cypress run-ct`로 모든 스펙들은 실행할 수 있습니다. CI 환경, 또는 코드 커밋과 푸시 전에 마지막 체크에서 테스트들의 실행하기에 유용합니다.\n\n## 논의\n\nCypress 컴포넌트 테스트 러너는 jsdom 기반의 테스팅 환경(예를 들어, jest 와 Vue Test Utils)의 대안책입니다. 많은 장점을 제안합니다:\n\n- 실제 브라우저에서 실행됩니다. 이 의미는 테스트가 유저에게 더 가까운 경험이 될 것입니다.\n- 비주얼. 무엇이 렌더되었는지 볼 수 있습니다. 더이상 무엇이 렌더되거나 디버그인지 찾으며 수수께끼 터미널 로그를 스크롤링 하지 않아도 됩니다. - 단지 devtools 과 브라우저 DOM 을 열면 됩니다.\n- Cypress 의 힘 - 가장 인기있고 의지할 수 있는 E2E 테스팅이 있습니다.\n\n또한 디자인 환경이 2배입니다. 즉시 반영과 가까운 인스턴스 피드백을 주고 발전되는 것을 볼 수 있습니다.\n이것은 점진적으로 테스트 기반 jest 가 아니고, Storybook 디자인 기반 잘 되어진 환경입니다.\n\n여전히 알파버전이지만, 빠르게 발전하고 있고 컴포넌트 테스팅의 지표를 바꿀 것을 약속합니다.\n\n## 결론\n\n컴포넌트 테스팅을 위한 큰 Cypress 를 가져옵니다. 아래 어댑터 이래로, 웹팩과 같은, 테스트 전체를 버릴 필요는 없습니다. - 마이그레이션을오 가능합니다.\n\n시각적인 측면은 단위 테스트과 단독 툴 디자인입니다. 엉망인 콘솔 결과를 잡아내던 시절은 끝났습니다. - 테스트 실행으로 어떤 컴포넌트인지 볼 수 있습니다.\n\n블로그의 코드는 [여기](https://github.com/lmiller1990/cypress-react-template)에서 볼 수 있습니다.\n\n## 참고\n\n- https://www.cypress.io/blog/2021/04/06/cypress-component-testing-react\n"},{"slug":"react-runtime-error","title":"React 환경세팅에서 만난 오류들","date":"2021-12-28 14:57:17","coverImage":"/images/cover/react-runtime-error.png","category":"React","content":"\n오랜만에 React (v17.0.2) 최신버전으로 설치하고, `npm start` 를 실행했는데 아래와 같은 버그를 만났습니다.\n\n> Bug: Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: @eslint\\eslintrc\\universal.js\n\n먼저 어떤 버전의 문제인지, React 와 Eslint 에서 권장하는 버전을 확인하러 가봅니다.\n\n<!-- more -->\n1. 공식 홈페이지 권장사항\n   https://reactjs.org/docs/create-a-new-react-app.html\n\n```\nNode >= 14.0.0\nnpm >= 5.6\n```\n\n2. eslint v8 일 때, nodejs 버전을 업그레이드 해주라고 하네요.  \n   https://github.com/eslint/eslint/issues/15247\n\n```\nNode  ^12.22.0 || ^14.17.0 || >=16.0.0\n```\n\n2가지 버전을 확인해보니, Node 버전이 최소 14 이상은 되어야 안정적일 거 같아 보이네요.\n설치된 런타임 버전을 확인해봅니다.\n\n```\nnode -v // v12.22\nnpm -v // v6.14.15\n```\n\n예전에 작업하면서 노드 버전을 v12.22 로 사용하고 있었네요. v14.18 로 NVM을 변경해줍니다.\n\n스위칭 후에 OSX 터미널에서 실행하면 정상적으로 동작합니다. 이제 VSCode 터미널에서 실행해봅니다.\n여전히 오류가 발생합니다. <br/><br/>\n\n한참을 찾아보다가 좋은 [해결 방법](https://stackoverflow.com/questions/44700432/visual-studio-code-to-use-node-version-specified-by-nvm)을 발견했습니다.\nNVM을 이용해서 전역 버전을 변경하더라도 모든 동일하게 반영이 되지 않네요. <br/><br/>\n\n항상 사용하는 버전을 NVM Default 로 맞춰두고, `nvm use default` 로 사용을 해야할 거 같습니다.\nVSCode 에서는 [launch.json 파일](https://code.visualstudio.com/docs/editor/debugging#_run-view)에 `runtimeVersion: default`로 추가해두면 항상 default 값을 사용할 수 있습니다.\n\n```\n// OS X Terminal\nnvm alias default 14.18.1\n\n// VSCode Terminal\nnvm use default\n```\n"},{"slug":"browser-operation","title":"브라우저 동작 원리","date":"2021-12-01 21:59:43","coverImage":"/images/cover/browser-operation.png","category":"HTML_CSS","content":"\n## 브라우저의 역할\n\n브라우저는 웹페이지를 서버에 요청하고 서버의 응답을 받아 표시합니다.\n서버로부터 html, css, javascript, 이미지 파일 등 응답받는 것입니다.\n<!-- more -->\n\nhtml, css 는 렌더링 엔진인 html 파서와 css 파서에 의해 파싱되어 DOM, CSSOM 트리로 변환되어 렌더 트리로 결합됩니다. 브라우저는 렌더 트리를 기반으로 웹페이지를 표시합니다.\n\n크롬은 대부분의 브라우저와 달리 각 탭마다 별도의 렌더링 엔진 인스턴스를 유지하고 있습니다.\n각 탭은 독립된 프로세스로 처리된다는 점이 장점입니다.\n\n사파리와 크롬은 [웹킷 엔진](<[https://webkit.org](https://webkit.org/)>)을 사용합니다.\n\n## 동작 과정\n\n**렌더링 엔진**\n\n`렌더링 엔진`은 HTML 문서를 파싱하고 \"콘텐츠 트리\" 내부에서 태그를 `DOM 노드`로 변환해줍니다. 그 다음 외부 CSS 파일과 함께 스타일 요소도 파싱하게 되는데 스타일 정보와 HTML 표시 규칙은 `렌더 트리`라고 부르는 또다른 트리를 생성합니다.\n\n`렌더 트리` 생성이 끝나면 배치(layout)가 시작되는데 각 노드가 화면의 정확한 위치에 표시는 되는 것을 의미합니다.\n\n`렌더링 엔진`은 좀 더 나은 사용자 경험을 위해 가능하면 빠르게 내용을 표시하는데 모든 html 을 파싱할 때까지 기다리지 않고 배치(layout)와 그리기 과정을 시작합니다. 네트워크로부터 나머지 내용이 전송되기를 기다리는 동시에 받은 내용의 일부를 먼저 화면에 표시해주는 것이죠.\n\n**파싱**\n\nhtml 파서는 script 태그를 만나면 자바스크립트 코드를 실행하기 위해 DOM 생성 프로세스를 중지하고 자바스크립트 엔진으로 제어권을 넘겨줍니다. 자바스크립트 엔진은 자바스크립트 파일을 로드하고 파싱하여 실행합니다.\n\n자바스크립트의 실행이 완료되면, 다시 HTML 파서로 제어권을 넘겨서 브라우저가 중지했던 시점부터 DOM 생성을 재개합니다.\n\n이처럼 브라우저는 동기적으로 html, css, javascript를 처리하게 됩니다.\n그래서 흔히, body 아래에 script 써주는 방법이 dom 생성이 지연되어 발생할 수 있는 오류를 예방하는데 좋은 방법이 되었습니다.\n\n**자바스크립트 엔진**\n\n자바스크립트는 렌더링 엔진이 아닌 chrome 에서는 chrome v8 자바스크립트 엔진이 담당합니다.\n\n## 참고\n\n- [https://poiemaweb.com/js-browser](https://poiemaweb.com/js-browser)\n- [https://d2.naver.com/helloworld/59361](https://d2.naver.com/helloworld/59361)\n"},{"slug":"react-redux","title":"React와 Redux","date":"2021-11-26 13:45:56","coverImage":"/images/cover/react-redux.png","category":"React","content":"\n## 리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다.\n\n- 여러 컴포넌트에 걸쳐 전달하게 될 경우, 불필요한 props 가 늘어날 수 있다.\n- 형제 컴포넌트에서 불필요한 렌더링이 일어날 수 있다.\n- 최상위 컴포넌트에서 상태관리 로직이 많아 길어지는 현상도 있을 수 있다.\n<!-- more -->\n## 리덕스의 동작 과정\n\n```\n1. 리덕스는 스토어라는 객체 내부에 상태를 담게 됩니다.\n\n2. 상태를 변경시킬 때, 액션을 전달하는데 이 과정을 디스패치라합니다.\n\n3. 스토어가 액션을 받으면 리듀서가 상태를 변화시키는 로직으로 어떤 작업을 할지 정합니다.\n\n4. 액션 처리 후에 새 상태를 스토어에 담습니다.\n\n5. 스토어 안에 있는 상태가 바뀌면 구독하고 있는 컴포넌트에게 전달합니다.\n```\n\n```js\nyarn add redux react-redux\n```\n\n타입스크립트 공식문서 [예제](https://ko.redux.js.org/recipes/usage-with-typescript)는 actions 와 reducer 파일을 분리했지만, 공부하는 입장에서 분리하지 않고 하나로 보면 아래와 같습니다.\n\n`Action` 접미사를 붙인 객체에는\n\ntype 에 넘겨줄 값들의 타입을 정의하고,\n\npayload 에 리듀서 상태를 변경하는 로직을 넣어줍니다.\n\n```js\n// src/store/system.ts\n\nexport const UPDATE_SESSION = 'UPDATE_SESSION'\nexport interface SystemState {\n  loggedIn: boolean\n  session: string\n  userName: string\n}\n\ninterface UpdateSessionAction {\n  type: typeof UPDATE_SESSION\n  payload: SystemState\n}\n\n// 액션은 상태 변화 시킬 때 참조하는 객체를 정의한다.\nexport type SystemActionTypes = UpdateSessionAction\n\nconst initialState: SystemState = {\n  loggedIn: false,\n  session: '',\n  userName: ''\n}\n\n// 리듀서는 액션으로부터 받은 상태 변화 로직만 처리한다.\nexport function systemReducer(\n  state = initialState,\n  action: SystemActionTypes\n): SystemState {\n  switch (action.type) {\n    case UPDATE_SESSION: {\n      return {\n        ...state,\n        ...action.payload\n      }\n    }\n    default:\n      return state\n  }\n}\n```\n\n```js\n// src/store/index.ts\n\nimport { systemReducer } from './system/reducers';\nimport { chatReducer } from './chat/reducers';\n\nconst rootReducer = combineReducers({\n  system: systemReducer,\n  chat: chatReducer,\n});\n\n// 2개이상의 리듀서를 합쳐서 내보낸다.\nexport type RootState = ReturnType<typeof rootReducer>;\n```\n\nindex 파일에서 위에 정의했던 리듀서를 합쳐서 내보내주게 됩니다.\n\n[combineReducers](https://lunit.gitbook.io/redux-in-korean/recipes/structuringreducers/usingcombinereducers)를 사용하면 여러개의 리듀서를 한번에 호출할 수 있습니다.\n\n```js\n// src/hooks/useUpdateSession.ts\n\nimport { useDispatch } from 'react-redux';\nimport { useCallback } from 'react';\nimport { SystemActionTypes } from '../store/system';\n\nexport default function useUpdateSession() {\n  const dispatch = useDispatch();\n  return useCallback((text) => dispatch(SystemActionTypes(text)), [dispatch]);\n}\n```\n\nuseDispatch 함수는 액션을 전달합니다.\nhooks 디렉토리에는 이러한 dispatch 동작들을 정해둡니다.\n\n```js\n// src/components/**.tsx\n\nconst updateSession = useUpdateSession({loggedIn: true, session: '', userName: ''};\n```\n\n화면에서 사용할 때는, `use` 접두사를 사용한 hook 을 사용합니다.\n\n디버깅으로 리덕스로 변경된 값을 확인하는 방법은 크롬 확장자 도구에 리덕스 개발자도구([적용 방법](https://react.vlpt.us/redux/06-redux-devtools.html))를 설치하시면 됩니다.\n\n```js\n$ yarn add redux-devtools-extension\n\n// index.ts\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst store = createStore(rootReducer, composeWithDevTools());\n```\n\n## 참고\n\n- https://ko.redux.js.org/recipes/usage-with-typescript/\n- https://velog.io/@velopert/use-typescript-and-redux-like-a-pro\n- https://react.vlpt.us/redux/06-redux-devtools.html\n"},{"slug":"css-selectors","title":"CSS 선택자","date":"2021-11-12 15:12:23","coverImage":"/images/cover/css-selectors.png","category":"HTML_CSS","content":"\n[CSS 선택자](https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Selectors)는 CSS 규칙을 적용할 요소를 정의합니다.\n\n타입 선택자 분류는 다음과 같이 쓴다.\n<!-- more -->\n```css\nol li span {\n  /* 공백 : 하위 선택자 */\n}\n\nbody > p {\n  /* > : 자식 선택자 */\n}\n\ndiv + p {\n  /* + : 형제 선택자 */\n}\n\n* {\n  /* 전체 선택자 */\n}\n```\n\n마지막 라인 없애는 방법, `last-child` 선택자를 이용하자.\n\n```css\n.menu li {\n  border-bottom: 1px solid #ccc;\n}\n.menu li:last-child {\n  border: none;\n}\n```\n\n첫번째 스탸일 변경 방법 [`first-child`](https://developer.mozilla.org/ko/docs/Web/CSS/:first-child) 선택자를 이용하자.\n\n```\n<article>\n  <p>First paragraph...</p>\n  <p>Lorem ipsum...</p>\n  <p>Dolor sit amet...</p>\n  <p>Consectetur adipisicing...</p>\n</article>\n```\n\n```\np:first-child {\n  font-size: 1.5em;\n}\n```\n"},{"slug":"html-span","title":"HTML <span> 요소","date":"2021-11-12 15:08:11","coverImage":"/images/cover/html-span.png","category":"HTML_CSS","content":"\n[`<span>`](https://developer.mozilla.org/ko/docs/Web/HTML/Element/span) 은 구문 컨텐츠를 위한 문장을 묶을 때 사용하는 [인라인 요소](https://developer.mozilla.org/ko/docs/Web/HTML/Inline_elements)입니다.\n\n\n<!-- more -->ㄴ\n\n인라인은 전체 문단이 끊기지 않고 하나로 그려집니다. 문서의 흐름에서 줄바꿈을 강제하진 않는거죠.\n반면에 블록 요소는 줄바꿈을 할 수 있습니다. 그럼에도 간단한 문장은 span 만 사용해서 개행을 하고 싶은 경우가 생기죠.\n\n---\n\n##### 개행 문자 & 공백 문자는 어떻게 처리할까?\n\n1. span 요소 1개로만 처리할 때\n\nspan 태그를 1개에 [`white-space`](https://developer.mozilla.org/ko/docs/Web/CSS/white-space) 속성을 이용한다.\n[이스케이프 문자](https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EB%AC%B8%EC%9E%90) 중 `\\n`(개행문자)를 사용해서 줄바꿈이 가능하다.\n\n```js\n.spanStyle {\n    white-space: \"pre-line\"\n}\n<span class=\"spanStyle\">테스트\\n입니다.</span>\n```\n\n2. div 요소 안에 span 으로 처리할 때\n\n```js\n.spanStyle {\n    display: \"block\"\n}\n\n<div>\n    <span class=\"spanStyle\">테스트<span>\n    <span class=\"spanStyle\">입니다<span>\n</div>\n```\n"},{"slug":"create-thumbnail","title":"썸네일 이미지 생성","date":"2021-11-10 17:55:44","coverImage":"/images/cover/create-thumbnail.png","category":"ToyProject","content":"\n블로그엔 썸네일(coverImage) 이미지도 같이 추가해야하는데 매번 그림을 찾는것도 그 그림의 픽셀이 깨지는 것도 번거로워서 글자와 배경만 바뀌는 심플한 이미지로 대체해봤습니다.\n\n아래는 그 썸네일 이미지를 생성할 수 있는 페이지입니다.\n<!-- more -->\n텍스트를 입력하고, 색상을 선택하면 이미지를 다운 받을 수 있고, 색상값은 미리 대중화 된 걸로 설정해두었습니다.\n<!-- \n<iframe src=\"https://jelee603.github.io/code/create-thumbnail.html\" style=\"width: 100vh; height: 30vh\"></iframe> -->\n\n![데모영상](/images/post/thumbnail-demo.gif)\n\n코드는 배경과 텍스트 정렬이 된, 캔버스를 그려두고 저장했을 때, [toDataURL()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL) 이용해서 png 파일를 만들고, 임시로 `<a link>` 만들었다가 지우는 방법으로 다운로드 할 수 있게 만들었습니다.\n\n컬러값 부분은 [이벤트 버블링](https://developer.mozilla.org/ko/docs/Learn/JavaScript/Building_blocks/Events#:~:text=%EB%8B%BF%EC%9D%84%20%EB%95%8C%EA%B9%8C%EC%A7%80%20%EA%B3%84%EC%86%8D%ED%95%A9%EB%8B%88%EB%8B%A4.-,%EB%B2%84%EB%B8%94%EB%A7%81,-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C%EB%8A%94%2C%20%EC%A0%95%ED%99%95%ED%9E%88%20%EB%B0%98%EB%8C%80%EC%9D%98)이 되니 부모 div 에 클릭 이벤트를 걸어두고 버튼마다 [데이터 속성](https://developer.mozilla.org/ko/docs/Learn/HTML/Howto/Use_data_attributes)값으로 버튼을 눌렸을 때, 색상이 바뀔 수 있도록 처리했습니다.\n"},{"slug":"react-migration","title":"React 기존 프로젝트에 타입스크립트 마이그레이션","date":"2021-11-05 00:22:39","coverImage":"/images/cover/react-migration.png","category":"React","content":"\n리액트에서 타입스크립트를 지원하고 있어, 간단하게 설치가 가능하지만 기존 프로젝트에 마이그레이션 방법으로 설치를 해보고자 한다.\n<!-- more -->\n### [React-TypeScript](https://reactjs.org/docs/static-type-checking.html#typescript) 적용 방법\n\n```js\nnpx create-react-app my-app --template typescript\n```\n\n### 기존 리액트 프로젝트에 타입스크립트로 마이그레이션 방법\n\n[Create React App](https://reactjs.org/docs/create-a-new-react-app.html) 의 순서대로 설치한다.\n\n```js\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n리액트를 설치하고 프로젝트에 [타입스크립트를 추가](https://reactjs.org/docs/static-type-checking.html#adding-typescript-to-a-project)로 설치해준다.\n\n```js\nyarn add --D typescript @typescript-eslint/parser\nyarn run tsc --init\n```\n\nindex.js 와 App.js 파일의 확장자는 _.tsx 로 변경해준다.\n나머지 파일은 모두 _.ts 파일로 확장자를 변경해준다.\n\neslint 에서도 타입의 영향을 받지 않으려면, [@typescript-eslint/parser](https://www.npmjs.com/package/@typescript-eslint/parser)를 추가해준다.\n노드 버전이 v12.22.0 이상이 되어야 설치가 가능하다.\n\n```js\nyarn add -D @typescript-eslint/parser\n```\n\n프로젝트를 실행시 발생하는 버그:\n\n> typescript svg 모듈 또는 해당 형식 선언을 찾을 수 없습니다\n>\n> 해결 방법:\n> 커스텀 타입 파일을 생성해주고, tsconfig 파일에 include 에 해당 파일을 추가해준다. [(stack-overflow)](https://stackoverflow.com/questions/44717164/unable-to-import-svg-files-in-typescript)\n>\n> ```js\n> // custom-d.ts\n> declare module \"*.svg\" {\n>  const content: any;\n>  export default content;\n> }\n> ```\n\n> @typescript-eslint/parser' declared in '.eslintrc': Cannot find module 'typescript'\n>\n> 해결 방법:\n> [typescript가 로컬에 설치](https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/FAQ.md#typescript-should-be-installed-locally)되어 있어야한다.\n>\n> ```\n> yarn global add typescript\n> ```\n"},{"slug":"react-vac","title":"React VAC Pattern","date":"2021-11-01 16:57:17","coverImage":"/images/cover/react-vac.png","category":"React","content":"\n#### VAC Pattern 이란?\n\n[View Asset Component](https://github.com/coxcore/react-vac) 라 하며, jsx 파일 내에서 state 와 render 부분을 별도로 구분해서 보다 쉽게 관리하기 위한 패턴방식이다.\n\n<!-- more -->\n마크업, UI, 기능구현으로 이뤄지는 프론트개발에서 업무에 따라 프로젝트 충돌을 피하기 위해 사용한다.\n\n디자인이 필요한 작업 관련 부분은 모두 props 로 넘겨주고, 비지니스 로직이 필요한 기능 구현 부분은 다른 컴포넌트에서 상태관리를 통해 처리해주는 방법이다.\n역할 구분을 확실하게 해서 의존적이지 않아 상당히 편한 패턴이란 생각이 든다.\n"},{"slug":"typescript","title":"TypeScript 스터디","date":"2021-11-01 14:27:36","coverImage":"/images/cover/typescript.png","category":"TypeScript","content":"\n[타입스크립트 핸드북](https://typescript-kr.github.io)을 이용해서 문법과 타입스트립트에 대해 공부합니다. 예제를 확인해보고 싶다면, [TS Playground](https://www.typescriptlang.org/play)에서 확인을 해봅니다.\n<!-- more -->\n## 타입 추론\n\n타입을 명시적으로 정의하기 위한 구문으로 `interface` 를 우선적으로 사용하고 특정 기능이 필요할 때 `type`을 사용합니다.\n\n## 타입 구성\n\n여러가지 타입을 이용해서 새 타입을 작성하기 위한 방법으로 유니언과 제네릭이 있습니다.\n\n유니언은 여러 타입 중 하나라고 선언하는 것입니다. ('|' 을 사용)\n```\n// category.ts\nexport type PostCategory =\n  | 'JavaScript'\n  | 'TypeScript'\n  | 'React';\n\n// page.ts\nimport {PostCategory} from \"./category\";\n\nconst category: PostCategory = 'TypeScript';\nconsole.log(category);\n```\n\n### union type 을 쓰는 이유는 뭘까?🤔\n- js 파일로 트랜스파일링 될 때, 타입은 사라지므로 코드가 줄어든다. \n- enum 보다 선언 방법이 간단하다.\n```\nexport enum PostCategory {\n  JavaScript = 'JavaScript',\n  TypeScript = 'TypeScript'\n  React = 'React'\n}\n\n// page.ts\nimport {PostCategory} from \"./category\";\n\nconst category: PostCategory = PostCategory.TypeScript;\nconsole.log(category);\n```\n\n제네릭은 타입에 변수를 제공하는 방법입니다. 제네릭이 있는 배열은 배열 안의 값을 설명할 수 있습니다.\n\n```js\ntype ObjectWithArray = Array<{ name: string }>;\n```\n\n## 구조적 타입 시스템\n\n두 객체가 같은 형태를 가지면 같은 것으로 간주하는 것을 말합니다.\n\n```js\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction printPoint(p: Point) {\n  console.log(`points ${p.x}, ${p.y}`);\n}\n\nconst point3 = { x: 12, y: 25, z: 88 };\nprintPoint(point3); // points 12, 25\n```\n\n## 타입 단언 (Type assertions)\n\n어떤 엔티티의 실제 타입이 현재 타입보다 더 구체적일 때 사용합니다. 타입 단언은 컴파일러에게 \"날 믿어, 난 내가 뭘 하고 있는지 알아\"라고 말해주는 방법입니다. 이는 형 변환과 유사하지만, 다른 특별한 검사를 하거나 데이터를 재구성 하지는 않습니다. jsx 에서는 `as`-스타일의 단언만 허용합니다.\n\n```js\nlet someValue: any = \"this is a string\";\nlet strLength: number = (someValue as string).length;\n\nconsole.log(strLength);\n```\n\n## 인터페이스\n\n타입스크립트의 핵심 원칙은 타입 검사가 `값의 형태`에 초점을 맞추고 있다는 것입니다. 이를 덕 타이핑이라 하는데 인터페이스는 이런 타입들의 이름을 짓는 역할을 합니다.\n\n옵셔널 프로퍼티는 프로퍼티 이름 끝에 `?`를 붙여 표시합니다. 인터페이스에 속하지 않은 프로퍼티를 선택적으로 사용하도록 해줍니다.\n\n읽기 전용 프로퍼티는 프로퍼티 이름 앞에 `readonly`를 넣어서 지정합니다.\n\n## 함수\n\n`기본-초기화 매개변수` 기본값을 함수에 지정해 둘 수 있습니다.\n나머지 매개변수로 인자들을 모을 수도 있습니다.\n\n```js\nfunction buildName(firstName = 'Lee', ...restOfName: string[]) {\n  return `${firstName} ${restName.join(' ')}`;\n}\n\nlet leeName = buildName(undefined, 'Jieun', 'Joseph', 'Jerry');\nconsole.log(leeName); // Lee Jieun Joseph Jerry\n```\n\n## 클래스\n\n타입스크립트 3.8 이후 비공개 필드를 만들기 위해 자바스크립트의 `#` 문법을 사용할 수 있습니다.\n\n## 참고\n\n- https://typescript-kr.github.io\n"},{"slug":"vanilla","title":"Vanilla JS 다뤄보기","date":"2021-10-30 23:20:00","coverImage":"/images/cover/vanilla.png","category":"JavaScript","content":"\n일반적으로 프레임워크를 사용하지 않고 자바스크립트를 다루는 방법은 있습니다.\n너무 프레임워크에 익숙해져 그 방법을 잊어버리지 않게 적습니다.\n\n<!-- more -->\n먼저 html 파일에서 js를 로드를 합니다.\n\n```js\n//html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Document</title>\n    </head>\n    <body>\n      <script type=\"text/javascript\" src=\"[file].js\" />\n    </body>\n</html>\n```\n\ncss 스크립트는 <head> 태그 사이에 작성합니다.\n\n```js\n<head>\n  <style lang=\"text/css\"></style>\n</head>\n```\n\n간단하게 HTML에서 자바스크립트를 사용하게 되었습니다.\n\n그런데 모듈화라는 개념이 생기면서,\n[`import`](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/import) 를 통해 스크립트 모듈 파일을 가져오게 되었습니다.\n\n`export`로 파일을 내보냈을 경우에 html 에서는 위와 같은 방법으로는 오류를 만나게 됩니다.\n\n> <span style=\"color: red\">Uncaught SyntaxError: Cannot use import statement outside a module</span>\n>\n> 해결 방법:\n>\n> ```js\n> <body>\n>   <script type=\"module\" src=\"[file].js\" />\n> </body>\n> ```\n\n`script type` 을 모듈이라 명시해주면서 문제를 해결할 수 있습니다.\n이렇게 간단한 방법도 매번 프레임워크의 렌더함수만 작성하다보면 잊어버리게 됩니다.\n\n다음은 만들어진 여러개의 모듈파일을 한번에 압축해주는 방법인 웹팩으로 HTML 파일에서 로드하는 방법을 적어봅니다.\n\n[웹팩](https://webpack.js.org/guides/getting-started)을 설치하고, 프로젝트 구조를 다음과 같이 추가해서 세팅해줍니다.\n\n```\nnpm init -y\nnpm install webpack webpack-cli --save-dev\n```\n\n##### project 구조\n\n```js\nwebpack-demo\n |- /dist\n+   |- index.html\n- |- index.html\n+ |- /src\n+    |- index.js\n+ |- webpack.config.js\n |- package.json\n```\n\n웹팩 설정 파일에서 entry 와 output 을 설정하면, entry 에 설정된 파일을 로드해서 output 의 번들파일을 생성해줍니다. `index.js` 모듈 파일을 호출하도록 해줍니다.\n\n```js\n// src/index.js\n\nimport file from '[file].js';\n```\n\n```js\n// webpack.config.js\n\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n};\n```\n\n패키지 설정파일에 웹팩을 실행할 스크립트를 작성해줍니다.\n\n```js\n// package.json\n\n{\n   \"scripts\": {\n    \"build\": \"webpack --mode development\"\n   }\n}\n```\n\n`npm run build` 실행하면, 'dist' 경로에 'main.js' 라는 파일이 생성됩니다.\nHTML 파일에서 생성된 파일을 로드하도록 추가해주면 됩니다.\n\n```js\n// dist/index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <script src=\"./main.js\"></script>\n</body>\n</html>\n```\n"},{"slug":"yarn","title":"Yarn","date":"2021-10-17 15:31:01","coverImage":"/images/cover/yarn.png","category":"JavaScript","content":"#### 전역에 설치된 모듈을 확인하는 방법:\n\n<!-- more -->\n```\nyarn global list\n```\n"},{"slug":"port","title":"Mac에서 Port 종료하기","date":"2021-10-10 23:31:07","coverImage":"/images/cover/port.png","category":"Tip","content":"\n#### 점유중인 Port 종료하는 방법:\n\n```js\n// for Mac\n$ lsof -i :{PORT}\n\n$ kill -9 {PID}\n```\n\n점유하고 있는 포트번호의 PID(Porcess ID) 를 찾아서 kill 로직을 써준다.\n<!-- more -->\n\n```js\nlsof -i :19000\n\nCOMMAND  PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME\nnode    6284 jieun   39u  IPv6 0x18419eaeae92a123      0t0  TCP *:igrid (LISTEN)\n\nkill -9 6284\n```\n"},{"slug":"react-condition","title":"React 조건부 렌더링","date":"2021-10-03 18:38:26","coverImage":"/images/cover/react-condition.png","category":"React","content":"\n[조건부 렌더링](https://ko.reactjs.org/docs/conditional-rendering.html)\n<!-- more -->\n```js\nrender() {\nconst isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      {isLoggedIn ? (\n        <LogoutButton onClick={this.handleLogoutClick} />\n      ) : (\n        <LoginButton onClick={this.handleLoginClick} />\n      )}\n    </div>\n  );\n}\n```\n\n참고: https://reactjs-kr.firebaseapp.com/docs/conditional-rendering.html\n\njsx 에서는 [map](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map) 메서드를 사용합니다. 배열의 모든 요소를 순회하면서 결과값으로 새로운 배열을 반환할 수 있는 함수입니다.\n\n반복문\n\n```js\nconst todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n```\n\n참고:\nhttps://ko.reactjs.org/docs/lists-and-keys.html\n\n#### append dynamic component\n\nhttps://stackoverflow.com/questions/51404335/append-a-react-component-in-another-on-button-click\n"},{"slug":"load-map","title":"로드맵","date":"2021-09-24 14:39:08","coverImage":"/images/cover/default.png","category":"ToyProject","content":"## 개발자의 마음가짐\n\n> 요구 사항이 변할 때에도, 고객의 기대에 맞춰 동작하게 만들어 줄 준비가 되어있어야하고 그에 맞춰 프로그램을 수정하는 것은 개발자의 몫입니다.  - 세상을 설계하는 객체지향 방법론 \n- `Code: 프로그래밍 프로그래머스`\n- `실용주의 프로그래머`\n- 동료 개발자와 편하게 의사소통을 하기 위해 ESLint 와 Prettier 로 코딩 스타일을 맞춰둔다. \n\n- ESLint\n  - 자바스크립트 코드를 에러가 덜 나는 방향으로 작성하도록 도와주는 문법 보조 도구 \n  - var -> const 로 변경해주거나 띄어쓰기 맞춰준다. \n  - TSLint가 있었지만, 몇가지 [아키텍쳐 문제](https://github.com/Microsoft/typescript/issues/29288#:~:text=Back%20to%20top-,Linting,-Semantic%20rules%20in)가 있어서 현재는 ESLint를 편집해서 사용한다.  \n- Prettier \n  - 팀 단위 코딩 컨벤션을 맞추어 개인화해서 사용합니다. \n  - 옵션 설정해서 사용합니다.(1라인의 문자길이, 세미콜론, 탭 기타 포매팅 설정)\n\n---\n### 자바스크립트\n\n- 원시레퍼 타입, 참조 타입\n- 변수/스코프/메모리\n  - 클로저, 재귀\n- [디자인 패턴](#디자인-패턴) `프론트엔드 개발자를 위한 자바스크립트 프로그래밍` [(예제코드)](https://github.com/jelee603/study/tree/main/pattern)\n  - [팩터리 패턴](#팩터리-패턴)\n  - [생성자 패턴](#생성자-패턴)\n  - [프로토타입 패턴](#프로토타입-패턴)\n  - [동적 생성자](#동적-생성자)\n  - [기생 생성자](#기생-생성자)\n  - [방탄 생성자](#방탄-생성자)\n\n- EcmaScript 6\n  - [Destructuring](#Destructuring)\n  - [Async & Await](#Async-&-Await)\n  - proxy, map, set\n  - 구조체, 배열\n  - 스트릭트 모드\n  - 배열 메서드: [reduce](#reduce), map, filter, forEach, every, some\n- [TypeScript](#TypeScript)\n- [Babel](#Babel)\n\n## Destructuring\n객체와 배열의 구조를 분해해서 객체의 속성을 바로 꺼내서 쓸 수 있는 방식입니다.\n자바스크립트 차원에서 편하고 쉽게 접근할 수 있습니다.\n```\nvar {a, b, c} = obj;\n```\n\n## Async & Await\n\n비동기처리 문법, 자바스크립트의 콜백 문제를 Promise 가 해결하고 Promise 의 문제를 해결한 것이 Async & Await 입니다.\n\n```\nasync function fetchData() {\n  await getList();\n}\n```\n함수 앞에 async 를 걸어주고, 비동기 처리를 한 promise 객체를 반환하는 부분에 await 를 걸어준다. \n\n## 배열 메서드\n#### reduce [(링크)](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n배열의 각각의 아이템들을 순회하면서 이전 연산 값을 누적하면서 계속 연산해서 값을 추출하는 함수\n연산은 콜백\nacc: 누적치, current: 순회하는 아이템\n\n## TypeScript\n\n맵드 타입\n기존에 존재하는 타입을 맵드 타입을 문법을 이용해서 타입으로 변환해내는 것.\n맵 함수처럼 사용 가능합니다.\n\n기존 프로젝트를 타입스크립트로 적용할 때 주의점\n\n- 기능 변경과 동시에 타입스크립트 전환을 하지 말것\n- 테스트 커버리지가 낮은 프로젝트엔 함부로 타입스크립트를 적용하지 말것\n- 처음부터 타입을 엄격하게 지정하지 말것 (컴파일을 돌렸을 때 에러가 안나는 수준으로 일단 만들고 점진적으로 타입을 구체화할 수 있게 작업합니다.)\n\n## Babel\n\n> [공식문서](https://babeljs.io/docs/en/)\n> 최신버전의 자바스크립트 파일을 구버전 브라우저에서 인식할 수 있게 트랜스파일해주는 역할을 한다. \n> 타입스크립트의 프리셋(플러그인의 집합), 옵션들의 집합을 따로 설치해줘야한다. 바벨쪽에서의 라이러리를 제공한다. \n---\n## 디자인 패턴\n\n> 문제의식을 먼저 형성하게 하지 않고 답을 먼저 보여준 뒤 그걸 어디에 써먹을지를 먼저 알려주면,독자는 '어린아이가 망치를 들고 있는 오류'에 빠질 것이다.\n\n**팩터리 패턴**\n\n특정 인터페이스의 객체를 생성하는 과정을 함수로 추상화하는 패턴입니다. 코드 중복 해결됩니다.\n\n> 생성한 객체가 어떤 타입인지 알 수 없다는 단점\n\n**생성자 패턴**\n\n커스텀 생성자를 만들어서 원하는 타입의 객체에\n필요한 프로퍼티와 메서드를 직접 정의할 수 있습니다.\n\n> 인스턴스마다 메서드가 생성된다는 단점\n\n**프로토타입 패턴**\n\n프로퍼티와 메서드는 객체 인스턴스 전체에서 공유됩니다.\nex) 네이티브 참조 타입이 프로토타입 패턴으로 구현되어있습니다. (Object, Array, String)\n\n> 프로퍼티가 참조값을 포함한 경우, 인스턴스 프로퍼티에 값을 할당하면, 프로퍼티가 prototype 프로퍼티를 가리킬 수 있습니다.\n\n1. constructor 프로퍼티를 명시적으로 생성하고 값이 담기도록 강제해서 사용 가능 합니다.\n2. EcmaScript 5판에 정의된, [[enumerable]]생성자를 재설정하면 자동으로 true 로 바뀌므로 false 바꿔줘서 사용합니다.\n3. [[Prototype]] 포인터는 생성자가 호출될 때 할당되므로 프로토타입을 다른 객체로 바꾸면 생성자와 원래 프로토타입 사이의 연결이 끊어집니다.\n   먼저 빈객체를 생성하면 이 체이닝을 끊을 수 있습니다.\n\n**동적 생성자**\n\n모든 정보를 생성자 내부에서 캡슐화하고 필요한 경우 생성자 내부에서 프로토타입을 초기화하여 생성자와 프로토타입을 모두 쓸 수 있는 장점이 있습니다.\n\n**기생 생성자**\n\n보통 다른 패턴이 실패할 때 폴백으로 씁니다.\n일반 생성자처럼 보이지만, 다른 객체를 생성하고 반환하는 동작을 래퍼 생성자로 감싸는 것을 말합니다.\n\n**방탄 생성자**\n\n자바스트립트에서는 공용 프로퍼티가 없고 메서드가 this를 참조하지 않는 객체를 방탄 객체라 하고, 이 패턴은 데이터를 써드파티 애플리케이션으로부터 보호하는데 가장 잘 어울립니다.\n\n---\n## 웹 API\n\n[웹을 만들 때 사용하는 인터페이스 목록](https://developer.mozilla.org/ko/docs/Web/API)\n\n\n- <b>DOM</b>\n[DOM](https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model)은 메모리에 웹페이지 문서 구조를 표현합니다. HTML, XML 문서의 프로그래밍 인터페이스입니다. \n웹 페이지는 일종의 문서(Document) 입니다. \n문서를 논리 트리로 표현하고, 트리의 각 브랜치는 노드에서 끝나며 각 노드는 객체를 갖습니다. \n\n  - 노드 계층 구조\n[Dom 레벨1 코어](https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model/Using_the_W3C_DOM_Level_1_Core): Document 콘텐츠 트리를 변경하기 위한 강력한 객체형 모델입니다. 웹스크립트의 초석이기도 하며, 주요 브라우저에서 지원합니다.  \n\n  - [선택자 API](https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model/Locating_DOM_elements_using_selectors)\n  Document, DocumentFragment, Element 인터페이스를 구현하는 모든 객체에 \n  querySelector 와 querySelectorAll 메서드를 추가되어있습니다. 이 메서드들은 엘리먼트 노드에 접근해서 특정 노드를 선택해서 갖고 올 수 있습니다.\n\n- <b>Window 인터페이스</b>\n\n  [Window](https://developer.mozilla.org/ko/docs/Web/API/Window)는 DOM 문서를 담는 창을 나타냅니다. \n  document 속성으로 DOM을 나타냅니다. \n  자바스크립트 코드에서는 노출된 전역 변수, window는 현재 스크립트가 작동중인 창을 나타냅니다. \n<br/>\n\n- <b>Document 인터페이스</b>\n  브라우저가 불러온 웹페이지를 나타내며 페이지의 진입점 역할을 합니다. \n<br/>\n\n- <b>Storage</b>\n [웹 스토리지](https://developer.mozilla.org/ko/docs/Web/API/Web_Storage_API)는 브라우저에서 키/값 쌍을 쿠키보다 훨씬 직관적으로 저장할 수 있습니다. \n 특징: 세선과 로컬 스토리지 2가지 있습니다.\n\n  |세션 스토리지|로컬 스토리지|\n  |--|--|\n  |브라우저가 열려있는 동안 제공| 유효기간 없이 데이터를 제공|\n  |데이터를 절대 서버로 전송하지 않음| 브라우저 캐시 또는 저장 데이터를 삭제해야 함|\n  |저장공간(최대 5MB) | 쿠키나 세션보다 저장공간이 크다|\n\n- <b>location</b>\n[Location](https://developer.mozilla.org/ko/docs/Web/API/Location)인터페이스는 객체가 연결된 장소(URL)을 나타냅니다. 변경햐면, 연결된 객체도 변경됩니다. \n<br/>\n\n- <b>history</b>\n window 객체는 [history](https://developer.mozilla.org/ko/docs/Web/API/History_API) 객체를 통해 브라우저 세션 기록에 접근할 수 있는 방법을 가집니다. 방문 기록 스택의 콘텐츠를 조작할 수 있습니다. \n<br/>\n\n## 웹 API 이벤트\n\n- 이벤트 흐름\n  - 캡쳐링\n  - 버블링\n\n- 이벤트 핸들러\n  - DOM 레벨 0 핸들러\n  - DOM 레벨 2 핸들러\n  - 크로스 브라우징 핸들러\n\n- 이벤트 위임\n\n---\n## HTML\n\n[\"하이퍼텍스트마크업 언어\"](https://developer.mozilla.org/ko/docs/Glossary/HTML)는 웹페이지의 구조를 지정하는 기술적인 언어입니다.\n- [HTML5](https://ko.wikipedia.org/wiki/HTML5)\nDOM 레벨 2의 차기 표준안입니다. \n  - 구역을 나누는 구조적인 요소가 추가됨 (header, nav, article, section, aside, footer)\n  - 멀티 미디어 요소가 추가됨 (플러그인 없이 오디오와 비디오 재생이 가능)\n  - canvas\n  - 문서 선언 - <!DOCTYPE html>으로 간소화\n  - 웹 접근성 향상을 위해 사용을 지양하는 태그들 - frame, frameset, noframes\n\n---\n## CSS\n\n- [poiem](https://poiemaweb.com/css3-syntax)\n\n---\n## HTTP\n\n[하이퍼텍스트 전송 규약(Hypertext Transfer Protocol)](https://developer.mozilla.org/ko/docs/Web/HTTP)은 웹 브라우저와 웹 서버간의 데이터가 교환되는 통신 규약입니다.\n\n- 보안, HTTP `Real World HTTP`\n\n- XSS 브라우저 보호\n  \"XSS(Cross-Site Scripting)\"는 권한 없는 사용자가 웹 사이트에 스크립트를 삽입하는 공격 기법입니다. \n  - 이 공격을 방어하기 위한 방법을 찾아보면, 특수문자로 치환 혹은 문자열 p태그로 치환해서 스크립트가 실행되지 못하도록 하는 방법들이 있다. \n  - 공격을 감지했을 때, 페이지 로드를 중지시킬 수 있습니다. [X-XSS-Protection](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/X-XSS-Protection)\n\n- [HTTP Request](https://developer.mozilla.org/ko/docs/Web/HTTP/Messages)\n  클라이언트가 서버로 전달해서 서버로 액션이 일어나게끔 하는 메시지입니다. \n\n- [CORS](https://developer.mozilla.org/ko/docs/Web/HTTP/CORS) 정책\n  다른 출처에 접근할 수 있도록 권한을 부여하는 정책입니다. 웹서버에서 옵션을 통해 on/off 가 가능힙니다. \n\n- [Axios](https://axios-http.com/docs/intro)\n  브라우저와 Node.js 를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리입니다. \n\n- [Restful API](https://ko.wikipedia.org/wiki/REST) 통신 절차\n  \"Representational State Transfer\"은 웹를 사용할 때 제약 조건들을 정의하는 소프트웨어 아키텍처 스타일입니다. HTTP URI 를 통해 자원을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD 를 제공합니다. [JSON](https://ko.wikipedia.org/wiki/JSON), XML, TEXT, RSS 등 여러 형태의 Representation으로 나타내어 데이터를 주고 받는 것이 일반적입니다. \n\n    - [AJAX](https://ko.wikipedia.org/wiki/Ajax)\n    \"Asynchronous JavaScript and XML\" 비동기적인 어플리케이션 제작을 위한 웹 개발 기법입니다.\n    1. 페이지 이동없이 고속으로 화면을 전환할 수 있다.\n    2. 서버 처리를 기다리지 않고, 비동기 요청이 가능하다.\n    3. 수신하는 데이터 양을 줄일 수 있고, 클라이언트에게 처리를 위임할 수도 있다.\n    4. 플러그인 없이도 인터렉티브한 웹페이지 구현할 수 있다.\n   \n    - [JSONP](https://ko.wikipedia.org/wiki/JSONP)\n     각기 다른 도메인에 상주하는 서버로부터 데이터를 요청하기 위해 사용되었는데 상호 비보안 문제로 CORS 로 대체 되고 있습니다. \n\n---\n## 알고리즘\n\n- 그래프\n- 트리\n- 정렬 (퀵, 병합, 힙)\n- 이진 검색\n- 설계 기법 `알고리즘 트레이닝`\n\n\n---\n## 리팩토링\n\n> 켄트 백이 말한, 코드의 소리를 듣는 것은 코드가 원하는 것에 귀를 기울이는 것을 말합니다. 코드는 단순해지려는 욕망이 있습니다. 그걸 이뤄주는 것이 프로그래머입니다.<br/>\n> <리팩토링 자바스크립트 - 에반 버차드>\n\n- 배열 객체 대안 `리팩토링 자바스크립트`\n- 함수 추출\n- 전역 객체 API 간소화\n- OOP (계층구조, 상속구조)\n  - 디자인 원리 `Head First`\n- FP (함수형)\n  - 함수 커링, 함수 바인딩, 메모제이션\n\n\n---\n## 그래픽\n\n\n- 애니메이션\n  - 캔버스: 2D Context\n  - window: requestAnimation\n\n---\n## TDD\n\n- 테스트-주도 개발 `테스트 주도 개발로 배우는 객체지향 설계` <br/>\n  도달해야하는 목적지를 테스트라는 안정장치를 통해 좀 더 견고한 방법으로 도달할 수 있게 해주는 설계 기법이다.\n- [단위 테스트](#단위-테스트)\n- 비동기 코드 테스트\n\n## 단위 테스트\n\nTDD 란, 테스트가 설계를 '주도'하게 하는데 있어, 기능과 성능처럼 겉으로 드러나는 품질 속성을 검증하는 활동을 하는 것을 말합니다.\n\n이 중에서 가장 작은 기능을 테스트 하는 것을 단위 테스트라 합니다.\n\n\n---\n## 성능\n\n\n- 메모리 성능\n- 웹 워커\n- 웹 소켓\n\n"},{"slug":"blog-hexo","title":"Hexo를 이용한 github 블로그 만들기","date":"2021-09-24","coverImage":"/images/cover/blog-hexo.png","category":"ToyProject","content":"\n> Hexo 프레임워크를 이용해 블로그를 작성하고, github에 자동 deploy 까지\n<!-- more -->\n\n## 설치하기\n\n```\nnpm install hexo-cli -g\nnpm run server\n```\n\nhttps://hexo.io/\nhttps://github.com/ppoffice/hexo-theme-hueman\n\n## github 연동하기\n\n**Project > Settigns > GitHub Pages**\nBranch: main\n\nhexo deploy 를 하면, 마크다운 문서를 파싱하면서 배포파일을 만들어주는데 이 파일이 실제 웹 브라우저에서 보여져야할 파일이므로 이 역할을 기본 브랜치(main)에서 할 수 있도록 main 으로 적용했다.\n블로그 작성은 develop 브랜치를 둔다.\n\n**Project > Settings > Secrets > Actions**\n\nHEXO_DEPLOY_TOKEN 이름으로 토큰을 등록한다.\n여기서의 토큰은 아래에서 받은 액세스 토큰을 사용한다.\n\n**Account Settings > Developer settings > Personal access tokens**\n\n기간을 설정하면, 새로운 토큰을 발급하는데 이 발급된 토큰을 등록해준다.\n\n![토큰 생성(1)](/images/post/token1.png)\n\n![토큰 생성(2)](/images/post/token2.png)\n\n참고: https://hyeo-noo.tistory.com/184\n\n\\***\\*주기적으로 Actions 토큰을 업데이트 해준다.** <br/> \\***\\*Mac 에서는 cmd + space > keychain 접근에서 github.com 은 모두 삭제해준 후에 IDE에서 토큰을 재등록해준다.**\n\n## github deploy 등록하기\n\n**Project > Actions**\nworkflow 를 자동으로 생성할 수 있게 많이 제공하지만, 일단 'and set up a workflow yourself' 를 클릭해서 개별 스크립트를 작성해준다.\n\ndevelop 디렉토리에 push 되었을 때, deploy 할 수 있게 만든다.\n`GITHUB_TOKEN`은 위에서 만든 HEXO_DEPLOY_TOKEN 변수를 적용해준다.\n\n```\n// develop.yml\n\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - name: Checkout source\n        uses: actions/checkout@v2\n      - name: Use Node.js 16\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16\n          cache: 'npm'\n      - name: Before install\n        run: npm i -g hexo\n      - name: Before script\n        env:\n          GITHUB_TOKEN: ${{ secrets.HEXO_DEPLOY_TOKEN  }}\n        run: |\n          git config --global user.email [user_email]\n          git config --global user.name [user_name]]\n          sed -i \"s/__GITHUB_TOKEN__/${GITHUB_TOKEN}/\" _config.yml\n      - name: NPM install\n        run: |\n          npm install\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo generate\n          hexo deploy\n```\n\n참고: https://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/\n\nActions 실행되는 스크립트는 config 파일의 deploy 변수를 제대로 걸어주지 못하면, 아래와 같은 오류를 만나게 된다.\n\n> fatal: could not read Password for 'https://jelee603@github.com': No such device or address\n>\n> 해결 방법:\n> 등록된 토큰을 확인하고, 아래와 같이 변수를 추가해준다.\n>\n> ```js\n> // _config.yml\n> deploy: type: git;\n> //__GITHUB_TOKEN__@github.com/[user_name]/[user_name].github.io.git\n> repo: https: branch: main;\n> ```\n\n위와 같이 작성하고, push 를 하게 되면, build 가 시작되고 정상적으로 완료되면, 블로그에 반영이 된다!\n\n## Generate 포매터 변경\n\n`scaffolds > post.md`에 필요한 포맷을 넣어두면 파일이 생성될 때, 자동으로 들어간다. \n\n기본 포맷은 날짜형태가 중괄호 문법으로 들어가 있는데, 자동완성으로 코드가 변경되면 이 포맷이 깨지게 된다. \n```\n// 원본 \ntitle: {{ title }}\ndate: {{ date }}\n\n// 자동 변경\ntitle: { { title } }\ndate: { { date } }\n```\n\n이렇게 저장되는 것을 방지하려면, 마크다운 파일의 경우에만 자동저장 기능을 꺼준다. \n\n```\n//settings.json\n\n\"[markdown]\": {\n    \"editor.formatOnSave\": false,\n}\n```\n## 글쓰기 (마크다운)\n\n- post 파일 생성 방법\n```\n// new post\nhexo new [layout] <title>\nhexo server\nex) hexo new <title>\n\n// draft\nhexo new draft <title>\nhexo server --draft\n```\n\n- 마크다운 하이퍼링크 연결\n알파벳은 반드시 소문자만 가능\n띄어쓰기는 -(하이픈)으로 구분\n\n## 참고\n\n- https://hexo.io/ko/docs/writing.html\n- https://www.w3schools.io/file/markdown-cheatsheet\n- https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4#%EB%AC%B8%EB%B2%95\n- https://young-cow.tistory.com/21\n"},{"slug":"good-image","title":"good-image","date":"2021-09-13 12:59:37","coverImage":"/images/cover/study.png","content":"\n![image](/images/study.png)\nHello World!!\n"},{"slug":"es6","title":"ES6 문법","date":"2020-02-04","coverImage":"/images/cover/es6.png","category":"JavaScript","content":"\n#### 1.import/export\n\n클래스를 사용할 수 있게 되면서 `export default 클래스명`으로 출력하는 경우가 많아졌다.\n기능과 역할에 맞게 분리해서 사용하는 측면에서도 좋지만,\n기본값을 사용할 경우에 오버라이딩해서 쓸 수 있게 만들면 좋을거 같아 사용한다.\n\n그래서 함수도 Util 의 기능으로 만들어서 쓸려고 해보니, 문제가 발생했다.\n<!-- more -->\n\n`export default {함수명}`으로 사용을 해준다. 그리고 `import 파일명 from 파일위치` 로 지정을해두면\n`파일명.함수명` 으로 접근해서 사용을 할 수 있다.\n메서드가 아닌 함수를 개별로 호출해서 쓰고 싶을때 사용할 수 있을 거 같다.\n\n#### 2. spread\n\nSpread 연산은 전개연산자로 Object 를 풀어서 나타낼 수가 있게 되었다.\n덕분에 뒤에 있는 값을 덮어씌워서 merge 하는데 자주 사용하는데,\n중첩된 Object 의 경우엔 같은 키만 merge 해주고 싶은 경우가 발생한다.\n그래서 한번 더 연산을 해주면 된다는 글을 참고해본다.\n\n참고: https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties\n\n```js\nconst source = { a: 2, b: 3, c: { d: 2, d2: 1 } };\nconst target = {\n  c: { d: 4 },\n};\n\nconst result = { ...source, ...target };\nconsole.log(result); // {a:2, b:3, c: {d:4}}\n\nconst result2 = { ...source, ...target, c: { ...source.c, ...target.c } };\nconsole.log(result2); // {a: 2, b: 3, c: {d: 4, d2: 1}}\n```\n\n#### 최대값, 최소값\n\nES6 문법의 Spread 연산자를 사용할 수 있게 되면서 최대값과 최소값을 간편하게 계산할 수 있게 되었다.\nSpread 연산자(...)는 배열을 여러개의 인자 값이나 (키-값)객체로 확장할 수 있다.\n\n```js\nconst test = [190, 10, 16, 20, 60, 30, 40, 20, 60, 15, 50, 22, 8];\n\nconsole.log(Math.max(...test)); // 190\nconsole.log(Math.min(...test)); // 8\n```\n"},{"slug":"sass","title":"Sass(SCSS) 알아가기","date":"2020-01-22","coverImage":"/images/cover/sass.png","category":"HTML_CSS","content":"\n> sass 사용하면, 변수로 사용한 상태에서 스타일을 재사용할 수 있다.\n\n<!-- more -->\n\n```js\nyarn add node-sass --save\n```\n\n### 1. &부모 요소 참조, $변수 사용\n\n- 부모요소의 참조가 필요한 경우엔 `&` 를 사용한다.\n- 가상 클래스의 선택자를 지정하는 경우에 참조가 필요\n\n```html\n.myAnchor { color: green; &:hover { text-decoration: underline; } }\n```\n\n### 2. Nesting\n\n- nesting 프로퍼티에도 사용한다.\n\n```html\n.test { font: { size: 30em; weight: bold; } }\n```\n\n### 3. Import\n\n- sass 분할된 파일(partial) 은 언더스코어(\\_\\_) 를 붙여 사용한다.\n- 파티셜 파일은 파일 접두어를 생략할 수 있다.\n\n```html\n// __vars.scss $width: 960px; // __header.scss #header { width: $width; } //\n__vars.scss 파일을 호출할때 // style.css @import \"vars\" @import \"header\"\n```\n"},{"slug":"vscode","title":"VS Code 활용하기","date":"2020-01-09","coverImage":"/images/cover/vscode.png","category":"Tip","content":"\n유용한 단축키를 정리합니다.\n\n## 이모지 단축키\n1. 편집 > 이모티콘 \n2. Control-Command-스페이스\n\n\n## VSCode 단축키 (Mac 단축키)\n\n<!-- more -->\n\n- `cmd + d` (`ctrl` + `d`) : 같은 파일내 단어 찾기\n- `option + cmd + i` (`F12`) : 크롬 디버그\n- `ctrl + space` : 파일에서 프로퍼티 자동완성\n- `cmd + shift + p` : [페이지 셋업](#3.페이지-셋업에서-설정하기)\n- `cmd + p` : 파일 찾기\n- `cmd + j` : 터미널 창 열기\n\n## Snippets 활용\n:`html:5` html 자동완성\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Document</title>\n  </head>\n  <body></body>\n</html>\n```\n\n  :`rfc` 리액트 템플릿 자동완성\n\n![자동완성 템플릿](/images/post/vscode_snippets_1.png)\n\n\n## Snippets 만들기\nCode > 기본설정 > 사용자 코드조각 구성\n\n마크다운 문서에 필요한 기본 포맷을 아래와 같이 만들어둔다. \n\n```markdown\n  \"Print to console\": {\n    \"prefix\": \"mb\",\n    \"body\": [\n      \"---\",\n      \"title: ${0}\",\n      \"date: $CURRENT_YEAR.$CURRENT_MONTH.$CURRENT_DATE\",\n      \"category: ${2}\",\n      \"coverImage: 'images/cover/${3}'\",\n      \"slug: ${4}\",\n      \"---\"\n    ],\n    \"description\": \"markdown blog\"\n  }\n```\n- `mb` + Control-스페이스 \n\n![자동완성 템플릿](/images/post/vscode_snippets_2.png)\n\n## 페이지 셋업에서 설정하기\n: json 파일열기 => open settings (json)\n\n```\n// settings.json\n{\n // set prettier\n \"editor.formatOnSave\": true,\n \"[javascript]\": {\n   \"editor.formatOnSave\": true\n },\n \"editor.codeActionsOnSave\": {\n   // For ESLint\n   \"source.fixAll.eslint\": false\n },\n \"files.autoSave\": \"onFocusChange\",\n \"editor.fontSize\": 13,\n\n // set eslint\n \"eslint.alwaysShowStatus\": true,\n \"eslint.workingDirectories\": [{ \"mode\": \"auto\" }],\n \"eslint.validate\": [\"javascript\", \"typescript\"]\n}\n```\n\n## 커맨드 단축키 지정하기\n- 터미널에서 `code .` 로 프로젝트를 열기 => Shell Command\n- 프로젝트 매니저에 추가하기 => Project Manager: Save Project\n\n\n"},{"slug":"storage","title":"Local & Session Storage","date":"2019-11-01","coverImage":"/images/cover/storage.png","category":"HTML_CSS","content":"\n#### 로컬과 세션 스토리지의 차이점?\n\n로컬 스토리지는 사용자가 지우지 않으면 브라우저에 계속 남아있다. (지속적으로 필요한 데이터)\n세션 스토리지는 윈도우나 브라우저 탭을 닫을 경우 제거된다. (일회성 데이터)\n<!-- more -->\n세션 이전에 쿠키가 있었고, 쿠키는 만료 기한이 있는 key-value 저장소이다.\n(참고) [zerocho 블로그][zerocho]\n\n- 쿠키의 용량: 4KB\n\n  - 매 서버 요청마다 서버로 쿠키가 같이 전송된다.\n  - HTTP 요청의 특성상, 요청 대상자를 알기 위해 서버에서는 쿠키를 읽어 파악한다.\n\n- 스토리지 용량: 5MB~ 10MB\n\n  - 도메인 별 용량 제한이 있다. (프로토콜, 호스트, 포트가 같으면 스토리지를 공유)\n  - 로컬 스토리지: 사용자의 설정(보안에 민감하지 않은)이나 유저 커스텀을 위한 데이터를 저장한다.\n  - 세션 스토리지: 데이터가 영구적으로 보관되지 않는다. (window.sessionStorage)\n\n- IndexDB 용량: 50MB\n\n[zerocho]: https://www.zerocho.com/category/HTML&DOM/post/5918515b1ed39f00182d3048\n"},{"slug":"testing-vue","title":"Vue.js 2.x 테스트 적용기","date":"2019-10-17","coverImage":"/images/cover/testing-vue.png","category":"Vue","content":"\n### 라이브러리 설치하면서 만나게 되었던 버그들\n\nvue-cli 3.x 를 받게되면 자동으로 test 를 할 수 있는 환경이 구축되는데 <span style=\"text-decoration: line-through\">프로젝트가 그렇게 쉽게 올라가는 건 아니니</span> 2019년도에 작성한 블로그이니, 지금은 3.0 을 사용하면 된다.\n\n<!-- more -->\n기존 프로젝트를 위한 2.x 에 테스트 작업환경을 추가를 해보았다. 일단은 가장 많이 사용하는 jest 를 설정해보았다.\n[Vue Test Util](https://vue-test-utils.vuejs.org) 을 참고하고 [joshua1988](https://joshua1988.github.io/vue-camp/testing/getting-started.html#%EB%B7%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C)님 블로그르 참고하면서 설치해보았다.\n\n```js\nnpm install --save-dev jest @vue/test-utils vue-jest babel-jest\n```\n\n설치하고 babelrc 파일을 추가하는데 babel 스펙이 변하면서 다음과 같은 오류를 만나게 된다.\n\n> Cannot find moudle 'babel-preset-env' - Div you mean \"@babel/env?\"\n>\n> 해결 방법\n>\n> ```js\n> // babelrc\n> {\n>  - \"presets\": [[\"env\", { \"modules\": false }]],\n>  + \"presets\": [[\"@babel/preset-env\", { \"modules\": false }]],\n>  \"env\": {\n>    \"test\": {\n>  - \"presets\": [[\"@babel/preset-env\", { \"targets\": { \"node\": \"current\" } }]]\n>  + \"presets\": [[\"env\", { \"targets\": { \"node\": \"current\" } }]]\n>    }\n>  }\n> }\n> ```\n>\n> ```js\n> // package.json\n> {...\n>    \"jest\": {\n>        \"transform\": {\n>          \".*\\\\.(vue)$\": \"vue-jest\",\n>          \"^.+\\\\.js$\": \"babel-jest\"\n>        },\n>        \"collectCoverage\": true\n>    }\n> }\n> ```\n\n그 다음에 만나게 되는 오류를 해결하면 샘플 코드 작성이 가능하다.\n\n> Requires Babel \"^7.0.0-0\", but was loaded with \"6.x\"\n>\n> 해결 방법\n>\n> ```js\n> $ npm insatll -D babel-core@^7.0.0-0\n> ```\n\n> Cannot find module '@/components/HelloWorld.vue' from 'helloworld.test.js'\n>\n> 해결 방법\n>\n> ```js\n> // helloworld.test.js\n> import HelloWorld from '../src/components/HelloWorld.vue';\n> ```\n>\n> @ 절대주소는 일단 모듈로 인식해서 파일을 찾을 수 없다한다. 우선은 상대경로로 작업해주자.\n\n이렇게 해결을 하고 나면, 실제로 test/ 파일에 샘플 코드를 작성할 수 있다.\n"},{"slug":"graphql","title":"Graphql 적용기","date":"2019-10-16","coverImage":"/images/cover/graphql.png","category":"JavaScript","content":"\n[GraphQL](https://graphql-kr.github.io/) 은 상당히 뜨고 있어서 항상 진행해보자.. 싶었던 방법인데 DB도 설치해야하고 복잡할거 같아서 진행을 못하고 있었다.\n찾아보니 Node.js Express 로 구현한 [yuddomack][yuddomack] 님의 블로그를 보고 진행을 해볼 수 있었다.\n<!-- more -->\n공식문서([GraphQL][graphql])에서는 저렇게 쓰면 되겠구나 싶었던 방법이 구체적인 웹으로도 쉽게 조회를 할 수 있게 제공된다.\n구현부를 express 에 작성하고, 간단한 조회를 하는 방법이 있고, 실제 DB와 연결해서 하는 방법을 계속 진행해볼까 한다.\nDB는 서버에 설치해야하는 번거로움이 있으니.. [kamang][kamang] 님의 블로그처럼 SqlLite로 프로젝트에 저장될 수 있게 만들어 볼 예정이다.\n\n[graphql]: https://graphql.org/learn/\n[express]: https://expressjs.com/ko/\n[yuddomack]: https://yuddomack.tistory.com/entry/expressgraphql-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0Hello-World-Guide\n[kamang]: https://kamang-it.tistory.com/entry/NodeJSExpressSQLiteNodejs-express%EC%83%81%EC%97%90%EC%84%9C-SQLite%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85%EC%9D%84-%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\n"},{"slug":"blob","title":"Load Image File","date":"2019-10-10","coverImage":"/images/cover/blob.png","category":"JavaScript","content":"##### 서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 웹에서는 어떻게 표현할까?\n<!-- more -->\n\nbase64 데이터가 있으면, 이 데이터를 blob:URL 을 만들어 src 속성에 URL 입력해서 이미지를 보여주면 된다.\n\n그런데 이렇게 되면 URL이 엄청 크게 되어 이 사이즈를 줄이는 방법이 필요하게 된다.\n[iCaan][icaan]님과 [codeday][codeday]님의 블로그를 보면 상당히 정리가 잘 되어 있는데.. base64 데이터를 인코딩해서 데이터를 출력해야한다.\n\n```js\n<img src=\"data:image/jpeg;base64, base64_encode\">\n```\n\n[icaan]: http://blog.naver.com/PostView.nhn?blogId=loverman85&logNo=221114631019&categoryNo=11&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search\n[codeday]: https://codeday.me/ko/qa/20190306/7131.html\n"},{"slug":"d3","title":"D3 필요한 메서드 정리해보자","date":"2019-10-01","coverImage":"/images/cover/d3.png","category":"JavaScript","content":"\n#### D3 차트에서 가장 많이 쓰이는 속성\n\ntransform 속성은 Axis를 그릴 때, call 함수로 데이터를 바인딩하면서 간격을 지정해준다.\ntranslate(x, top) : x 축과 top 위치가 시작점\n<!-- more -->\n#### D3 라인 그리는 방법\n\n```js\nvar svg = d3\n  .select('#segment')\n  .append('svg')\n  .attr('width', 800)\n  .attr('height', 200);\n\nsvg\n  .append('line')\n  .attr('x1', 10)\n  .attr('y1', 10)\n  .attr('x2', 700)\n  .attr('y2', 100)\n  .attr('stroke', 'red');\n```\n\n[참고] [d3-graph-gallery] https://www.d3-graph-gallery.com/graph/shape.html\n"},{"slug":"settings","title":"개발환경 세팅하기","date":"2019-09-26","coverImage":"/images/cover/settings.png","category":"Tip","content":"\n편하게 사용하던 플러그인들을 정리해둡니다.\n\n## VSCode Plugins - (2023.12.2) 업데이트\n\n- [x] Color Highlight\n- [x] Auto Close Tag\n- [x] Auto Rename Tag\n- [x] Active File In StatusBar\n- [x] GitLens \n- [x] Git History\n- [x] Git Graph\n- [x] ENV\n- [x] ES7+Redux/React-Native snippets\n- [x] Live Server\n- [x] Markdown Checkboxes\n- [ ] Rainbow CSV\n- [x] Atom One Dark Theme\n- [x] Material Theme\n- [x] ~~Material Theme Icons~~ file-icons\n- [x] Prettier - Code formatter\n- [x] Code Spell Checker\n- [x] Bracket Pair Colorizer\n- [x] vscode-styled-components\n- [x] TODO Highlight\n- [ ] JavaScript and TypeScript Nightly\n- [x] Project Manager\n- [ ] ES7 React/Redux/GraphQL/React-Native snippets\n\n## Chrome Extensions\n\n- [x] React Developer Tools\n- [x] Redux DevTools\n- [ ] Vue.js devtools\n- [ ] 네이버 영어사전\n- [ ] Momentum\n- [ ] ColorZilla\n- [x] Marinara: Pomodoro® Assistant\n\n## WebStorm - (2019.09.26) 업데이트\n\n1. Appearance\n\n```\nTheme: Dracula\nFont: Malgun Gothic\nSize: 12\nLine spacing: 1.2\n```\n\n2. Tools > Terminal\n\n```\nShell path \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i\n```\n\n## Installer\n\n- WebStorm\n- SourceTree\n- PickPick\n- Slack\n- Jira\n- Zepline\n- [Pigma](https://www.figma.com)\n- 발사믹 목업 (Atlassian Confluence)\n\n"},{"slug":"pattern","title":"Javascript 디자인패턴 이야기","date":"2019-09-11","coverImage":"/images/cover/pattern.png","category":"JavaScript","content":"\n## 클래스란 (클래스/상속 디자인 패턴)\n\n클래스화란 데이터와 작동을 함께 잘 감싸서 캡슐화하는 것이 올바른 설계이다.\n데이터에 적용 가능한 작동들을 메서드로 설계해야한다.\n클래스에서는 어떤 작동이 담긴 메서드의 이름을 부모와 자식 클래스 모두 똑같이 공유하여 자식 클래스가 부모 클래스를 오바라이드하라고 권장한다.\n그러나 자바스크립트에서는 이렇게 하면 불안정한 결과를 불러온다.\n<!-- more -->\n\n나는 대부분 절차적 프로그래밍을 해왔다는 걸 알게 되었다. 상위 추상화 없이 단순히 다른 함수를 호출해서 사용하는 방법만 사용해왔고,\n클래스의 경우는 라이브러리를 통해서만 사용했었다. 그래서 편리함은 알지만, 다뤄보지 않은 영역이라 이번 기회에 다시 정리하고자 한다.\n\n클래스는 복사 과정을 거쳐 객체 형태로 인스턴스화 한다.\n인스턴스는 생성자가 해주는데 이 생성자는 미리 정보에 대한 변수를 초기화해준다.\n항상 new 키워드를 앞에 붙여 생성자를 호출한다.\n\n```js\nclass Button {}\nvar btn1 = new Button();\n```\n\n오버라이드하기 전의 원본 메서드와 오버라이드 메서드가 다를 수도 있는데 이를 다형성(오버라이드)이라 한다.\ninherits/super 라는 키워드로 사용하며, 부모/조상 중 어떤 메서드를 호출할지 결정하는 것도 다형성의 기법이다.\n\n> 자바스크립트엔 클래스란 개념 자체가 없고 오직 객체만 있다. 그래서 위와 같은 동작들은 자동으로 일어나지 않는다. <br/>\n> 인스턴스화 해도 자동으로 복사가 되지않기 때문에 믹스인으로 클래스 복사기능을 흉내내었다.\n> 이런 기능을 여러 라이브러리에서는 `extends()` 라 하고, 프로퍼티를 복사를 할 수 있게 제공된다.\n> 믹스인 과정을 초콜릿 조각을 본인이 원하는 쿠키 반죽에 섞어 넣는 것에 비유한다. (이 말이 가장 기억에 남을거 같다)<br/>\n> <You Don't Know JS: this와 객체 프로토타입, 비동기와 성능 - 카일 심슨>\n\n이렇게 일일히 복사(믹스인) 하더라도 다른 클래스 지향처럼 100%(인스턴스) 복사는 어렵다.\n\n## 프로토타입이란 (프로토타입 디자인 패턴)\n\n객체를 다른 객체에 연결한다. 수평적인 상태에서 위임이 되는 연결이다.\n오버라이드 하기 딱 좋은 메서드 명칭보다는 각 객체의 작동방식을 설명하는 서술적인 명칭이 필요하다.\n모든 레퍼런스가 확실히 존재한다면 양방향 위임은 가능하긴 하지만 무한 루프에 빠질 수 있다.\n\n```js\nvar btn1 = Object.create(Button);\nbtn1.setup();\n```\n\n어떤 함수가 call(), apply(), bind() 메서드에 접근할 수 있는 건 함수 자신도 객체고 함수 객체 역시 `Function.prototype`에\n[[Prototype]]이 연결되어 위임 가능한 메서드가 있어 가능한 것이다.\n[infoscis][infoscis]님 블로그에 예제가 잘 나와있다.\n\n```js\n// ES6 [[Prototype]] 에 저장된 값을 변경한다.\nObject.setPrototyupeOf();\n```\n\n[infoscis]: https://infoscis.github.io/2018/01/25/ecmascript-6-expanded-object-functionality/\n\n## 디자인 패턴이란\n\n> 반복적으로 발생하는 문제와 그 문제의 해법으로 정의된다.\n> 패턴은 유사한 상황에서 반복적으로 적용할 수 있는 책임-주도 설계의 결과물이다. <br/> 그리고 그 방법이 왜 더 효과적인지에 대한 이유를 설명한다. <br/>\n> <객체 지향의 사실과 오해 - 조영호>\n\n### 1. Composite 패턴\n\n동일한 인터페이스를 제공해야한다는 제약하에 역할, 책임, 협력을 제공하는 설계 방법이다.\n\nLeaf 의 역할은 공용 인터페이스의 협력\nClient 는 Component 에게 메시지를 요청하는 역할\nComponent 의 역할은 다른 컴포넌트를 추가, 제거, 포함된 컴포넌트를 반환하는 역할\n"},{"slug":"promise","title":"Javascript Promise 이야기","date":"2019-08-28","coverImage":"/images/cover/promise.png","category":"JavaScript","content":"\n#### 비동기 통신에서 Promise 는 어떻게 쓸까?\n\n자바스크립트에서 비동기로 데이터가 들어올 때, 그 비동기 처리가 끝난 시점에 다음 작업을 할 수 있게 해주는 방법이다.\n[pangyo][pangyo]님의 블로그에 정리가 잘 되어있다.\nPromise 메서드를 호출하면 pending 상태가 되고 then 일 때, 실행한다.\n프로미스는 덕 타이핑의 실제 사례이다.\n<!-- more -->\n어떤 객체에 then() 메서드가 있으면 무조건 이 객체는 데너블(Thenable) 하다고 간주하고 프로미스라 판단한다.\n\n```js\ngetData().then((data) => {console.log(data)})\n\nfunction getData() {\n    return new Promise((resolve, reject) => {\n    ...ajax call...loop...\n    resolve(response)\n    }\n}\n```\n\n[pangyo]: https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\n"},{"slug":"event","title":"Javascript Event 이야기","date":"2019-08-22","coverImage":"/images/cover/event.png","category":"JavaScript","content":"\n#### 이벤트 리스너를 등록해서 사용할 때, `removeEventListener` 가 필요할까?\n\n전체 화면에서 히든 페이지가 필요해져서 window 객체에 keyup 이벤트를 등록하는 방법으로 문제를 해결한 경우가 있는데,\n이 이벤트를 제거해줄 필요가 있는지에 대해서 고민이 되었다.\n<!-- more -->\n#### 이벤트 리스너의 this 는 어떻게 인지할까?\n\nthis 를 잘 바꿔줄 때, 필요한 메서드가 call, apply, bind 이다.\n\n[mygumi][mygumi]님과 [zerocho][zerocho]님의 글이 도움이 되었다.\ncall, apply 는 함수를 호출하는 거고, 인자를 넘기고 반환값을 돌려받는 창구가 있을때 주로 사용한다.\ncall 은 파라미터 중 첫번째 인자를, 내부에서 사용할 this 로 만들어준다.\napply 도 마찬가지이고, 대신에 파라미터를 배열로 넘긴다.\nbind 는 this 만 바꾸고 호출하지는 않는다. 원본 함수를 호출하도록 하드 코딩된 새로운 함수를 생성한다.\n이건 다른말로 콜백 형식을 만들어줄 수 있다.\n\n```js\nfunction Person() {\n  this.name = this.name || 'default';\n  this.authority = 'guest';\n  return this.name + ' is ' + this.authority;\n}\n\n// call 은 새 함수로 만들어서 호출한다.\nPerson.call({ name: 'bill' }); // \"bill is guest\"\n\n// 1. bind 는 this을 교체해준다.\nconst userInfo = Person.bind({ name: 'test' }); // undefined\n// 2. 함수를 호출한다.\nuserInfo(); // \"test is guest\"\n\n// call 은 새 함수로 만들어서 호출한다.\nconst userInfo3 = Person.call({ name: 'test3' }); // undefined\nuserInfo3; // \"test3 is guest\"\n```\n\n#### 클로저는 어떻게 사용할까?\n\n생명주기가 끝난 함수의 변수를 외부 함수에서 호출하는 걸 일컬어 클로저라 한다.\n클래스로 만든 내부 이벤트를 외부에서 제어를 하려고 고민을 하다가 클로저를 응용할 수 있겠다 싶었다.\n위에 bind 는 스코프만 바뀌는 거고, call 은 원본 함수를 호출할 수 있는 새 함수로 만들어준다.\n\n```js\nfunction funcA(value1, value2) {\n  console.log(`value: ${value1} ${value2}`);\n}\n\nfuncB = () => funcA.call(this, 2, 3);\nfuncB(); // value: 2 3\n```\n\n[mygumi]: https://mygumi.tistory.com/332\n[zerocho]: https://www.zerocho.com/category/JavaScript/post/57433645a48729787807c3fd\n"},{"slug":"object","title":"Javascript Object 이야기","date":"2019-08-21","coverImage":"/images/cover/object.png","category":"JavaScript","content":"\nobject 를 string 으로 바꾸는 방법은 `JSON.stringify()`를 사용한다.\n<!-- more -->\n```js\nconst obj = [{ name: 'first' }, { name: 'second' }, { name: 'third' }];\n\nJSON.stringify(obj); // \"[{\"name\":\"first\"},{\"name\":\"second\"},{\"name\":\"third\"}]\n```\n\n이 방법은 리스트로 만들어진 오브젝트를 필터링할 때 쓰는 방법인데 중복도 제거할 수 있어서 많이 사용한다.\n\n```js\nconst obj = [\n  { name: 'first', value: 1 },\n  { name: 'second', value: 2 },\n  { name: 'third', value: 3 },\n  { name: 'third', value: 4 },\n  { name: 'third', value: 5 },\n];\n\nconst result = new Set(obj.map((v) => v.name));\nconsole.log(result); // {\"first\", \"second\", \"third\"}\n```\n\nChrome 에서 Object 를 복사하고 싶은 경우가 있는데, console 을 찍고\n우클릭으로 Store as Global Variable 을 선택하면 temp1으로 복사가되는데  \n`copy(temp1)` 이렇게 쓰게 되면 복사가 가능하다.\n\n[참고 (StackOverflow)][https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]\n"},{"slug":"browser","title":"Browser 이야기","date":"2019-08-19","coverImage":"/images/cover/browser.png","category":"HTML_CSS","content":"\n#### CORS 란?\n\n`Cross Origin Resource Sharing` 의 줄임말로, 다른 도메인의 리소스를 요청할 수 있는 방법을 말한다.  \nXMLHttpRequest 는 보안상의 이유로 동일한 도메인에서만 HTTP 요청을 보내도록 제한하고 있다.\n\nGET, POST 방식 중 Request 간단하게 요청하고 응답할 수 있다.\n`Access-Control-Allow-Origin: *` 모든 도메인으로 부터 접근이 가능하도록 허용하게 된다.\n<!-- more -->\n#### 브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?\n\n`HTTP (Hypertext Transfer Protocol)` 의 줄임말로, 인터넷상에서 데이터를 주고 받을 수 있는 프로토콜이다.\n[Andrew park][andrew park]님의 블로그에 잘 정리가 되어서 발췌한다.\n\n브라우저는 오디오/비디오/이미지/텍스트 등 HTTP 통신을 통해서 문서를 가져와 화면에 출력을 해준다.\n\n이때 TCP/IP 4계층 -> 3계층 -> 2계층 -> 1계층 네트워크에 접근해서 데이터를 전달한다.  \n4계층 - Application : 정보를 만들어 전달\n3계층 - Transport : 통신 노드를 연결\n2계층 - Internet : 통신 노드간 패킷 전송과 라우팅\n1계층 - Network Interface : 전기적 신호로 변환\n\n받는 쪽에서는 반대로 해석한다.\n\n모든 컴퓨터와 서버는 네트워크를 통해 외부에서 접근하려면 IP 주소가 필요한데 사용자는 브라우저에 URL을 입력하게 된다.  \n이때 DNS 서버로 접근해서 해당 도메인 네임에 맞는 IP 를 받아온다.\n\n\\*\\* 패킷 : 서버에서 클라이언트로 전송되는 데이터의 포맷\n\n#### 브라우저는 어떻게 데이터를 받아올까?\n\n브라우저는 웹 사이트 문서를 받아오기 위해 클라이언트에서 Request 요청을 만들어 서버에 전달한다.\n서버는 Request 를 해석하고 요청에 해당하는 Response 를 전달한다.\n\nHTTP 프로토콜의 데이터 형식은 HEADER 와 BODY 로 구성되어 있습니다.\n\nHTTP/1.1부터는 Keep-alive 를 지원하게 되면서 문서가 다운로드가 완료되어도 클라이언트의 연결을 끊지 않고\n일정 시간동안 연결을 유지하며 재연결 과정없이 데이터를 유지하게 된다.\n\n[andrew park]: https://medium.com/@pks2974/website%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%97%AC%EC%A7%80%EA%B2%8C%EB%90%98%EB%8A%94-%EA%B1%B8%EA%B9%8C-1-108009d4bdb\n\n#### 크롬 브라우저 성능측정\n\n[FPS meter](https://developer.chrome.com/docs/devtools/evaluate-performance) 로 확인해볼 수 있다.\n\n크롬 개발자 도구 - Console 탭의 더보기 - Rendering - FPS meter 체크를 하면 확인할 수 있다.\n"},{"slug":"array","title":"Javascript Array 이야기","date":"2019-08-18","coverImage":"/images/cover/array.png","category":"JavaScript","content":"\n#### Split, Join 의 사용법\n\narray 를 string으로 string 을 array 로 바꾸는 연습은 너무나 중요하지만.. 헷갈림의 연속이다.\narray 를 string 으로 바꾸는 방법으로 콤마를 split 으로 분리해서 띄어쓰기를 주면 된다.\n<!-- more -->\n```js\nconst arr = ['first', 'second', 'third'];\n\narr.toString().split(',').join(' '); // first second third\n```\n\n#### Splice 사용법\n\n가장 많이 사용한 건 splice(start, deleteCount) 이다.이 삭제 방법은 배열의 길이도 줄어들기 때문에 편리하긴 하지만..\n반복문으로 인덱스를 찾아서 삭제해줄려고 할때면, 배열의 길이가 변경되어 다음 인덱스를 찾는 어려움이 있었다.\n이럴 땐, 삭제한 갯수만큼 인덱스에서 빼서 삭제해준다.\n\n```js\nlet count = 0;\n\narr.forEach((v) => {\n  const start = v - count;\n\n  arr.splice(start, 1);\n  count++;\n});\n```\n\n#### Set 사용법\n\niterator 를 활용하는 방법 중 반복되는 값의 중복을 제거하는 방법으로 유용한 방법이 있다.\nSet 을 사용하면 중복되는 값들 중 맨 앞의 값만 남기고 나머지는 무시가된다.\n\n```js\nconst foo = [1, 2, 3, 5, 1, 1, 2, 3, 5]\n\nconsole.log(new Set(foo)) // {1, 2, 3, 5}\n\n// 중복 제거 방법 (remove duplication)\n[...new Set([...array1 ,...array2])];\n```\n"},{"slug":"css-grid-flex","title":"Grid 와 Flex 사용법","date":"2019-08-16","coverImage":"/images/cover/css-grid-flex.png","category":"HTML_CSS","content":"\n## Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?\n\n[Grid](https://developer.mozilla.org/ko/docs/Web/CSS/grid) 는 중첩이 필요할 땐, 항상 grid 로 재분할이 필요하다.\n<!-- more -->\n```css\n.main {\n  width: 100%;\n  height: inherit;\n  display: grid;\n  grid-template-rows: repeat(40, 1fr);\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 5px;\n  background: #ccccee;\n  padding: 10px;\n}\n.main-bottom {\n  grid-row: 25/41;\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 5px;\n}\n\n.main-bottom-left {\n  grid-row: 1/11;\n  grid-column: 1/1;\n  background: lightpink;\n}\n\n.main-bottom-right {\n  grid-row: 1/11;\n  grid-column: 2/2;\n  background: lightpink;\n}\n```\n\nGrid 에서 크기가 고정된 아이템이 잘 정렬되게 보이려면, 감싸고 있는 컨테이너 박스에서 `grid-auto-rows: max-content` 를 추가해준다.\n\n---\n\n##### Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?\n\n[Flex](https://developer.mozilla.org/ko/docs/Web/CSS/flex) 는 `align-items`를 사용하면 컨텐츠를 정렬할 수 있다.\n\n```css\n.main {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  height: 100px;\n  width: 100px;\n  border: 1px solid #ffffff;\n  text-align: center;\n}\n```\n\n---\n\n##### 반응형 레이아웃\n\n[미디어 쿼리](https://developer.mozilla.org/ko/docs/Learn/CSS/CSS_layout/Media_queries)를 사용한다.\n\n```html\n@media only screen and (max-height: 1080px) { body { backgroud: 'red' } }\n```\n\n웹브라우저의 높이 해상도가 1080px 이하 일때, 클래스의 스타일을 변경해준다.\n"},{"slug":"vuejs","title":"Vue 이야기","date":"2019-08-14","coverImage":"/images/cover/vue-js.png","category":"Vue","content":"\nMVC 패턴이 도입되면서 Controller 에서 데이터 작업들에 대한 역할 분담을 해왔고,\nVue 는 MVVM 패턴으로 중간에 ViewModel 객체를 두고 데이터에 대한 의존성을 분리하기 위해 사용한 패턴이다.\n같은 데이터인데 몇가지 조합해서 가공이 필요한 경우에 View Model 부분에서 수정을 하게끔 정해져있다.\n(Dom listener, Directives, Data Binding 등등..)\n\n<!-- more -->\n\n- 렌더링은 React 랑 유사하고 Virtual DOM 을 사용해서 가볍고 빠름.\n- 양방향 데이터 바인딩 (Vue 인스턴스와 Template) 이 모두 데이터에 접근할 수 있음. (v-model)\n- 뷰는 인스턴스가 생성되면 데이터 바인딩을 할 동안 루트요소의 모든 자식 노드를 탐색하면서 데이터 변경에 반응함.\n- 뷰는 DOM 을 비동기적으로 업데이트하고 `Vue.nextTick(callback)` 을 사용하면 업데이트된 이후를 보장할 수 있음.\n\n그런데 이러한 계층 구조는 데이터 뿐만 아니라. 컴포넌트 상에서도 접목된다.\n\n그 이후로 컴포넌트라는 개념이 자리잡았고, 비지니스 로직과 View 로직이 분리되면서 HTML 작업만 따로 작업을 할 수도 있게 되었다.\n그러면서 공통적으로 사용할 UI 인 경우엔 컴포넌트로 분리하고 필요하면 데이터만 변경해서 사용할 수 있게 만들어 놓게 되었다.\n\n그리고 이렇게 발전한 사용법으로 Vue 를 접했을 땐, 자식 컴포넌트는 이미 부모 레벨의 정보를 들고 있을 수 있게 되었단걸 알게 되었다.\n\n#### 부모에서 자식 계층으로 정보를 전달하는 방법은?\n\n공통 컴포넌트라고 하면 보통은 제일 마지막 자식 계층일 경우가 많다.\n그래서 이 계층에서는 mounted 에서 부모의 clientHeight 를 구해올 수 있다.\n\n```js\nthis.$parent;\nthis.$el.parent;\n```\n\n#### Vue Component 에 타입스크립트 해서 적용해본 사례는?\n\nSFC(Single File Component) 는 Vue가 권장하는 Vue 컴포넌트 전용 파일 포맷이다. 한 파일 안에 템플릿과 자바스크립트 그리고 CSS까지 정의한다.\n개발자가 클래스를 정의하기보다는 클래스를 만들 수 있는 옵션을 정의하는 형태로 개발한다.\n엄격한 타입의 언어를 다루던 개발자들이 자바스크립트를 다뤄야할때 완충 역할로 타입스크립트를 사용했고,\n타입은 어플리케이션 설계 전체에 영향을 주는 것이라 필요하게 되었다라고 말하는 [shiren][shiren]님의 글을 보게 되었다는데 아마\n상당한 시행착오를 겪은 걸 보고, 우리도 Vue3로 전환하면 사용하게 될 거 같다는 생각이 든다.\n\n### Vue Test Util\n\n[joshua][joshua] 님 블로그에 보면, vue-cli 로 자동으로 설치가 된다하였지만, 기존에 만들었던 프로젝트는 vue-cli(2.x) 이라 모듈 설치방법으로 진행해봤다.\njest 라이브러리 설치\n\n```js\nnpm install jest @vue/test-utils vue-jest babel-jest --save-dev\n```\n\n#### ESLint 적용하기\n\nstandard 를 사용해보고 싶어서 적용했고, indent만 4칸만 지정했다.\n`npm run eslint --fix` 로 사용이 가능하다.\n\n```js\n// 기본설치\nnpm install -D --save eslint eslint=plugin-vue\n\n// 추가사항\nnpm install -D --save eslint-plugin-import\nnpm install -D --save eslint-plugin-node\nnpm install -D --save eslint-plugin-promise\nnpm install -D --save eslint-plugin-standard\n```\n\nindent 만 설정한 기본 파일로 세팅했다.\n\n```js\n// .eslint.js\n\nmodule.exports = {\n  root: true,\n  extends: ['standard', 'plugin:vue/recommended'],\n  rules: {\n    indent: ['error', 4],\n  },\n};\n```\n\n[shiren]: https://ui.toast.com/weekly-pick/ko_20190327/\n[joshua]: https://joshua1988.github.io/vue-camp/testing/vue-test-util.html#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\n[gongzza]: https://gongzza.github.io/javascript/vuejs/vue-unit-testing-with-jest/\n[jest]: https://jestjs.io/docs/en/getting-started\n\n#### Child 의 이벤트를 전달하는 방법 (EventBus)\n\n```js\n// Child.vue\n<template>\n    <div>\n        <input @input=\"event => this.$emit('inputChange', event)\" />\n    </div>\n</template>\n\n// Parent.vue\n<template>\n    <div>\n        <Child v-on:inputChange=\"handleChange\" />\n        <p>Value: {{value}}</p>\n    </div>\n</template>\n<script>\n    import Child from './Child.vue'\n\n    export default {\n        data() {\n            return {\n                value: '',\n            };\n        },\n        components: {\n            Child,\n        },\n        methods: {\n            handleChange(event) {\n                const { value } = event.target;\n                this.value = value;\n            }\n        }\n    }\n</script>\n```\n\nv-on:inputChange 는 심플하게 @inputChange 이렇게 사용할 수 있고,\n@input 입력이 되면, Parent 의 handleChange 메서드에 값이 전달된다.\n이걸 내 방법으로 표현하면, `this.$emit('inputChange', event)` 이벤트 명을 정해주면 hook 이 걸려서\n동작한 값을 해당 이벤트 명에 전달해줄 수 있다는 의미가 될 수 있겠다.\n\n출처: https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component\n"},{"slug":"npm","title":"NPM","date":"2019-08-09","coverImage":"/images/cover/npm.png","category":"JavaScript","content":"\n[Node Package Manager](<https://ko.wikipedia.org/wiki/Npm_(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)>) 라 하며, 자바스크립트 라이브러리를 모아놓은 패키지 관리자입니다.\n<!-- more -->\n#### NPM 설정\n\n```\nnpm init -y  // 패키지까지 모두 설치하는 방법\n```\n\n#### NPM 에 새로 추가된 기능을 사용해보자\n\nNPM v6 에서 모듈의 취약점을 검사해주는 기능이 추가되었다. <br>\n사용해보려 했더니.. v.5.xxx 사용할 수 없다.  \nNPM을 업데이트를 먼저 진행했다.\n\n```html\n// for window $ npm -version $ npm install -g npm\n```\n\n아래와 같은 에러가 또 발생한다.\n\n```js\nnpm ERR! code EAUDITNOLOCK\nnpm ERR! audit Neither npm-shrinkwrap.json nor package-lock.json found: Cannot audit a project without a lockfile\nnpm ERR! audit Try creating one first with: npm i --package-lock-only\n```\n\n결과\n\n```js\n$ npm audit\n           === npm audit security report ===\nfound 0 vulnerabilities\n```\n\n#### NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)\n\n문제가 발생했을 때, 설치된 모듈의 버전을 확인하고 싶을때가 있다.\n\n```html\n$ npm view <package-name> version </package-name>\n```\n\n#### package json 경로 지정 방법:\n\n```js\n// devDependencies 설치\n$ npm install -D --save xxx\n\n// dependencies 설치\n$ npm install xxx\n```\n\n#### 패키지 모듈 삭제 방법:\n\n```js\n$ rm -rf node_modules/\n// or\n$ npm uninstall [패키지명]\n```\n\n#### 특정 버전으로 받는 방법:\n\n```js\n$ npm insatll -D babel-core@^7.0.0-0\n```\n\n#### Node 모듈 업데이트 방법:\n\n[Node](https://nodejs.org/en/) 에서 pkg 다운받으면, 그 후로 업데이트 방법은 아래와 같이 stable 안정화버전으로 업데이트한다.\n\n```\n$npm install -g n\n$npm cache clean -f\n$sudo n stable\n```\n\n#### NVM 사용 방법:\n\n[NVM](https://github.com/nvm-sh/nvm#installing-and-updating) 다양한 버전의 노드를 설치할 수 있도록 해주는 관리자 툴이다.\n현재 노드버전을 확인하고, [major version](https://semver.org/) 을 쓰면, 그 메이저 버전의 최신을 설치할 수 있다.\n\n```\nnvm install v14\nnvm list\nnvm use v14.18.1\n```\n\n#### 전역에 설치된 모듈을 확인하는 방법:\n\n```\nnpm list -g --depth 0\n```\n"},{"slug":"git","title":"안 쓰면 잊어버리는 Git 명령어","date":"2019-08-08","coverImage":"/images/cover/git.png","category":"Tip","content":"\nGit은 만들고 나면 크게 문제가 없고, 충돌나지 않으면 별 문제없이 편하지만, 가끔 발생하는 문제에 대해서는 조치 방법을 위해 정리해둘 필요가 있다.\n<!-- more -->\n**Git First**\n\n```html\n// git clone 할때, 레포가 없다하면.. 주소를 변경해주자..\nhttps://깃ID@github.com/레포주소 \ngit clone XXX \ngit init \ngit add README.md \ngit commit -m 'first commit' \ngit push origin main\n```\n\n**Git Branch**\n\n```html\ngit checkout -b develop(브랜치명) \ngit add . \ngit commit -m 'xxx' \ngit push origin develop // hotfix git checkout -b hotfix/YYYYMMDD\n```\n\ngitignore 파일을 만들고 추후에 파일들을 삭제하고 싶을땐, 항상 캐시문제로 stage 에 올라간 파일을 삭제하기가 어려웠다.\n[hopeless][hopeless-blog] 블로그에서 보면 제외할 폴더나 파일을 cached 된걸 삭제해줘야한다고 한다.\n\n**Git Ignore**\n\n```html\n// .gitignore 파일에 제외할 폴더 추가 \n\ngit rm -r --cached .\ngit add .\ngit commit -m 'ignore 수정'\n```\n\n**Git Rebase**\n\n```html\ngit rebase -i HEAD~2 // (직전 커밋한 갯수 포함) 병합할 갯수를 지정 pick -> s //\npick 을 squash (s) 로 변경 :wq\n```\n\n**Git Delete**\n\n```html\ngit branch -d feature/dev-1\ngit push origin -d feature/dev-1\n```\n\n**Git Conflict**\n\n```html\n// 1. IDE 를 활용한 해결 방법 \nWebstorm : VCS > Git > Resolve Confilicts\nTerminal: git merge --continue :qa \n\n// 2. 수동 해결 방법 \n// HEAD ~ === 영역이 원본이므로 수정하고, 다시 commit 해준다. \n\ngit add . \ngit commit -m 'fix: 💥 충돌 해결'\n```\n\n**Git Cherry Pick**\n\n```html\ngit cherry-pick #135bc\n```\n\n**Git Merge**\n\n```html\ngit checkout A \ngit merge B (Fast-forward : 합칠때 하나로 만든다.) \ngit merge --no-ff B (합칠때 merge 커밋을 만든다) \n\n// 충돌난 파일 목록을 확인한다. \ngit status \n```\ngit merge 충돌 해결 방법 \n\n`<<<<<< HEAD` 부분과 `>>>>>> B` 부분을 조합해서 수정한다. \n수정 후에 add 와 commit 진행하면 정상적으로 merge commit이 진행된다.\n\n**Git Merge 취소하기**\n\n```html\ngit merge --abort\n```\n\n**Git Reset**\n해당 커밋을 push 했지만 되돌리고 싶을때 사용한다. (한번에 점프고하고 싶을때, 사용하지만 가급적이면 사용하지 않는다)\n\n```html\ngit reset --hard HEAD^\n```\n\n**Git Revert**\n해당 커밋만 취소하고 싶을 때 사용한다. WebStorm IDE 에서는 Revert 기능을 제공하고 있다. (우클릭 - Git - Revert)\n\n```html\ngit revert <되돌릴 커밋>\n```\n\n**Git Permission denied (Window10)**\n\n```html\n// 로컬에 저장된 계정이 있으면, 새 계정으로 다시 로그인을 해줘야한다. \n\ngit config --global user.name \ngit config --global user.email\n```\n\n**Git 취약점 해결방법**\n\n```html\nnpm audit fix\n```\n\n## 참고\n[hopeless-blog](https://brunch.co.kr/@hopeless/9)\n"},{"slug":"blog-jekyll","title":"Jekyll을 이용한 github 블로그 만들기","date":"2019-08-07","coverImage":"/images/cover/blog-jekyll.png","category":"ToyProject","content":"##### Jekyll 프레임워크를 이용해 블로그를 작성하고, github에 자동 deploy 까지\n<!-- more -->\n\n<img src='/images/blog-jekyll.png width='300'>\n\n#### 환경설정하기\n\nJekyll은 markdown(\\*.md) 파일을 생성하면 웹페이지로 서비스를 할 수 있는 정적 사이트 생성기이다.\n\nRuby를 환경에서 동작하기 때문에 윈도우에도 Ruby를 설치 해야한다.\nRubyInstaller for Windows 를 설치하는데 (Devkit 가 포함된 버전)으로 설치하면 된다.\nRuby+Devkit 2.5.5-1 (x64) 로 설치를 진행했다.\n\n[Ruby Installer](https://rubyinstaller.org/downloads/)\n\n---\n\n#### 사이트 생성하기\n\n[Jekyll 공식사이트(한글 번역)](https://jekyllrb-ko.github.io/docs/windows/)\n\n```js\n// jekyll 설치\ngem install jekyll bundler\n\n// 사이트 생성\njekyll new my-awesome-site\ncd my-awesome-site\n\n// jekyll 실행 (window)\nmy-awesome-site $jekyll serve --watch\n\n// jekyll 실행 (mac)\nbundle exec jekyll serve --watch\n```\n\n---\n\n#### 글 작성하기\n\n마크다운 파일명과 상단 텍스트는 규칙대로 만들어주고 저장을 하게 되면 home 에 리스트가 나타난다.\n\n```js\n_post / yyyy - mm - dd - title.md;\n```\n\n---\n\n#### 테마 적용하기\n\n제공하는 테마 중에서 댓글도 없고, 심플한 디자인인 'jekyll-theme-clean-blog' 가 이 테마를 적용해보았다.\n\n```js\n// install\ngem \"jekyll-theme-clean-blog\"\n\n// _config.yml\ntheme: jekyll-theme-clean-blog\n```\n\n새로 적용하면 아주 이쁘게 잘 보이는데.. 영문일 때 폰트만 이뻐서.. 한글 폰트는 다른걸 사용하고 싶어졌다.\n\n---\n\n#### 폰트 적용하기\n\nJekyll의 수많은 테마는 변경없이 사용할 수 있도록 제공되지만..\n블로그 테마를 변경하고 싶지 않고.. 커스텀하게 적용할 방법을 찾게 될 수 밖에 없는거 같다.\n\n그래서 [Clean Blog Jekyll][cleanblog] 사이트에서 소스를 받아 분석을 시작했다.\n\n우선 스타일 관련부분을 모두 가져와서 내 프로젝트에 그대로 덮어씌우고, 빌드를 했더니 \\_site 에 로컬 파일들이 들어갔다.\n\n```js\n// 개별로 가져온 파일\n_sass / styles.scss;\nassets / vendor / startbootstrap - clean - blog;\nassets / main.css;\n```\n\n폰트는 구글에서 기본 제공한다는 폰트 중에 이쁜 나눔고딕체를 import 해서 사용했다.\n\n```js\n// _sass/styles.scss\n/* Import Google Web Font */\n@import url(http://fonts.googleapis.com/css?family=Nanum+Gothic:400,700);\n\n/* Style Blog Font */\nh1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure {\n  margin-bottom: 15px;\n  font-family: 'Nanum Gothic', sans-serif;\n}\n```\n\n---\n\n#### Code Block 스타일 적용하기\n\n폰트를 넣고 보니.. 코드 블럭이 이쁘지가 않았다.\n마크다운 문서에 소스코드가 저렇게 안 이쁘다니.. 다시 스타일을 찾기 시작했다.\n\n[OneDarkTheme][onedarktheme]에 `syntax-one-dark.css` 을 가져왔다.\nassets/css/syntax.css 에 스타일을 적용하고, import 해서 사용했다.\n\n```js\n// _sass/styles.scss\n/* Import Highlight */\n@import \"../assets/css/syntax.css\";\n```\n\n테마 요소의 다른 부분은 건드리지 않았고, 스타일만 앞으로 계속 커스텀하게 바꿔봐야겠다.\n\n---\n\n#### Git Repository 블로그 적용하기\n\nRepository에 등록하면 프로젝트 명(git_id.github.io) 로 등록을 하면 바로 깃허브에서 확인을 할 수 있다.\n기본 jekyll 만 설치하면 바로 확인이 가능하다고 하는데..\n공식으로 지정된 테마만 등록이 가능하다고.. 커스텀 테마의 경우엔 404 ERROR 가 발생했다.\n\n결국엔 필요한 파일의 일부가 아니라 전부를 내 프로젝트에 추가했다.\n그리고 시작된 jekyll 공부..\n\njekyll 에서 사용되는 문법은 Ruby로 작성된 Liquid 템플릿 언어이다.<br/>\n[goodGid][goodgid] 님의 블로그가 정리되어있고, 이 언어를 사용해서 html을 만들고\nlayout 탬플릿 파일이 동적 파일들(\\*.md)을 로드해서 정적파일로 변환해준다.\n\n[cleanblog]: https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll\n[onedarktheme]: https://github.com/eungbean/Atom-OneDarkTheme-4-Jekyll\n[goodgid]: https://goodgid.github.io/What-is-Liquid-Grammer/\n\n---\n\n#### git auto build jekyll 무시하기\n\n.nojekyll 빈 파일을 root 에 생성한다.\n"},{"slug":"canvas","title":"Canvas로 그래프 그리기","date":"2019-06-10","coverImage":"/images/cover/canvas.png","category":"HTML_CSS","content":"\nGrid 내부에 그래프를 그려야하는데 캔버스와 SVG, DIV 방법이 있을 수 있는데 어느 것을 골라야할지 망설여졌다.\n분명 성능 이슈가 있겠지? 그래서 성능면에서 어떤 차이가 있는지부터 먼저 찾아보기로 했다.\n<!-- more -->\n---\n\n#### SVG 와 Canvas의 장단점\n\n**SVG**\n\n- 복잡하지 않게 사용자 인터렉션이 가능합니다. (클릭, 마우스오버 이벤트 포함)\n- 모든 엘리먼트는 DOM에 부착되어 자바스크립트와 CSS 통해 변형이 가능하며 텍스트를 지원한다.\n- DOM 방식보다는 시간이 오래걸립니다.\n- 성능은 화면이 크거나, 픽셀 수가 적을 경우(<10k) 에 좋습니다.\n- 고품질 문서 작업이나 정적 이미지의 조작 작업 등에 어울립니다.\n- 스크립트와 CSS를 통해서도 수정할 수 있음\n\n**Canvas**\n\n- 단순한 그래픽 API로 픽셀 이상을 나타내기 어렵습니다.\n- 화면상 다른 동작을 할때도 전혀 부담이 없습니다.\n- 빠른 응답속도와 메모리 과부하가 가장 적습니다.\n- 성능은 화면이 작거나, 픽셀 수가 많을 경우(>10k) 에 좋습니다.\n- 고성능의 애니메니션 작업이나 동영상 조작 등의 작업에 어울립니다.\n- 스크립트를 통해서만 수정할 수 있음\n\n캔버스는 그래픽이 잘 동작하고 성능이 저하되지 않도록 엘리먼트 사용을 최적화할 수 있는 방법이다.\n\n---\n\n#### 성능 비교\n\n1px dom 25만개를 그렸을때 걸리는 시간에 대한 [idchoi2][idchoi2-blog]\n님의 글을 읽어보고 나니.. 렌더링 시간이 확연히 차이가 있었다.\n\n|          | 렌더링 시간          | 메모리 사용량 |\n| -------- | -------------------- | ------------- |\n| HTML DOM | 4356.28ms (3~4초)    | 796.3M        |\n| SVG      | 7799.06ms (6~7초)    | 1.7G          |\n| Canvas   | 430.71ms (0.3~0.4초) | 217.6M        |\n\n---\n\n#### 결론\n\n그래서 렌더링 속도가 빠른 캔버스로 그려봤다.\n\n```js\nconst draw = (curr) => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const tot = 1000;\n  const percent = Math.floor((curr / tot) * 100);\n  const height = 25;\n\n  if (this.width === null) {\n    this.width = document.querySelectorAll('th')[2].clientWidth;\n  }\n  const width = this.width * (percent / 100);\n\n  canvas.width = width + 50;\n  canvas.height = height;\n  ctx.fillStyle = 'green';\n  ctx.font = '10px Aria';\n  ctx.fillRect(0, 0, width, height);\n  ctx.fillStyle = 'white';\n\n  // 퍼센트값\n  ctx.fillText(`${percent}%`, 8, height - 10);\n  ctx.textAlign = 'right';\n\n  // 실제값\n  ctx.fillText(curr, width + 30, height - 10);\n  ctx.textAlign = 'left';\n\n  return canvas;\n};\n```\n\n**결과**\n![canvas](/img/post-2019-06-10-1.png){:width=\"100%\" height=\"50%\"}\n\n[idchoi2-blog]: https://medium.com/@idchoi2/javascript-%EB%8F%84%ED%98%95-%EA%B7%B8%EB%A6%AC%EA%B8%B0-html-vs-svg-vs-canvas-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90-9e1ce2396fcd\n"}]},"__N_SSG":true}