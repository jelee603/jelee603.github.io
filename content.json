{"pages":[{"title":"About","text":"","link":"/about/index.html"},{"title":"로드맵","text":"개발자의 마음가짐 요구 사항이 변할 때에도, 고객의 기대에 맞춰 동작하게 만들어 줄 준비가 되어있어야하고 그에 맞춰 프로그램을 수정하는 것은 개발자의 몫입니다. - 세상을 설계하는 객체지향 방법론 Code: 프로그래밍 프로그래머스 실용주의 프로그래머 동료 개발자와 편하게 의사소통을 하기 위해 ESLint 와 Prettier 로 코딩 스타일을 맞춰둔다. ESLintㄴ 자바스크립트 코드를 에러가 덜 나는 방향으로 작성하도록 도와주는 문법 보조 도구ㄴ var -&gt; const 로 변경해주거나 띄어쓰기 맞춰준다.ㄴ TSLint가 있었지만, 몇가지 아키텍쳐 문제가 있어서 현재는 ESLint를 편집해서 사용한다. Prettierㄴ 팀 단위 코딩 컨벤션을 맞추어 개인화해서 사용합니다.ㄴ 옵션 설정해서 사용합니다.(1라인의 문자길이, 세미콜론, 탭 기타 포매팅 설정) 자바스크립트 원시레퍼 타입, 참조 타입 변수/스코프/메모리ㄴ 클로저, 재귀 디자인 패턴 프론트엔드 개발자를 위한 자바스크립트 프로그래밍 (예제코드)ㄴ 팩터리 패턴ㄴ 생성자 패턴ㄴ 프로토타입 패턴ㄴ 동적 생성자ㄴ 기생 생성자ㄴ 방탄 생성자 EcmaScript 6ㄴ Destructuringㄴ Async &amp; Awaitㄴ proxy, map, setㄴ 구조체, 배열ㄴ 스트릭트 모드ㄴ 배열 메서드: reduce, map, filter, forEach, every, some TypeScript Babel Destructuring객체와 배열의 구조를 분해해서 객체의 속성을 바로 꺼내서 쓸 수 있는 방식입니다.자바스크립트 차원에서 편하고 쉽게 접근할 수 있습니다. 1var {a, b, c} = obj; Async &amp; Await비동기처리 문법, 자바스크립트의 콜백 문제를 Promise 가 해결하고 Promise 의 문제를 해결한 것이 Async &amp; Await 입니다. 123async function fetchData() { await getList();} 함수 앞에 async 를 걸어주고, 비동기 처리를 한 promise 객체를 반환하는 부분에 await 를 걸어준다. 배열 메서드reduce (링크)배열의 각각의 아이템들을 순회하면서 이전 연산 값을 누적하면서 계속 연산해서 값을 추출하는 함수연산은 콜백acc: 누적치, current: 순회하는 아이템 TypeScript맵드 타입기존에 존재하는 타입을 맵드 타입을 문법을 이용해서 타입으로 변환해내는 것.맵 함수처럼 사용 가능합니다. 기존 프로젝트를 타입스크립트로 적용할 때 주의점 기능 변경과 동시에 타입스크립트 전환을 하지 말것 테스트 커버리지가 낮은 프로젝트엔 함부로 타입스크립트를 적용하지 말것 처음부터 타입을 엄격하게 지정하지 말것 (컴파일을 돌렸을 때 에러가 안나는 수준으로 일단 만들고 점진적으로 타입을 구체화할 수 있게 작업합니다.) Babel공식문서최신버전의 자바스크립트 파일을 구버전 브라우저에서 인식할 수 있게 트랜스파일해주는 역할을 한다.타입스크립트의 프리셋(플러그인의 집합), 옵션들의 집합을 따로 설치해줘야한다. 바벨쪽에서의 라이러리를 제공한다. 디자인 패턴 문제의식을 먼저 형성하게 하지 않고 답을 먼저 보여준 뒤 그걸 어디에 써먹을지를 먼저 알려주면,독자는 ‘어린아이가 망치를 들고 있는 오류’에 빠질 것이다. 팩터리 패턴특정 인터페이스의 객체를 생성하는 과정을 함수로 추상화하는 패턴입니다. 코드 중복 해결됩니다. 생성한 객체가 어떤 타입인지 알 수 없다는 단점 생성자 패턴커스텀 생성자를 만들어서 원하는 타입의 객체에필요한 프로퍼티와 메서드를 직접 정의할 수 있습니다. 인스턴스마다 메서드가 생성된다는 단점 프로토타입 패턴프로퍼티와 메서드는 객체 인스턴스 전체에서 공유됩니다.ex) 네이티브 참조 타입이 프로토타입 패턴으로 구현되어있습니다. (Object, Array, String) 프로퍼티가 참조값을 포함한 경우, 인스턴스 프로퍼티에 값을 할당하면, 프로퍼티가 prototype 프로퍼티를 가리킬 수 있습니다. constructor 프로퍼티를 명시적으로 생성하고 값이 담기도록 강제해서 사용 가능 합니다. EcmaScript 5판에 정의된, [[enumerable]]생성자를 재설정하면 자동으로 true 로 바뀌므로 false 바꿔줘서 사용합니다. [[Prototype]] 포인터는 생성자가 호출될 때 할당되므로 프로토타입을 다른 객체로 바꾸면 생성자와 원래 프로토타입 사이의 연결이 끊어집니다.먼저 빈객체를 생성하면 이 체이닝을 끊을 수 있습니다. 동적 생성자모든 정보를 생성자 내부에서 캡슐화하고 필요한 경우 생성자 내부에서 프로토타입을 초기화하여 생성자와 프로토타입을 모두 쓸 수 있는 장점이 있습니다. 기생 생성자보통 다른 패턴이 실패할 때 폴백으로 씁니다.일반 생성자처럼 보이지만, 다른 객체를 생성하고 반환하는 동작을 래퍼 생성자로 감싸는 것을 말합니다. 방탄 생성자자바스트립트에서는 공용 프로퍼티가 없고 메서드가 this를 참조하지 않는 객체를 방탄 객체라 하고, 이 패턴은 데이터를 써드파티 애플리케이션으로부터 보호하는데 가장 잘 어울립니다. 웹 API웹을 만들 때 사용하는 인터페이스 목록 DOMDOM은 메모리에 웹페이지 문서 구조를 표현합니다. HTML, XML 문서의 프로그래밍 인터페이스입니다.웹 페이지는 일종의 문서(Document) 입니다.문서를 논리 트리로 표현하고, 트리의 각 브랜치는 노드에서 끝나며 각 노드는 객체를 갖습니다. 노드 계층 구조Dom 레벨1 코어: Document 콘텐츠 트리를 변경하기 위한 강력한 객체형 모델입니다. 웹스크립트의 초석이기도 하며, 주요 브라우저에서 지원합니다. 선택자 APIDocument, DocumentFragment, Element 인터페이스를 구현하는 모든 객체에querySelector 와 querySelectorAll 메서드를 추가되어있습니다. 이 메서드들은 엘리먼트 노드에 접근해서 특정 노드를 선택해서 갖고 올 수 있습니다. Window 인터페이스 Window는 DOM 문서를 담는 창을 나타냅니다.document 속성으로 DOM을 나타냅니다.자바스크립트 코드에서는 노출된 전역 변수, window는 현재 스크립트가 작동중인 창을 나타냅니다. Document 인터페이스브라우저가 불러온 웹페이지를 나타내며 페이지의 진입점 역할을 합니다. Storage웹 스토리지는 브라우저에서 키/값 쌍을 쿠키보다 훨씬 직관적으로 저장할 수 있습니다.특징: 세선과 로컬 스토리지 2가지 있습니다. 세션 스토리지 로컬 스토리지 브라우저가 열려있는 동안 제공 유효기간 없이 데이터를 제공 데이터를 절대 서버로 전송하지 않음 브라우저 캐시 또는 저장 데이터를 삭제해야 함 저장공간(최대 5MB) 쿠키나 세션보다 저장공간이 크다 locationLocation인터페이스는 객체가 연결된 장소(URL)을 나타냅니다. 변경햐면, 연결된 객체도 변경됩니다. historywindow 객체는 history 객체를 통해 브라우저 세션 기록에 접근할 수 있는 방법을 가집니다. 방문 기록 스택의 콘텐츠를 조작할 수 있습니다. 웹 API 이벤트 이벤트 흐름ㄴ 캡쳐링ㄴ 버블링 이벤트 핸들러ㄴ DOM 레벨 0 핸들러ㄴ DOM 레벨 2 핸들러ㄴ 크로스 브라우징 핸들러 이벤트 위임 HTML“하이퍼텍스트마크업 언어”는 웹페이지의 구조를 지정하는 기술적인 언어입니다. HTML5DOM 레벨 2의 차기 표준안입니다. 구역을 나누는 구조적인 요소가 추가됨 (header, nav, article, section, aside, footer) 멀티 미디어 요소가 추가됨 (플러그인 없이 오디오와 비디오 재생이 가능) canvas 문서 선언 - 으로 간소화 웹 접근성 향상을 위해 사용을 지양하는 태그들 - frame, frameset, noframes CSS poiem HTTP하이퍼텍스트 전송 규약(Hypertext Transfer Protocol)은 웹 브라우저와 웹 서버간의 데이터가 교환되는 통신 규약입니다. 보안, HTTP Real World HTTP XSS 브라우저 보호“XSS(Cross-Site Scripting)”는 권한 없는 사용자가 웹 사이트에 스크립트를 삽입하는 공격 기법입니다. 이 공격을 방어하기 위한 방법을 찾아보면, 특수문자로 치환 혹은 문자열 p태그로 치환해서 스크립트가 실행되지 못하도록 하는 방법들이 있다. 공격을 감지했을 때, 페이지 로드를 중지시킬 수 있습니다. X-XSS-Protection HTTP Request클라이언트가 서버로 전달해서 서버로 액션이 일어나게끔 하는 메시지입니다. CORS 정책다른 출처에 접근할 수 있도록 권한을 부여하는 정책입니다. 웹서버에서 옵션을 통해 on/off 가 가능힙니다. Axios브라우저와 Node.js 를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리입니다. Restful API 통신 절차“Representational State Transfer”은 웹를 사용할 때 제약 조건들을 정의하는 소프트웨어 아키텍처 스타일입니다. HTTP URI 를 통해 자원을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD 를 제공합니다. JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타내어 데이터를 주고 받는 것이 일반적입니다. AJAX“Asynchronous JavaScript and XML” 비동기적인 어플리케이션 제작을 위한 웹 개발 기법입니다. 페이지 이동없이 고속으로 화면을 전환할 수 있다. 서버 처리를 기다리지 않고, 비동기 요청이 가능하다. 수신하는 데이터 양을 줄일 수 있고, 클라이언트에게 처리를 위임할 수도 있다. 플러그인 없이도 인터렉티브한 웹페이지 구현할 수 있다. JSONP각기 다른 도메인에 상주하는 서버로부터 데이터를 요청하기 위해 사용되었는데 상호 비보안 문제로 CORS 로 대체 되고 있습니다. 알고리즘 그래프 트리 정렬 (퀵, 병합, 힙) 이진 검색 설계 기법 알고리즘 트레이닝 리팩토링 켄트 백이 말한, 코드의 소리를 듣는 것은 코드가 원하는 것에 귀를 기울이는 것을 말합니다. 코드는 단순해지려는 욕망이 있습니다. 그걸 이뤄주는 것이 프로그래머입니다.&lt;리팩토링 자바스크립트 - 에반 버차드&gt; 배열 객체 대안 리팩토링 자바스크립트 함수 추출 전역 객체 API 간소화 OOP (계층구조, 상속구조)ㄴ 디자인 원리 Head First FP (함수형)ㄴ 함수 커링, 함수 바인딩, 메모제이션 그래픽 애니메이션ㄴ 캔버스: 2D Contextㄴ window: requestAnimation TDD 테스트-주도 개발 테스트 주도 개발로 배우는 객체지향 설계 도달해야하는 목적지를 테스트라는 안정장치를 통해 좀 더 견고한 방법으로 도달할 수 있게 해주는 설계 기법이다. 단위 테스트 비동기 코드 테스트 단위 테스트TDD 란, 테스트가 설계를 ‘주도’하게 하는데 있어, 기능과 성능처럼 겉으로 드러나는 품질 속성을 검증하는 활동을 하는 것을 말합니다. 이 중에서 가장 작은 기능을 테스트 하는 것을 단위 테스트라 합니다. 성능 메모리 성능 웹 워커 웹 소켓","link":"/plan/index.html"}],"posts":[{"title":"Javascript Array 이야기","text":"Split, Join 의 사용법array 를 string으로 string 을 array 로 바꾸는 연습은 너무나 중요하지만.. 헷갈림의 연속이다.array 를 string 으로 바꾸는 방법으로 콤마를 split 으로 분리해서 띄어쓰기를 주면 된다. 123const arr = ['first', 'second', 'third'];arr.toString().split(',').join(' '); // first second third Splice 사용법가장 많이 사용한 건 splice(start, deleteCount) 이다.이 삭제 방법은 배열의 길이도 줄어들기 때문에 편리하긴 하지만..반복문으로 인덱스를 찾아서 삭제해줄려고 할때면, 배열의 길이가 변경되어 다음 인덱스를 찾는 어려움이 있었다.이럴 땐, 삭제한 갯수만큼 인덱스에서 빼서 삭제해준다. 12345678let count = 0;arr.forEach((v) =&gt; { const start = v - count; arr.splice(start, 1); count++;}); Set 사용법iterator 를 활용하는 방법 중 반복되는 값의 중복을 제거하는 방법으로 유용한 방법이 있다.Set 을 사용하면 중복되는 값들 중 맨 앞의 값만 남기고 나머지는 무시가된다. 123456const foo = [1, 2, 3, 5, 1, 1, 2, 3, 5]console.log(new Set(foo)) // {1, 2, 3, 5}// 중복 제거 방법 (remove duplication)[...new Set([...array1 ,...array2])];","link":"/2019/08/18/array/"},{"title":"Load Image File","text":"서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 웹에서는 어떻게 표현할까? base64 데이터가 있으면, 이 데이터를 blob:URL 을 만들어 src 속성에 URL 입력해서 이미지를 보여주면 된다. 그런데 이렇게 되면 URL이 엄청 크게 되어 이 사이즈를 줄이는 방법이 필요하게 된다.iCaan님과 codeday님의 블로그를 보면 상당히 정리가 잘 되어 있는데.. base64 데이터를 인코딩해서 데이터를 출력해야한다. 1&lt;img src=&quot;data:image/jpeg;base64, base64_encode&quot;&gt;","link":"/2019/10/10/blob/"},{"title":"Hexo를 이용한 github 블로그 생성하기","text":"Hexo 프레임워크를 이용해 블로그를 작성하고, github에 자동 deploy 까지 설치하기12npm install hexo-cli -gnpm run server https://hexo.io/https://github.com/ppoffice/hexo-theme-hueman github 연동하기Project &gt; Settigns &gt; GitHub PagesBranch: main hexo deploy 를 하면, 마크다운 문서를 파싱하면서 배포파일을 만들어주는데 이 파일이 실제 웹 브라우저에서 보여져야할 파일이므로 이 역할을 기본 브랜치(main)에서 할 수 있도록 main 으로 적용했다.블로그 작성은 develop 브랜치를 둔다. Project &gt; Settings &gt; Secrets &gt; Actions HEXO_DEPLOY_TOKEN 이름으로 토큰을 등록한다.여기서의 토큰은 아래에서 받은 액세스 토큰을 사용한다. Account Settings &gt; Developer settings &gt; Personal access tokens 기간을 설정하면, 새로운 토큰을 발급하는데 이 발급된 토큰을 등록해준다. 참고: https://hyeo-noo.tistory.com/184 **주기적으로 Actions 토큰을 업데이트 해준다. **Mac 에서는 cmd + space &gt; keychain 접근에서 github.com 은 모두 삭제해준 후에 IDE에서 토큰을 재등록해준다. github deploy 등록하기Project &gt; Actionsworkflow 를 자동으로 생성할 수 있게 많이 제공하지만, 일단 ‘and set up a workflow yourself’ 를 클릭해서 개별 스크립트를 작성해준다. develop 디렉토리에 push 되었을 때, deploy 할 수 있게 만든다.GITHUB_TOKEN은 위에서 만든 HEXO_DEPLOY_TOKEN 변수를 적용해준다. 123456789101112131415161718192021222324252627282930// develop.yml # The type of runner that the job will run on runs-on: ubuntu-latest steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - name: Checkout source uses: actions/checkout@v2 - name: Use Node.js 16 uses: actions/setup-node@v2 with: node-version: 16 cache: 'npm' - name: Before install run: npm i -g hexo - name: Before script env: GITHUB_TOKEN: ${{ secrets.HEXO_DEPLOY_TOKEN }} run: | git config --global user.email [user_email] git config --global user.name [user_name]] sed -i &quot;s/__GITHUB_TOKEN__/${GITHUB_TOKEN}/&quot; _config.yml - name: NPM install run: | npm install - name: Hexo deploy run: | hexo clean hexo generate hexo deploy 참고: https://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/ Actions 실행되는 스크립트는 config 파일의 deploy 변수를 제대로 걸어주지 못하면, 아래와 같은 오류를 만나게 된다. fatal: could not read Password for ‘https://jelee603@github.com': No such device or address 해결 방법:등록된 토큰을 확인하고, 아래와 같이 변수를 추가해준다. 1234// _config.ymldeploy: type: git;//__GITHUB_TOKEN__@github.com/[user_name]/[user_name].github.io.gitrepo: https: branch: main; 위와 같이 작성하고, push 를 하게 되면, build 가 시작되고 정상적으로 완료되면, 블로그에 반영이 된다! Generate 포매터 변경scaffolds &gt; post.md에 필요한 포맷을 넣어두면 파일이 생성될 때, 자동으로 들어간다. 기본 포맷은 날짜형태가 중괄호 문법으로 들어가 있는데, 자동완성으로 코드가 변경되면 이 포맷이 깨지게 된다. 1234567// 원본 title: {{ title }}date: {{ date }}// 자동 변경title: { { title } }date: { { date } } 이렇게 저장되는 것을 방지하려면, 마크다운 파일의 경우에만 자동저장 기능을 꺼준다. 12345//settings.json&quot;[markdown]&quot;: { &quot;editor.formatOnSave&quot;: false,} 글쓰기 (마크다운) post 파일 생성 방법 12345678// new posthexo new [layout] &lt;title&gt;hexo serverex) hexo new &lt;title&gt;// drafthexo new draft &lt;title&gt;hexo server --draft 마크다운 하이퍼링크 연결알파벳은 반드시 소문자만 가능띄어쓰기는 -(하이픈)으로 구분 Reference https://hexo.io/ko/docs/writing.html https://www.w3schools.io/file/markdown-cheatsheet https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4#%EB%AC%B8%EB%B2%95 https://young-cow.tistory.com/21","link":"/2021/09/24/blog-hexo/"},{"title":"Jekyll을 이용한 github 블로그 생성하기","text":"Jekyll 프레임워크를 이용해 블로그를 작성하고, github에 자동 deploy 까지 환경설정하기Jekyll은 markdown(*.md) 파일을 생성하면 웹페이지로 서비스를 할 수 있는 정적 사이트 생성기이다. Ruby를 환경에서 동작하기 때문에 윈도우에도 Ruby를 설치 해야한다.RubyInstaller for Windows 를 설치하는데 (Devkit 가 포함된 버전)으로 설치하면 된다.Ruby+Devkit 2.5.5-1 (x64) 로 설치를 진행했다. Ruby Installer 사이트 생성하기Jekyll 공식사이트(한글 번역) 123456789101112// jekyll 설치gem install jekyll bundler// 사이트 생성jekyll new my-awesome-sitecd my-awesome-site// jekyll 실행 (window)my-awesome-site $jekyll serve --watch// jekyll 실행 (mac)bundle exec jekyll serve --watch 글 작성하기마크다운 파일명과 상단 텍스트는 규칙대로 만들어주고 저장을 하게 되면 home 에 리스트가 나타난다. 1_post / yyyy - mm - dd - title.md; 테마 적용하기제공하는 테마 중에서 댓글도 없고, 심플한 디자인인 ‘jekyll-theme-clean-blog’ 가 이 테마를 적용해보았다. 12345// installgem &quot;jekyll-theme-clean-blog&quot;// _config.ymltheme: jekyll-theme-clean-blog 새로 적용하면 아주 이쁘게 잘 보이는데.. 영문일 때 폰트만 이뻐서.. 한글 폰트는 다른걸 사용하고 싶어졌다. 폰트 적용하기Jekyll의 수많은 테마는 변경없이 사용할 수 있도록 제공되지만..블로그 테마를 변경하고 싶지 않고.. 커스텀하게 적용할 방법을 찾게 될 수 밖에 없는거 같다. 그래서 Clean Blog Jekyll 사이트에서 소스를 받아 분석을 시작했다. 우선 스타일 관련부분을 모두 가져와서 내 프로젝트에 그대로 덮어씌우고, 빌드를 했더니 _site 에 로컬 파일들이 들어갔다. 1234// 개별로 가져온 파일_sass / styles.scss;assets / vendor / startbootstrap - clean - blog;assets / main.css; 폰트는 구글에서 기본 제공한다는 폰트 중에 이쁜 나눔고딕체를 import 해서 사용했다. 123456789// _sass/styles.scss/* Import Google Web Font */@import url(http://fonts.googleapis.com/css?family=Nanum+Gothic:400,700);/* Style Blog Font */h1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure { margin-bottom: 15px; font-family: 'Nanum Gothic', sans-serif;} Code Block 스타일 적용하기폰트를 넣고 보니.. 코드 블럭이 이쁘지가 않았다.마크다운 문서에 소스코드가 저렇게 안 이쁘다니.. 다시 스타일을 찾기 시작했다. OneDarkTheme에 syntax-one-dark.css 을 가져왔다.assets/css/syntax.css 에 스타일을 적용하고, import 해서 사용했다. 123// _sass/styles.scss/* Import Highlight */@import &quot;../assets/css/syntax.css&quot;; 테마 요소의 다른 부분은 건드리지 않았고, 스타일만 앞으로 계속 커스텀하게 바꿔봐야겠다. Git Repository 블로그 적용하기Repository에 등록하면 프로젝트 명(git_id.github.io) 로 등록을 하면 바로 깃허브에서 확인을 할 수 있다.기본 jekyll 만 설치하면 바로 확인이 가능하다고 하는데..공식으로 지정된 테마만 등록이 가능하다고.. 커스텀 테마의 경우엔 404 ERROR 가 발생했다. 결국엔 필요한 파일의 일부가 아니라 전부를 내 프로젝트에 추가했다.그리고 시작된 jekyll 공부.. jekyll 에서 사용되는 문법은 Ruby로 작성된 Liquid 템플릿 언어이다.goodGid 님의 블로그가 정리되어있고, 이 언어를 사용해서 html을 만들고layout 탬플릿 파일이 동적 파일들(*.md)을 로드해서 정적파일로 변환해준다. git auto build jekyll 무시하기.nojekyll 빈 파일을 root 에 생성한다.","link":"/2019/08/07/blog-jekyll/"},{"title":"브라우저 동작 원리","text":"브라우저의 역할브라우저는 웹페이지를 서버에 요청하고 서버의 응답을 받아 표시합니다.서버로부터 html, css, javascript, 이미지 파일 등 응답받는 것입니다. html, css 는 렌더링 엔진인 html 파서와 css 파서에 의해 파싱되어 DOM, CSSOM 트리로 변환되어 렌더 트리로 결합됩니다. 브라우저는 렌더 트리를 기반으로 웹페이지를 표시합니다. 크롬은 대부분의 브라우저와 달리 각 탭마다 별도의 렌더링 엔진 인스턴스를 유지하고 있습니다.각 탭은 독립된 프로세스로 처리된다는 점이 장점입니다. 사파리와 크롬은 웹킷 엔진을 사용합니다. 동작 과정렌더링 엔진렌더링 엔진은 HTML 문서를 파싱하고 “콘텐츠 트리” 내부에서 태그를 DOM 노드로 변환해줍니다. 그 다음 외부 CSS 파일과 함께 스타일 요소도 파싱하게 되는데 스타일 정보와 HTML 표시 규칙은 렌더 트리라고 부르는 또다른 트리를 생성합니다. 렌더 트리 생성이 끝나면 배치(layout)가 시작되는데 각 노드가 화면의 정확한 위치에 표시는 되는 것을 의미합니다. 렌더링 엔진은 좀 더 나은 사용자 경험을 위해 가능하면 빠르게 내용을 표시하는데 모든 html 을 파싱할 때까지 기다리지 않고 배치(layout)와 그리기 과정을 시작합니다. 네트워크로부터 나머지 내용이 전송되기를 기다리는 동시에 받은 내용의 일부를 먼저 화면에 표시해주는 것이죠. 파싱html 파서는 script 태그를 만나면 자바스크립트 코드를 실행하기 위해 DOM 생성 프로세스를 중지하고 자바스크립트 엔진으로 제어권을 넘겨줍니다. 자바스크립트 엔진은 자바스크립트 파일을 로드하고 파싱하여 실행합니다. 자바스크립트의 실행이 완료되면, 다시 HTML 파서로 제어권을 넘겨서 브라우저가 중지했던 시점부터 DOM 생성을 재개합니다. 이처럼 브라우저는 동기적으로 html, css, javascript를 처리하게 됩니다.그래서 흔히, body 아래에 script 써주는 방법이 dom 생성이 지연되어 발생할 수 있는 오류를 예방하는데 좋은 방법이 되었습니다. 자바스크립트 엔진자바스크립트는 렌더링 엔진이 아닌 chrome 에서는 chrome v8 자바스크립트 엔진이 담당합니다. Reference https://poiemaweb.com/js-browser https://d2.naver.com/helloworld/59361","link":"/2021/12/01/browser-operation/"},{"title":"Browser 이야기","text":"CORS 란?Cross Origin Resource Sharing 의 줄임말로, 다른 도메인의 리소스를 요청할 수 있는 방법을 말한다.XMLHttpRequest 는 보안상의 이유로 동일한 도메인에서만 HTTP 요청을 보내도록 제한하고 있다. GET, POST 방식 중 Request 간단하게 요청하고 응답할 수 있다.Access-Control-Allow-Origin: * 모든 도메인으로 부터 접근이 가능하도록 허용하게 된다. 브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?HTTP (Hypertext Transfer Protocol) 의 줄임말로, 인터넷상에서 데이터를 주고 받을 수 있는 프로토콜이다.Andrew park님의 블로그에 잘 정리가 되어서 발췌한다. 브라우저는 오디오/비디오/이미지/텍스트 등 HTTP 통신을 통해서 문서를 가져와 화면에 출력을 해준다. 이때 TCP/IP 4계층 -&gt; 3계층 -&gt; 2계층 -&gt; 1계층 네트워크에 접근해서 데이터를 전달한다.4계층 - Application : 정보를 만들어 전달3계층 - Transport : 통신 노드를 연결2계층 - Internet : 통신 노드간 패킷 전송과 라우팅1계층 - Network Interface : 전기적 신호로 변환 받는 쪽에서는 반대로 해석한다. 모든 컴퓨터와 서버는 네트워크를 통해 외부에서 접근하려면 IP 주소가 필요한데 사용자는 브라우저에 URL을 입력하게 된다.이때 DNS 서버로 접근해서 해당 도메인 네임에 맞는 IP 를 받아온다. ** 패킷 : 서버에서 클라이언트로 전송되는 데이터의 포맷 브라우저는 어떻게 데이터를 받아올까?브라우저는 웹 사이트 문서를 받아오기 위해 클라이언트에서 Request 요청을 만들어 서버에 전달한다.서버는 Request 를 해석하고 요청에 해당하는 Response 를 전달한다. HTTP 프로토콜의 데이터 형식은 HEADER 와 BODY 로 구성되어 있습니다. HTTP/1.1부터는 Keep-alive 를 지원하게 되면서 문서가 다운로드가 완료되어도 클라이언트의 연결을 끊지 않고일정 시간동안 연결을 유지하며 재연결 과정없이 데이터를 유지하게 된다. 크롬 브라우저 성능측정FPS meter 로 확인해볼 수 있다. 크롬 개발자 도구 - Console 탭의 더보기 - Rendering - FPS meter 체크를 하면 확인할 수 있다.","link":"/2019/08/19/browser/"},{"title":"Canvas로 그래프 그리기","text":"Grid 내부에 그래프를 그려야하는데 캔버스와 SVG, DIV 방법이 있을 수 있는데 어느 것을 골라야할지 망설여졌다.분명 성능 이슈가 있겠지? 그래서 성능면에서 어떤 차이가 있는지부터 먼저 찾아보기로 했다. SVG 와 Canvas의 장단점SVG 복잡하지 않게 사용자 인터렉션이 가능합니다. (클릭, 마우스오버 이벤트 포함) 모든 엘리먼트는 DOM에 부착되어 자바스크립트와 CSS 통해 변형이 가능하며 텍스트를 지원한다. DOM 방식보다는 시간이 오래걸립니다. 성능은 화면이 크거나, 픽셀 수가 적을 경우(&lt;10k) 에 좋습니다. 고품질 문서 작업이나 정적 이미지의 조작 작업 등에 어울립니다. 스크립트와 CSS를 통해서도 수정할 수 있음 Canvas 단순한 그래픽 API로 픽셀 이상을 나타내기 어렵습니다. 화면상 다른 동작을 할때도 전혀 부담이 없습니다. 빠른 응답속도와 메모리 과부하가 가장 적습니다. 성능은 화면이 작거나, 픽셀 수가 많을 경우(&gt;10k) 에 좋습니다. 고성능의 애니메니션 작업이나 동영상 조작 등의 작업에 어울립니다. 스크립트를 통해서만 수정할 수 있음 캔버스는 그래픽이 잘 동작하고 성능이 저하되지 않도록 엘리먼트 사용을 최적화할 수 있는 방법이다. 성능 비교1px dom 25만개를 그렸을때 걸리는 시간에 대한 idchoi2님의 글을 읽어보고 나니.. 렌더링 시간이 확연히 차이가 있었다. 렌더링 시간 메모리 사용량 HTML DOM 4356.28ms (3~4초) 796.3M SVG 7799.06ms (6~7초) 1.7G Canvas 430.71ms (0.3~0.4초) 217.6M 결론그래서 렌더링 속도가 빠른 캔버스로 그려봤다. 1234567891011121314151617181920212223242526272829const draw = (curr) =&gt; { const canvas = document.createElement('canvas'); const ctx = canvas.getContext('2d'); const tot = 1000; const percent = Math.floor((curr / tot) * 100); const height = 25; if (this.width === null) { this.width = document.querySelectorAll('th')[2].clientWidth; } const width = this.width * (percent / 100); canvas.width = width + 50; canvas.height = height; ctx.fillStyle = 'green'; ctx.font = '10px Aria'; ctx.fillRect(0, 0, width, height); ctx.fillStyle = 'white'; // 퍼센트값 ctx.fillText(`${percent}%`, 8, height - 10); ctx.textAlign = 'right'; // 실제값 ctx.fillText(curr, width + 30, height - 10); ctx.textAlign = 'left'; return canvas;}; 결과{:width=”100%” height=”50%”}","link":"/2019/06/10/canvas/"},{"title":"코드스피츠 [객체지향 자바스크립트] 돌아보기","text":"코드스피츠 86 - 객체지향 자바스크립트 강의를 정리해봅니다. 프로그래밍의 기준을 어디에 둘까요?Value Context: 메모리 주소에 관계없이 값이 같다고 보면 같은 것이라 보는 관점 (값 기반) 할당하거나 가져올 때, 값을 사용한 경우는 끝없이 복사본을 만든다. 상태가 관리되서 안전한게 아니라, 계속 불변하는 값들을 만들어내서 안전해 보이는 것일뿐 연산을 기반으로 로직을 전개 identifier Context: 힙 메모리에 있는 주소로 보는 관점 (식별 기반) 기준을 정했으면, 하나의 컨텍스트만 쓰는 것을 권장합니다. 12345678910111213// 오브젝트 객체의 리터럴로 값을 만드는 방법const a = { a: 3, b: 5}const b = { a: 3, b: 5}console.log(a === b) // false (identifier context 기준으로 메모리의 주소를 보면 다른 값이다)console.log(JSON.stringify(a) === JSON.stringify(b)) // true (문자열로 환원하면, 값으로 보는것이라 같다) 객체지향 세계 객체는 하나의 원본입니다. 내부의 상태관리를 책임지는 객체입니다. 메시지를 통해서 위임해서 로직을 전개합니다. 객체 지향은 value context 를 쓰지 않습니다. Polymorphism substitution (대체 가능성) 확장된 객체는 원본으로 대체 가능합니다. (자식은 부모를 대신할 수 있습니다) internal identity (내적일관성) 생성 시점의 타입이 내부에 일관성 있게 참조됩니다. (어느시점에서든 만들어질 때 상태를 유지합니다) ex) 오버라이딩: 부모함수를 덮어서 없애고 자식함수로 대체하는 것을 말합니다. 12345678910111213141516171819const Worker = class { run() { console.log('working'); } print() { this.run(); }};const HardWorker = class extends Worker { // 하드워커의 부분집합이 워커, 확장될 클래스는 확장할 대상을 대체할 수 있다. run() { console.log('hardWorking'); }};const worker = new HardWorker(); // 워커의 인스턴스로 하드워커를 만듬console.log(worker instanceof Worker); // substitutionworker.print(); // internal identity Object Essentials (객체의 본질) Maintenance of State (데이터를 은닉): 객체의 속성이 모두 프라이빗이면서 내 데이터를 관리합니다. Encapsulation of Functionality (기능의 캡슐화): 메소드를 감춥니다. 외부에 캡슐화해서 제공합니다. Isolation of Change (격리): 변화의 여파를 막고 격리시킵니다. 오염시켰을 때, 전역 처리기를 걸어둡니다. 12345678910111213const EssentialObject = class { #name = &quot;&quot;; // hide state #screen = null; constructor(name) { this.#name = name; } camouflage() { this.#screen = (Math.random() * 10).toString(16).replace(&quot;.&quot;, &quot;&quot;) } get name() { return this.#screen || this.#name; }} 알려진 기본 설계요령 (SOLID 원칙) SRP (Single Responsibility) 단일책임 코드를 고쳐야하는 이유는 하나뿐이야라고 만드는 방법입니다.잘못하게 되면 산탄총 수술이 필요하게 됩니다.다른 객체에게 의뢰한다 = 다른 객체에게 메시지를 보내는 것. OCP (Open Closed) 개방폐쇄 기존의 객체를 건드리지 않게 설계를 해야합니다.새로운 문제가 일어났으면 새로운 객체를 만들어서 새로운 것에 대한 해결책만 내릴 수 있게 만듭니다. 인터페이스나 추상클래스를 상속받아서 처리합니다. 그 다음번 문제도 추상화를 받아서 해결합니다. LSP (Liskov Substitution, 리스코프 치환) 부모쪽으로 캐스팅해서 형을 변환하는 것을 말합니다.(업캐스팅) Ex) 추상층: 생물(숨을 쉰다) 구상층: 사람(생물, 다리로 이동한다), 타조(생물, 다리로 이동한다), 아메바(생물) ISP (Interface Substitution, ISP 치환) 리스코프 치환법칙을 위반(똑같은 위치에서 같은 기능을 하는 경우에 위임이 불가능할 경우)하게 되면, 인터페이스로 분리하도록 해봅니다. 역할에 맞게 분리해서 만들어야합니다. 소유 방법으로 분리한다. 인터페이스를 만들어서 오버라이딩하면 됩니다. DIP (Dependency Inversion) 의존성 역전의 법칙, 의존성은 항상 부모에서 자식으로만 상속됩니다. 123456789101112const Manager = class { #workers; constructor(...workers) { if (workers.every((w) =&gt; w instanceof Worker)) this.#workers = workers; } doWork() { this.#workers.forEach((w) =&gt; w.run()); }};const manager = new Manager(new Worker(), new HardWorker());manager.doWork(); 용어 정리 DI (Dependency Injection) 의존성 주입 DRY 중복방지 Hollywood Principle 의존성 부패방지물어보지 말고 요청하지 않습니다.. ex) 시간날 때, 나한테 연락을 줘. Law of demeter 최소 지식최소한의 지식만 가지고, 내부에서 객체의 타입, 원래 필드의 타입, 인자로 가져온 객체의 타입만 알게 합니다.너무 많아지면, train wreck (열차전복) 현상이 일어납니다. Inversion Of Control 제어 역전flow control (흐름 제어) = 역으로 대치하겠다. 즉, 위임하겠다라는 의미입니다.프로그램 실행 통제 : 어떠한 흐름으로 제어할지 결정하는 것입니다.제어를 추상화하고 제어문을 한번만 작성하면, 일반화합니다.개별 제어의 차이점만 외부에서 주입합니다.실제구현: 전략패턴 &amp; 템플릿 메소드 패턴 &lt; 컴포지트 패턴 &lt; 비지터 패턴 SRP 준수하는 객체망이 문제를 해결하는 방법은 뭘까요?다른 객체에게 의뢰하는 것입니다. 메시지 - 의뢰할 내용 오퍼레이션 - 메시지를 수신할 객체가 제공하는 서비스 메소드 - 오퍼레이션이 연결될 실제 처리기 의존성의 종류 객체의 생명 주기 전체에 걸친 의존성 상속(extends) 연관(association) : 상속을 소유를 합니다. 의존성이 높거나 역할을 개개인별로 너무 많이 부여하면 코드가 망가집니다. 부모는 방탄이다. 필드의 객체 타입을 알고 있습니다. 각 오퍼레이션 실행 시 임시적인 의존성 이러한 의존성을 낮추고 격리시키는 방법을 배우는 것이 객체지향 방법론을 배우는 이유입니다. MVVM 패턴을 알아보고 실습하면서 점진적으로 수정해가는 과정을 배운다.MVCModel -&gt; Controller -&gt; View -&gt; Model 뷰가 모델을 알고 있는 것이 문제가 됩니다. 모델은 비지니스 모델인데 화면에 표시되는 이유와 관련 없는데 밀접하게 연관되서 동작하게 됩니다. 서버 프로그래밍에서는 컨트롤러로 가공하는 방법이라 괜찮은데 클라이언트 프로그래밍에서는 양방향이 서로 연동되면 안되서 문제가 됩니다. 제왕적 컨트롤러 MVCView -&gt; Controller -&gt; Model -&gt; Controller -&gt; View 뷰가 컨트롤러를 통해 모델을 바꾸고 뷰의 변화나 모델의 변화가 필요할 때, 컨트롤러를 변경하게 됩니다. MVPView (getter, setter) - Presenter -&gt; Model -&gt; Presenter -&gt; View (getter, setter) 뷰는 인터페이스로써 세터와 게터가를 갖고 있습니다. 프레젠터 입장에서 뷰의 게터, 세터를 호출합니다. 사실 모델을 모르고 호출하게 되므로, 뷰가 모델을 건드릴 수가 없습니다. 프레젠터는 통제만 하는 역할을 합니다. MVVMView &lt;- Binder(옵저버) -&gt; ViewModel -&gt; Model -&gt; ViewModel 뷰모델은 순수한 뷰입니다. 뷰의 변화가 있으면 바인더가 뷰모델을 갱신해줍니다.진짜 뷰와 뷰모델의 의존성을 바인더가 컨트롤하게 됩니다. 여기서도 뷰모델이 뷰를 완전히 모르게 합니다. 코드 작성 (소스)1회차 TypeCheck(): 자바스크립트는 런타임에 에러가 발견되는 즉시, throw 로 멈추게 하는 코드가 필요합니다. 타입검사를 해서 ‘string’ 또는 객체인지를 비교합니다. 1typeof type == 'string' // type 이 string 이 아니면 객체이다. 동등 연산자는(==) 강제 형변환을 일으키지 않아서 속도가 빠르다. 그래서 미리 체크하는 함수를 만들어서 사용하면 매번 일치 연산자(===) 로 비교하는 작업을 줄일 수 있다. 일치 연산자는 자료형 검사를 먼저하게 되서 속도가 느리다. Binder Class: 어떤 뷰 모델과 매칭할지 내부 hook과 뷰모델을 연결해서 반영해줍니다. 바인딩에는 2가지 방식있습니다. 태그를 스캔하게 만들어서 만드는 방식, 뷰와 모델을 분리해서 관리할 수 있습니다. (앵귤러의 방식) 데이터와 연결되어 있는 뷰를 만들어서 이 뷰를 꽂게하는 컴포넌트 방식, 자기 뷰를 모델과 연결해서 만들어둡니다. (리액트의 방식) Scanner Class: 현재의 뷰모델을 이용해서 스캔합니다. 스캐너가 아이템을 체크하면서 Binder 클래스에 아이템을 추가합니다. SRP원칙을 기반으로 HTML 해석 스캐너를 따로 둡니다. HTML5 에서는 ‘data-‘ 만들지 않는 속성은 유효성 검사에서 모두 깨지게 되어있습니다. 속성을 만들 때는 ‘data-‘ 프리픽스로 만들어줍니다. 애니메이션 효과 isStop 플래그로 색상이 변경된 후, 클릭했을 때 멈추도록 설정해줍니다. 1234567891011121314151617181920212223242526272829303132const viewmodel = ViewModel.get({ isStop: false, changeContents() { this.wrapper.styles.background = `rgb(${ parseInt(Math.random() * 150) + 100 },${parseInt(Math.random() * 150) + 100},${ parseInt(Math.random() * 150) + 100 })`; this.contents.properties.innerHTML = Math.random() .toString(16) .replace('.', ''); binder.render(viewmodel); }, wrapper: ViewModel.get({ .... events: { click(e, vm) { vm.isStop = true; console.log('click', vm); }, }, }), ...});const f = (_) =&gt; { viewmodel.changeContents(); console.log(viewmodel.isStop); if (!viewmodel.isStop) requestAnimationFrame(f);};requestAnimationFrame(f); 2회차 ViewModel &lt;- Binder[BinderItem] &lt;- Scanner -&gt; HTMLElement ViewModel Class [강의]: 커스텀 key에 값을 추가할 수 있도록 변경합니다.DOM의 프로퍼티(엘리먼트)와 어트리뷰트(태그) 값을 업데이트 할 수 있습니다. 1234567891011121314151617 Object.entries(data).forEach(([k, v]) =&gt; { if ('styles.attributes.properties'.includes(k)) { this[k] = ViewModel.define(this, k, v); } else { Object.defineProperty(this, k, { enumerable: true, get: (_) =&gt; v, set: (newV) =&gt; { v = newV; }, }); if (v instanceof ViewModel) { v.subKey = k; } }}); Binder Class [강의] : 뷰를 그리는 제어문은 바인더에 작성합니다. *** ISP 제어역전이 성립합니다. 데이터를 조작하는 코드만 작성합니다. 123456789101112render(viewmodel, _ = type(viewmodel, ViewModel)) { this.#items.forEach((item) =&gt; { const vm = type(viewmodel[item.viewmodel], ViewModel), el = item.el; Object.entries(vm.styles).forEach(([k, v]) =&gt; (el.style[k] = v)); Object.entries(vm.attributes).forEach(([k, v]) =&gt; el.setAttribute(k, v) ); Object.entries(vm.properties).forEach(([k, v]) =&gt; (el[k] = v)); }); } Scanner Class [강의]: HTML을 스캔하고, hook 을 만들어서 바인더와 연결해주는 작업을 합니다. 재귀로 함수가 함수를 호출하다보면 임시 메모리가 쌓이면서 스택오버플로우가 발생하게 됩니다. 해결하려면, 별도의 메모리 공간 스택을 만들고 while 로 돌면서 처리를 하면됩니다. 동적으로 스택을 빼가면서 만듭니다. 12345678910const stack = [el.firstElementChild];let target;while ((target = stack.pop())) { this.checkItem(binder, target); if (target.firstElementChild) stack.push(target.firstElementChild); if (target.nextElementSibling) stack.push(target.nextElementSibling);} ViewModel Class [강의]: 새로운 클릭했을 때의 이벤트를 추가합니다. style, attribute 를 key 로 잡아줍니다.wrapper 랑 contents 를 바꾼 후에 한번만 렌더합니다. 1234567891011121314151617Object.entries(data).forEach(([k, v]) =&gt; { if ('styles.attributes.properties'.includes(k)) { this[k] = ViewModel.define(this, k, v); } else { Object.defineProperty(this, k, { enumerable: true, get: (_) =&gt; v, set: (newV) =&gt; { newV = v; }, }); if (v instanceof ViewModel) { v.subKey = k; } }}); 3회차 기존 바인더 코드를 전략적으로 변경하는 방법 (바인더가 모델이 변하면 자동으로 변경되게끔 만드는게 목적입니다) 전략 패턴 (Strategy)어떤 문제를 해결하기 위한 핵심적인 지식 부분을 의미합니다. 객체에서 상태는 프로퍼티, 행동은 메소드로 표현합니다. 변화가 생길 때마다 코드를 변경하는게 아니라 객체로 변경합니다. (컴포지션 패턴 -&gt; DI) 내부에서 만들면 다시 하드코딩이 됩니다. 코드를 변경하지 않고 외부에서 공급받으면 객체에 대한 의존성을 줄일 수 있습니다. (DI) 반드시 인터페이스나 타입으로 변환합니다. 내부의 코드를 프로세서와의 계약으로 풀었기 때문에 프로세서로 풀어줍니다.(알고리즘의 일반화) 공통로직으로 묶고, 타입이 제공하는 메소드로만 알고리즘을 수정하는 것 -&gt; 알고리즘의 일반화 템플릿 패턴기존 Binder 기능을 Processor Class를 생성해서 위임합니다. 12345678910111213141516171819202122232425262728293031const Processor = class { cat; constructor(cat) { this.cat = cat; Object.freeze(this); } process( vm, el, k, v, _0 = type(vm, ViewModel), _1 = type(el, HTMLElement), _2 = type(k, 'string') ) { this._process(vm, el, k, v); } _process(vm, el, k, v) { throw 'override'; }};binder.addProcessor( new (class extends Processor { _process(vm, el, k, v) { el.styles[k] = v; } })('styles')); 자식한테 위임하는 방법 (템플릿 메소드 -&gt; hook 이라 부른다.) 옵저버 패턴 (Observer)감시하는 쪽(observer)는 상대적으로 편합니다.감시 당하는 쪽(subject)은 변화가 일어나면 notify 로 알려줘야해서 subject가 더 피곤하다 보면 됩니다. ViewModel Classnotify 를 만들어 변경될 때마다 감지를 할 수 있도록 변경합니다. 타겟이 되는 결과 오브젝트를 해석한 후 프로퍼티로 세팅해줍니다. Binder ClassViewModelListener 의 책임도 생기게 됩니다. 그래서 인터페이스 별로 분리해줘야합니다. watch, unwatch 로 등록해서 뷰모델을 받아서 noti가 안 왔을 때, 렌더를 해줄 수 있도록 변경합니다. 컴포지트 패턴 (Composite)동일한 문제를 위임을 반복해서 취합하는 방법을 말합니다. 뷰모델인 자신이 자식 뷰모델을 옵저버가 되야합니다.자신의 변화를 알아차려야하므로, 뷰모델의 리스너가 되야합니다. 리스너가 아닐 때까지 계속 반복합니다. 백바인드를 걸어준다. 옵저버 패턴의 인포 객체가 넘어오면 이벤트를 알아야합니다. 리퀘스트 애니메이션 프레임 당 모든 걸 취합해서 noti 를 한번만 보내줍니다. vm 커버하는 단일 루프 하나에 등록해서 씁니다. 배열 루프가 훨씬 빠릅니다. (리스너를 100개 다는 것보다 리스너 1개만 걸고 루프 돌리는게 훨씬 빠름) 계속 하다보면 쉬워집니다. 그래프 순회나 재귀로 푸는 것보다 컴포지트 패턴이 훨씬 쉽게 풀립니다. 비지터 패턴2개 이상의 알고리즘에 개입하도록 외부에서 공급되는 전략입니다.단일 컨트롤, 다양한 메서드 다른 곳에서 역할 수행하는 경우에 모두 비지터의 가능성이 있습니다. Client뷰모델의 부모의 isStop 을 업데이트해줍니다. 4회차 책임에 맞는 권한을 부여합니다. ISP뷰모델의 역할에 옵저버 패턴의 서브젝트 역할이 어울리지 않는 거 같습니다. - (역할분리를 해봅니다)역할에 맞게 ViewModel 을 개선하면서 ViewModelSubject 를 만듭니다. 자바스크립트는 다중상속이 불가능합니다. 뷰모델 리스너와 뷰모델 서브젝트를 상속 받은 것을 사용해야만합니다. 리스너가 1개라도 생겼을 때, watch 할 수 있도록 만듭니다. 리스너가 없으면 unwatch 하고 빼줍니다. #inited 플래그를 이용한 간단한 제어입니다. 싱글스레드로 변경할 수 있는 방법이 한번뿐이라 쉽습니다. 역할을 분리하고 행위에 대해서 생각합니다. 작명법으로 해결되지 않습니다. 섬세한 권한 조정getter, setter 의 진짜 값을 갖고 있는 걸 백그라운드 필드라합니다. 코드에서는 트랜잭션을 표현하려면, 함수로 만들어야합니다.한번에 일어나는 일인지(트랜잭션)를 함수로 표현하는 것이다.(외부에서도 필요할 때, 함수로 가져갈 수 있도록) public getter, private setter 패턴 -&gt; 자바스크립트에서 읽기전용을 구현하는 방법입니다. Visitor 패턴보살핌을 받는애가 있고, 그 애가 비지터에게 자기자신을 주면 비지터가 대신 돌아주는 것을 의미합니다.제어를 위임하기 위해 코드를 객체로 변경한다. 어려운 자료구조나 특별한 코드에 대해서 제어코드가 완전히 외부로 위임되서 한 곳에 모여있습니다.특수한 제어를 빼놓기 위해 사용합니다. DOMVisitor Class DOM의 반복은 DOMVisitor의 역할입니다.DOMVisitor는 루프를 돌 필요가 있는 모든 곳에서 사용할 수 있는 함수가 됩니다. DOMScanner Class Binder가 스캐너의 역할을 가져가고 Scanner는 checkItem 정책을 돌고 HTML만 공급합니다.그래서 스캐너는 역할에 안 맞기 때문에 코드를 분리해서 위임합니다. 소프트웨어 설계란, 코드를 재배치하는 기술을 설계라합니다.코드의 역할을 알고 분리할 줄 알아야한다. 객체를 재배치하는 게 아닙니다. 추상계층 불일치계약을 잘못 쓰면 의존성을 잘못 설정하면, 망한 코드가 됩니다.어떤 형에서는 부모를 사용하고 어떤 형에서는 자식을 사용하다보면, 불일치가 일어나게 됩니다. 연습을 많이하면 역할별 분리하는 습관이 생기게 되는데 한쪽이 추상계층이면, 반대쪽도 추상계층으로 맞춰줘야 불일치가 없어진다. 추상계층과 연결될 수 있게 바꾸면 OCP를 수정하지않고 확장할 수 있도록 바꿀 수 있습니다. 기능적인 부분과 도메인적인 부분을 나눠서 개발해야 추후에 도메인 부분만 교체할 수 있습니다. 설계 종합좋은 코드는 복잡성을 쪼개서 최적화를 적용할 수 있게 됩니다.가상화된 렌더러 시스템은 어떤 플랫폼으로든 교체가 가능하다는 점이 장점입니다.많은 구현체들은 직접 바인더 콜하는 경우가 많아졌고, 옵저버 패턴으로 연결된 부분만 복잡도가 높게 되었습니다. 5회차문제점 짚어보기문제 1. binder 의 viewmodelUpdated 가 전역변수를 참조하고 있다.자신의 뷰모델을 보내주도록 변경해줍니다. set 안에 별도의 속성을 넣는 건 애매한 일이기에 인자에 따로 플래그를 준다. 문제 2. 바인더에는 vm 의 특정 키를 인식하는 코드가 없다.뷰모델에는 key가 확정(하드코딩)되어있는데 다른 서브키를 가질 수 없다. 임의의 키를 매핑할 수 있는 코드로 수정한다. (하드코딩을 제거한다.) 처리기는 데이터 구조가 매핑된다. 데이터 구조도 동적으로 바꾸는과정이 필요하다.define 이 재귀로 호출하게끔 한다. reduce 는 초기값은 두고 첫번째 인자 accumulator 가 계속 앞에 인자로 들어오고 두번째 인자는 배열의 원소들이 들어온다. 그 다음에 있는 accumulator 있는 건 함수가 반환하는 값으로 변경된다. 오브젝트로 반환 될거다. ex) Object.entries().reduce(() =&gt; {}, {}) 문제3. setDomProcessor 세팅을 넣어준다.바인더에게 데코레이팅 해준다. 문제4. binder에 공개 정보를 너무 많이 주고 있다? 프로세스의 자율성이 떨어진다. 핵심 코어의 복잡성을 알려주기 위해 바인더가 무거워졌습니다. 본체는 가볍과 바깥쪽에 마지막 구현체의 실력에 따라 달라지도록 만든 것입니다. 디자인이나 설계는 정답이 조직안에 있습니다. 누가 더 난이도 높은 쪽을 가져갈 것인가.디자인 의사결정은 코드의 배치 결정인데 항상 사람의 역량을 보고 결정해야합니다. 데코레이터 패턴 [강의]자기가 일하고 계속 다음번에게 넘기는 것을 말합니다.바인더에 도움없이 프로세서 세터를 만들어줍니다.소유하는 것과 격리시켜서 분리할 수 있습니다. 다음번 애한테 일을 시킬지 말지 결정해서 중간에 멈출 수 있는 패턴은 Chain of Responsibility 패턴이라 합니다. 루프가 나왔을 때, 객체로 바꾸는 방법이 링크드리스트로 만드는 데코레이터 패턴입니다. 새로운 ol, li 만들기확장가능한 밑작업 위에 템플릿 프로세서를 만듭니다.오브젝트의 검증 -&gt; err 순수함수 사용 or 클래스로 정의 클래스의 싱글톤 객체와 static 의 차이static 은 상속이 안된다. 단순 함수와 상태만 있습니다. 쉴드 패턴검증되어있는 코드, 모든 코드가 안정화된 것만 내려오도록 작성합니다. 1234567if (..){ template = ... data = ...}// black list : 코드의 검증// white list: 위에 데이터를 이용하는 코드 (실수를 방지하기 위해)const WL = { template, data } 유지보수 면에서는 로직 코드가 시작되기 전에 모두 검증이 끝나있어야합니다. 옵셔널 코드와 쉴드패턴의 차이는 잘못되면 옵셔널은 전개가 되지 않습니다. 강의 중간중간에 개발에 도움되는 얘기를 많이 듣게 됩니다.코드도 너무 잘 짜시고, 패턴대로 수정해나갈 수 있다는게 정말 엄청 신기하고 멋지다는 생각이 절로 듭니다. 저는 직접가서 보기도 했었지만..(유튜브에 뒷통수가 출연했어요!)주옥같은 강의를 여러번 돌려볼 수 있다는게 너무 다행이란 생각입니다:)","link":"/2022/01/27/codespitz-86/"},{"title":"썸네일 이미지 생성","text":"블로그엔 썸네일(thumbnail) 이미지도 같이 추가해야하는데 매번 그림을 찾는것도 그 그림의 픽셀이 깨지는 것도 번거로워서 글자와 배경만 바뀌는 심플한 이미지로 대체해봤습니다. 아래는 그 썸네일 이미지를 생성할 수 있는 페이지입니다. 텍스트를 입력하고, 색상을 선택하면 이미지를 다운 받을 수 있고, 색상값은 미리 대중화 된 걸로 설정해두었습니다. 코드는 배경과 텍스트 정렬이 된, 캔버스를 그려두고 저장했을 때, toDataURL() 이용해서 png 파일를 만들고, 임시로 &lt;a link&gt; 만들었다가 지우는 방법으로 다운로드 할 수 있게 만들었습니다. 컬러값 부분은 이벤트 버블링이 되니 부모 div 에 클릭 이벤트를 걸어두고 버튼마다 데이터 속성값으로 버튼을 눌렸을 때, 색상이 바뀔 수 있도록 처리했습니다.","link":"/2021/11/10/create-thumbnail/"},{"title":"CSS Grid 와 Flex 사용법","text":"Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?Grid 는 중첩이 필요할 땐, 항상 grid 로 재분할이 필요하다. 1234567891011121314151617181920212223242526272829.main { width: 100%; height: inherit; display: grid; grid-template-rows: repeat(40, 1fr); grid-template-columns: repeat(1, 1fr); grid-gap: 5px; background: #ccccee; padding: 10px;}.main-bottom { grid-row: 25/41; display: grid; grid-template-rows: repeat(10, 1fr); grid-template-columns: repeat(2, 1fr); grid-gap: 5px;}.main-bottom-left { grid-row: 1/11; grid-column: 1/1; background: lightpink;}.main-bottom-right { grid-row: 1/11; grid-column: 2/2; background: lightpink;} Grid 에서 크기가 고정된 아이템이 잘 정렬되게 보이려면, 감싸고 있는 컨테이너 박스에서 grid-auto-rows: max-content 를 추가해준다. Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?Flex 는 align-items를 사용하면 컨텐츠를 정렬할 수 있다. 12345678910.main { display: flex; justify-content: center; align-items: center; border-radius: 50%; height: 100px; width: 100px; border: 1px solid #ffffff; text-align: center;} 반응형 레이아웃미디어 쿼리를 사용한다. 1@media only screen and (max-height: 1080px) { body { backgroud: 'red' } } 웹브라우저의 높이 해상도가 1080px 이하 일때, 클래스의 스타일을 변경해준다.","link":"/2019/08/16/css-grid-flex/"},{"title":"CSS 선택자","text":"CSS 선택자는 CSS 규칙을 적용할 요소를 정의합니다. 타입 선택자 분류는 다음과 같이 쓴다. 123456789101112131415ol li span { /* 공백 : 하위 선택자 */}body &gt; p { /* &gt; : 자식 선택자 */}div + p { /* + : 형제 선택자 */}* { /* 전체 선택자 */} 마지막 라인 없애는 방법, last-child 선택자를 이용하자. 123456.menu li { border-bottom: 1px solid #ccc;}.menu li:last-child { border: none;} 첫번째 스탸일 변경 방법 first-child 선택자를 이용하자. 123456&lt;article&gt; &lt;p&gt;First paragraph...&lt;/p&gt; &lt;p&gt;Lorem ipsum...&lt;/p&gt; &lt;p&gt;Dolor sit amet...&lt;/p&gt; &lt;p&gt;Consectetur adipisicing...&lt;/p&gt;&lt;/article&gt; 123p:first-child { font-size: 1.5em;}","link":"/2021/11/12/css-selectors/"},{"title":"D3 필요한 메서드 정리해보자","text":"D3 차트에서 가장 많이 쓰이는 속성transform 속성은 Axis를 그릴 때, call 함수로 데이터를 바인딩하면서 간격을 지정해준다.translate(x, top) : x 축과 top 위치가 시작점 D3 라인 그리는 방법12345678910111213var svg = d3 .select('#segment') .append('svg') .attr('width', 800) .attr('height', 200);svg .append('line') .attr('x1', 10) .attr('y1', 10) .attr('x2', 700) .attr('y2', 100) .attr('stroke', 'red'); [참고] [d3-graph-gallery] https://www.d3-graph-gallery.com/graph/shape.html","link":"/2019/10/01/d3/"},{"title":"ES6 문법","text":"1.import/export클래스를 사용할 수 있게 되면서 export default 클래스명으로 출력하는 경우가 많아졌다.기능과 역할에 맞게 분리해서 사용하는 측면에서도 좋지만,기본값을 사용할 경우에 오버라이딩해서 쓸 수 있게 만들면 좋을거 같아 사용한다. 그래서 함수도 Util 의 기능으로 만들어서 쓸려고 해보니, 문제가 발생했다. export default {함수명}으로 사용을 해준다. 그리고 import 파일명 from 파일위치 로 지정을해두면파일명.함수명 으로 접근해서 사용을 할 수 있다.메서드가 아닌 함수를 개별로 호출해서 쓰고 싶을때 사용할 수 있을 거 같다. 2. spreadSpread 연산은 전개연산자로 Object 를 풀어서 나타낼 수가 있게 되었다.덕분에 뒤에 있는 값을 덮어씌워서 merge 하는데 자주 사용하는데,중첩된 Object 의 경우엔 같은 키만 merge 해주고 싶은 경우가 발생한다.그래서 한번 더 연산을 해주면 된다는 글을 참고해본다. 참고: https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties 12345678910const source = { a: 2, b: 3, c: { d: 2, d2: 1 } };const target = { c: { d: 4 },};const result = { ...source, ...target };console.log(result); // {a:2, b:3, c: {d:4}}const result2 = { ...source, ...target, c: { ...source.c, ...target.c } };console.log(result2); // {a: 2, b: 3, c: {d: 4, d2: 1}} 최대값, 최소값ES6 문법의 Spread 연산자를 사용할 수 있게 되면서 최대값과 최소값을 간편하게 계산할 수 있게 되었다.Spread 연산자(…)는 배열을 여러개의 인자 값이나 (키-값)객체로 확장할 수 있다. 1234const test = [190, 10, 16, 20, 60, 30, 40, 20, 60, 15, 50, 22, 8];console.log(Math.max(...test)); // 190console.log(Math.min(...test)); // 8","link":"/2020/02/04/es6/"},{"title":"VSCode 에서 ESLint와 Prettier 설정방법","text":"ESLint 와 Prettier 를 적용 후 VSCode에서 자동 저장이 되게 하기 위해서는 다음과 같이 코드를 추가해주면 됩니다. Settings 파일을 직접 수정하는 방법command + shift + P : Command Palette 1234567// VSCode &gt; settings.json{ &quot;editor.codeActionsOnSave&quot;: { &quot;source.fixAll.eslint&quot;: true // ESLint }, &quot;editor.formatOnSave&quot;: true, // Prettier} IDE에서 파일을 설정하는 방법Preference &gt; Settings (⌘ ,) 규칙 설정 방법ESLint는 코드가 정의된 규칙과 일치하지 않을 때, 판별해주는 정적 코드 분석 도구입니다. 자동저장 시, 코드 스타일을 바꿔줄 수 있습니다. 문자열 배열의 경우에 쉼표 뒤에 아래로 한칸씩 떨어지는 스타일을 더 선호한다면, 규칙을 추가해서 사용하면 됩니다. 123456// .eslintrc{ &quot;rules&quot;: { &quot;indent&quot;: [&quot;error&quot;, 4, { &quot;ArrayExpression&quot;: 1 }] }} Prettier는 공통 스타일 가이드에 따라 더 이쁘게 표현하기 위한 코드 포맷터입니다. 1234567// .prettierrc{ &quot;trailingComma&quot;: &quot;es5&quot;, &quot;tabWidth&quot;: 4, &quot;semi&quot;: true, &quot;singleQuote&quot;: true} 대부분 2가지를 같이 사용하기에 일관성 있는 코드가 될 수 있게 자동 저장시에 반영될 수 있게 적용해서 사용하시길 바랍니다.","link":"/2022/01/15/eslint-prettier/"},{"title":"Javascript Event 이야기","text":"이벤트 리스너를 등록해서 사용할 때, removeEventListener 가 필요할까?전체 화면에서 히든 페이지가 필요해져서 window 객체에 keyup 이벤트를 등록하는 방법으로 문제를 해결한 경우가 있는데,이 이벤트를 제거해줄 필요가 있는지에 대해서 고민이 되었다. 이벤트 리스너의 this 는 어떻게 인지할까?this 를 잘 바꿔줄 때, 필요한 메서드가 call, apply, bind 이다. mygumi님과 zerocho님의 글이 도움이 되었다.call, apply 는 함수를 호출하는 거고, 인자를 넘기고 반환값을 돌려받는 창구가 있을때 주로 사용한다.call 은 파라미터 중 첫번째 인자를, 내부에서 사용할 this 로 만들어준다.apply 도 마찬가지이고, 대신에 파라미터를 배열로 넘긴다.bind 는 this 만 바꾸고 호출하지는 않는다. 원본 함수를 호출하도록 하드 코딩된 새로운 함수를 생성한다.이건 다른말로 콜백 형식을 만들어줄 수 있다. 1234567891011121314151617function Person() { this.name = this.name || 'default'; this.authority = 'guest'; return this.name + ' is ' + this.authority;}// call 은 새 함수로 만들어서 호출한다.Person.call({ name: 'bill' }); // &quot;bill is guest&quot;// 1. bind 는 this을 교체해준다.const userInfo = Person.bind({ name: 'test' }); // undefined// 2. 함수를 호출한다.userInfo(); // &quot;test is guest&quot;// call 은 새 함수로 만들어서 호출한다.const userInfo3 = Person.call({ name: 'test3' }); // undefineduserInfo3; // &quot;test3 is guest&quot; 클로저는 어떻게 사용할까?생명주기가 끝난 함수의 변수를 외부 함수에서 호출하는 걸 일컬어 클로저라 한다.클래스로 만든 내부 이벤트를 외부에서 제어를 하려고 고민을 하다가 클로저를 응용할 수 있겠다 싶었다.위에 bind 는 스코프만 바뀌는 거고, call 은 원본 함수를 호출할 수 있는 새 함수로 만들어준다. 123456function funcA(value1, value2) { console.log(`value: ${value1} ${value2}`);}funcB = () =&gt; funcA.call(this, 2, 3);funcB(); // value: 2 3","link":"/2019/08/22/event/"},{"title":"Git 이야기","text":"안 쓰면 잊어버리는 Git 명령어Git은 만들고 나면 크게 문제가 없고, 충돌나지 않으면 별 문제없이 편하지만, 가끔 발생하는 문제에 대해서는 조치 방법을 위해 정리해둘 필요가 있다. Git First 123// git clone 할때, 레포가 없다하면.. 주소를 변경해주자..https://깃ID@github.com/레포주소 git clone XXX git init git add README.md gitcommit -m 'first commit' git push origin main Git Branch 12git checkout -b develop(브랜치명) git add . git commit -m 'xxx' git push origindevelop // hotfix git checkout main git checkout -b hotfix/YYYYMMDD gitignore 파일을 만들고 추후에 파일들을 삭제하고 싶을땐, 항상 캐시문제로 stage 에 올라간 파일을 삭제하기가 어려웠다.hopeless 블로그에서 보면 제외할 폴더나 파일을 cached 된걸 삭제해줘야한다고 한다. Git Ignore 12// .gitignore 파일에 제외할 폴더 추가 ex) .idea/ git rm -r --cached . git add .git commit -m 'ignore 수정' Git Rebase 12git rebase -i HEAD~2 // (직전 커밋한 갯수 포함) 병합할 갯수를 지정 pick -&gt; s //pick 을 squash (s) 로 변경 :wq Git Delete 1git branch -d feature/dev-1 git push origin -d feature/dev-1 Git Conflict 1234// 1. IDE 를 활용한 해결 방법 Webstorm : VCS &gt; Git &gt; Resolve ConfilictsTerminal: git merge --continue :qa // 2. 수동 해결 방법 // HEAD ~ === 영역이원본이므로 수정하고, 다시 commit 해준다. git add . git commit -m 'confilctresolved' Git Cherry Pick 1git checkout release git cherry-pick #135bc Git Merge 12345git checkout A git merge B (Fast-forward : 합칠때 하나로 만든다.) git merge--no-ff B (합칠때 merge 커밋을 만든다) // 충돌난 파일 목록을 확인한다. gitstatus // git merge 해결방법 &lt;&lt;&lt;&lt;&lt;&lt; HEAD # 현재 checkout 한 A 브랜치의 상태///// # 구분자 &gt;&gt;&gt;&gt;&gt;&gt; B # 병합하려는 대상 B mereg conflic 수정 후 add, commit진행하면 정상적으로 merge commit이 진행된다. Git Merge 취소하기 1git merge --abort Git Reset해당 커밋을 push 했지만 되돌리고 싶을때 사용한다. (한번에 점프고하고 싶을때, 사용하지만 가급적이면 사용하지 않는다) 1git reset --hard HEAD^ Git Revert해당 커밋만 취소하고 싶을 때 사용한다. WebStorm IDE 에서는 Revert 기능을 제공하고 있다. (우클릭 - Git - Revert) 1git revert &lt;되돌릴 커밋&gt; Git Permission denied (Window10) 12// 로컬에 저장된 계정이 있으면, 새 계정으로 다시 로그인을 해줘야한다. git config--global user.name git config --global user.email Git 취약점 해결방법 1npm audit fix","link":"/2019/08/08/git/"},{"title":"good-image","text":"Hello World!!","link":"/2021/09/13/good-image/"},{"title":"Graphql 적용기","text":"GraphQL 은 상당히 뜨고 있어서 항상 진행해보자.. 싶었던 방법인데 DB도 설치해야하고 복잡할거 같아서 진행을 못하고 있었다.찾아보니 Node.js Express 로 구현한 yuddomack 님의 블로그를 보고 진행을 해볼 수 있었다. 공식문서(GraphQL)에서는 저렇게 쓰면 되겠구나 싶었던 방법이 구체적인 웹으로도 쉽게 조회를 할 수 있게 제공된다.구현부를 express 에 작성하고, 간단한 조회를 하는 방법이 있고, 실제 DB와 연결해서 하는 방법을 계속 진행해볼까 한다.DB는 서버에 설치해야하는 번거로움이 있으니.. kamang 님의 블로그처럼 SqlLite로 프로젝트에 저장될 수 있게 만들어 볼 예정이다.","link":"/2019/10/16/graphql/"},{"title":"HTML &lt;span&gt; 요소","text":"&lt;span&gt; 은 구문 컨텐츠를 위한 문장을 묶을 때 사용하는 인라인 요소입니다. ㄴ 인라인은 전체 문단이 끊기지 않고 하나로 그려집니다. 문서의 흐름에서 줄바꿈을 강제하진 않는거죠.반면에 블록 요소는 줄바꿈을 할 수 있습니다. 그럼에도 간단한 문장은 span 만 사용해서 개행을 하고 싶은 경우가 생기죠. 개행 문자 &amp; 공백 문자는 어떻게 처리할까? span 요소 1개로만 처리할 때 span 태그를 1개에 white-space 속성을 이용한다.이스케이프 문자 중 \\n(개행문자)를 사용해서 줄바꿈이 가능하다. 1234.spanStyle { white-space: &quot;pre-line&quot;}&lt;span class=&quot;spanStyle&quot;&gt;테스트\\n입니다.&lt;/span&gt; div 요소 안에 span 으로 처리할 때 12345678.spanStyle { display: &quot;block&quot;}&lt;div&gt; &lt;span class=&quot;spanStyle&quot;&gt;테스트&lt;span&gt; &lt;span class=&quot;spanStyle&quot;&gt;입니다&lt;span&gt;&lt;/div&gt;","link":"/2021/11/12/html-span/"},{"title":"모던 자바스크립트 새로운 기능","text":"ES2016 ~ ES2020 까지 자바스크립트의 많은 변화가 있었습니다.모던자바스립트 핵심가이드책이 너무 잘 정리되어있어 책을 보는 것을 추천합니다. 여기엔 자주 사용하는 몇가지 문법만 정리해봅니다. JavaScriptObject.fromEntries() 키/값 쌍이 포함된 배열을 객체로 변환합니다. 123const entries = [['foo', 'v1'], ['baz', 'v2']]Object.fromEntries(entries)// {foo: 'v1', baz: 'v2'} Object.entries() 주어진 객체를 [key, value] 쌍의 배열로 반환합니다. 12345678const object1 = { a: 'somestring', b: 42};Object.entries(object1).forEach(([k, v] = e) =&gt; console.log(k, v));// a somestring// b 42 Object.values() 모든 값이 담긴 배열을 반환합니다. 12Object.values(object1)// ['somestring', 42] Object.seal() 객체의 새로운 속성을 추가할 수 없게 얼려버리는 걸 말합니다. 하지만 Object.freeze() 과 다르게 데이터 속성값을 변경하는 것은 가능합니다. Array.from() 유사배열객체나 이터러블한 객체를 얕게 복사해 새로운 배열을 생성합니다. 12345678const arr_like_obj = {0: 'a',1: 'b',2: 'c',length: 3}Array.from(arr_like_obj)// ['a', 'b', 'c'] typeof 자료형을 나타내는 문자열을 반환합니다. instanceof 해당 속성이 프로토타입 체인 어딘가에 존재하는지 판별합니다. Symbol 항상 고유하며 객체 속성의 식별자로 사용할 수 있습니다. defineProperties 메서드 객체에 새로운 속성을 정의하거나 기존의 속성을 수정하고 그 객체를 반환합니다. Classprivate class fields # 해쉬를 추가해 클래스의 속성을 외부에서 호출할 수 없게 만들 수 있습니다. static 클래스의 정적 메서드 키워드입니다. 인스턴스가 아닌 클래스 자체에서 접근할 수 있는 메서드입니다. get 클래스 내에서 설정한 객체를 읽기 전용으로 가져올 수 있습니다. Web APIDocument에 상속된 가장 일반적인 기본 클래스입니다.HTML 태그를 직접 짚어서 사용할 경우에 하위 클래스들의 요소들을 선택할 수 있습니다. firstElementChild 엘리먼트의 첫번째 자식요소를 반환합니다. lastElementChild 엘리먼트의 마지막 자식요소를 반환합니다. nextElementSibling 엘리먼트 지정한 요소의 바로 다음 요소를 반환합니다. 지정된 요소가 목록의 마지막 요소일 경우엔 null을 반환합니다. requestAnimationFrame() 브라우저에게 애니메이션을 호출하는 합수입니다. 실행할 콜백을 인자로 넘겨주면, 리페인트 되기 전에 업데이트 함수를 실행합니다.","link":"/2022/01/27/modern-js/"},{"title":"NPM","text":"Node Package Manager 라 하며, 자바스크립트 라이브러리를 모아놓은 패키지 관리자입니다. NPM 설정1npm init -y // 패키지까지 모두 설치하는 방법 NPM 에 새로 추가된 기능을 사용해보자NPM v6 에서 모듈의 취약점을 검사해주는 기능이 추가되었다. 사용해보려 했더니.. v.5.xxx 사용할 수 없다.NPM을 업데이트를 먼저 진행했다. 1// for window $ npm -version $ npm install -g npm 아래와 같은 에러가 또 발생한다. 123npm ERR! code EAUDITNOLOCKnpm ERR! audit Neither npm-shrinkwrap.json nor package-lock.json found: Cannot audit a project without a lockfilenpm ERR! audit Try creating one first with: npm i --package-lock-only 결과 123$ npm audit === npm audit security report ===found 0 vulnerabilities NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)문제가 발생했을 때, 설치된 모듈의 버전을 확인하고 싶을때가 있다. 1$ npm view &lt;package-name&gt; version &lt;/package-name&gt; package json 경로 지정 방법:12345// devDependencies 설치$ npm install -D --save xxx// dependencies 설치$ npm install xxx 패키지 모듈 삭제 방법:123$ rm -rf node_modules/// or$ npm uninstall [패키지명] 특정 버전으로 받는 방법:1$ npm insatll -D babel-core@^7.0.0-0 Node 모듈 업데이트 방법:Node 에서 pkg 다운받으면, 그 후로 업데이트 방법은 아래와 같이 stable 안정화버전으로 업데이트한다. 123$npm install -g n$npm cache clean -f$sudo n stable NVM 사용 방법:NVM 다양한 버전의 노드를 설치할 수 있도록 해주는 관리자 툴이다.현재 노드버전을 확인하고, major version 을 쓰면, 그 메이저 버전의 최신을 설치할 수 있다. 123nvm install v14nvm listnvm use v14.18.1 전역에 설치된 모듈을 확인하는 방법:1npm list -g --depth 0","link":"/2019/08/09/npm/"},{"title":"Javascript Object 이야기","text":"object 를 string 으로 바꾸는 방법은 JSON.stringify()를 사용한다. 123const obj = [{ name: 'first' }, { name: 'second' }, { name: 'third' }];JSON.stringify(obj); // &quot;[{&quot;name&quot;:&quot;first&quot;},{&quot;name&quot;:&quot;second&quot;},{&quot;name&quot;:&quot;third&quot;}] 이 방법은 리스트로 만들어진 오브젝트를 필터링할 때 쓰는 방법인데 중복도 제거할 수 있어서 많이 사용한다. 12345678910const obj = [ { name: 'first', value: 1 }, { name: 'second', value: 2 }, { name: 'third', value: 3 }, { name: 'third', value: 4 }, { name: 'third', value: 5 },];const result = new Set(obj.map((v) =&gt; v.name));console.log(result); // {&quot;first&quot;, &quot;second&quot;, &quot;third&quot;} Chrome 에서 Object 를 복사하고 싶은 경우가 있는데, console 을 찍고우클릭으로 Store as Global Variable 을 선택하면 temp1으로 복사가되는데copy(temp1) 이렇게 쓰게 되면 복사가 가능하다. [참고 (StackOverflow)][https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]","link":"/2019/08/21/object/"},{"title":"Javascript 디자인패턴 이야기","text":"클래스란 (클래스/상속 디자인 패턴)클래스화란 데이터와 작동을 함께 잘 감싸서 캡슐화하는 것이 올바른 설계이다.데이터에 적용 가능한 작동들을 메서드로 설계해야한다.클래스에서는 어떤 작동이 담긴 메서드의 이름을 부모와 자식 클래스 모두 똑같이 공유하여 자식 클래스가 부모 클래스를 오바라이드하라고 권장한다.그러나 자바스크립트에서는 이렇게 하면 불안정한 결과를 불러온다. 나는 대부분 절차적 프로그래밍을 해왔다는 걸 알게 되었다. 상위 추상화 없이 단순히 다른 함수를 호출해서 사용하는 방법만 사용해왔고,클래스의 경우는 라이브러리를 통해서만 사용했었다. 그래서 편리함은 알지만, 다뤄보지 않은 영역이라 이번 기회에 다시 정리하고자 한다. 클래스는 복사 과정을 거쳐 객체 형태로 인스턴스화 한다.인스턴스는 생성자가 해주는데 이 생성자는 미리 정보에 대한 변수를 초기화해준다.항상 new 키워드를 앞에 붙여 생성자를 호출한다. 12class Button {}var btn1 = new Button(); 오버라이드하기 전의 원본 메서드와 오버라이드 메서드가 다를 수도 있는데 이를 다형성(오버라이드)이라 한다.inherits/super 라는 키워드로 사용하며, 부모/조상 중 어떤 메서드를 호출할지 결정하는 것도 다형성의 기법이다. 자바스크립트엔 클래스란 개념 자체가 없고 오직 객체만 있다. 그래서 위와 같은 동작들은 자동으로 일어나지 않는다. 인스턴스화 해도 자동으로 복사가 되지않기 때문에 믹스인으로 클래스 복사기능을 흉내내었다.이런 기능을 여러 라이브러리에서는 extends() 라 하고, 프로퍼티를 복사를 할 수 있게 제공된다.믹스인 과정을 초콜릿 조각을 본인이 원하는 쿠키 반죽에 섞어 넣는 것에 비유한다. (이 말이 가장 기억에 남을거 같다)&lt;You Don’t Know JS: this와 객체 프로토타입, 비동기와 성능 - 카일 심슨&gt; 이렇게 일일히 복사(믹스인) 하더라도 다른 클래스 지향처럼 100%(인스턴스) 복사는 어렵다. 프로토타입이란 (프로토타입 디자인 패턴)객체를 다른 객체에 연결한다. 수평적인 상태에서 위임이 되는 연결이다.오버라이드 하기 딱 좋은 메서드 명칭보다는 각 객체의 작동방식을 설명하는 서술적인 명칭이 필요하다.모든 레퍼런스가 확실히 존재한다면 양방향 위임은 가능하긴 하지만 무한 루프에 빠질 수 있다. 12var btn1 = Object.create(Button);btn1.setup(); 어떤 함수가 call(), apply(), bind() 메서드에 접근할 수 있는 건 함수 자신도 객체고 함수 객체 역시 Function.prototype에[[Prototype]]이 연결되어 위임 가능한 메서드가 있어 가능한 것이다.infoscis님 블로그에 예제가 잘 나와있다. 12// ES6 [[Prototype]] 에 저장된 값을 변경한다.Object.setPrototyupeOf(); 디자인 패턴이란 반복적으로 발생하는 문제와 그 문제의 해법으로 정의된다.패턴은 유사한 상황에서 반복적으로 적용할 수 있는 책임-주도 설계의 결과물이다. 그리고 그 방법이 왜 더 효과적인지에 대한 이유를 설명한다. &lt;객체 지향의 사실과 오해 - 조영호&gt; 1. Composite 패턴동일한 인터페이스를 제공해야한다는 제약하에 역할, 책임, 협력을 제공하는 설계 방법이다. Leaf 의 역할은 공용 인터페이스의 협력Client 는 Component 에게 메시지를 요청하는 역할Component 의 역할은 다른 컴포넌트를 추가, 제거, 포함된 컴포넌트를 반환하는 역할","link":"/2019/09/11/pattern/"},{"title":"Port","text":"점유중인 Port 종료하는 방법:1234// for Mac$ lsof -i :{PORT}$ kill -9 {PID} 점유하고 있는 포트번호의 PID(Porcess ID) 를 찾아서 kill 로직을 써준다. 123456lsof -i :19000COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEnode 6284 jieun 39u IPv6 0x18419eaeae92a123 0t0 TCP *:igrid (LISTEN)kill -9 6284","link":"/2021/10/10/port/"},{"title":"Javascript Promise 이야기","text":"비동기 통신에서 Promise 는 어떻게 쓸까?자바스크립트에서 비동기로 데이터가 들어올 때, 그 비동기 처리가 끝난 시점에 다음 작업을 할 수 있게 해주는 방법이다.pangyo님의 블로그에 정리가 잘 되어있다.Promise 메서드를 호출하면 pending 상태가 되고 then 일 때, 실행한다.프로미스는 덕 타이핑의 실제 사례이다. 어떤 객체에 then() 메서드가 있으면 무조건 이 객체는 데너블(Thenable) 하다고 간주하고 프로미스라 판단한다. 12345678getData().then((data) =&gt; {console.log(data)})function getData() { return new Promise((resolve, reject) =&gt; { ...ajax call...loop... resolve(response) }}","link":"/2019/08/28/promise/"},{"title":"React 조건부 렌더링","text":"조건부 렌더링 123456789101112render() { const isLoggedIn = this.state.isLoggedIn; return ( &lt;div&gt; {isLoggedIn ? ( &lt;LogoutButton onClick={this.handleLogoutClick} /&gt; ) : ( &lt;LoginButton onClick={this.handleLoginClick} /&gt; )} &lt;/div&gt; );} 참고: https://reactjs-kr.firebaseapp.com/docs/conditional-rendering.html jsx 에서는 map 메서드를 사용합니다. 배열의 모든 요소를 순회하면서 결과값으로 새로운 배열을 반환할 수 있는 함수입니다. 반복문 123456const todoItems = todos.map((todo, index) =&gt; // Only do this if items have no stable IDs &lt;li key={index}&gt; {todo.text} &lt;/li&gt;); 참고:https://ko.reactjs.org/docs/lists-and-keys.html append dynamic componenthttps://stackoverflow.com/questions/51404335/append-a-react-component-in-another-on-button-click","link":"/2021/10/03/react-condition/"},{"title":"리액트 타입스크립트에 Cypress 적용하기","text":"이 글은 Cypress 블로그의 원문을 직역해서 실습하기 위해 작성했습니다. Cypress 시작하기Cypress7.0 중, Cypress와 함께 패키지로 묶은 새로운 컴포넌트입니다.이것은 테스팅을 실행으로부터 만드는 법을 배우고, experimentalComponentTesting 플래그가 숨겨져 있습니다. 블로그의 이 글에서는 타입스크립트를 사용한 새로운 리액트 앱을 통해 리액트를 생성하고 Cypress 컴포넌트 테스트 러너를 설치하는 방법을 볼 수 있을 것입니다. 블로그에 사용된 예제코드는 여기서 얻을 수 있습니다. 새 리액트 프로젝트 생성새로운 리액트는 만드는 법을 시작합니다. 옵션으로 타입스크립트를 추가합니다. - 이 예제를 사용할 것입니다. 1yarn create react-app cypress-test-react --template typescript Cypress 컴포넌트 테스트 러너를 구성하는 방법리액트 프로젝트를 한번 얻고, Cypress 설치와 웹팩 DevServer 와 리액트 어댑터를 설치합니다. 리액트 앱 프로젝트는 웹팩 기반에 있습니다. 웹팩 어댑터와 연관된 설치중입니다.또한 @cypress/react 필요하고, 컴포넌트(mount하기 위해 비슷한 Enzyme 또는 테스팅 라이브러리에 render)들과 상호적으로 붙일 수 있는 방법이 우선입니다. 1yarn add cypress @cypress/react @cypress/webpack-dev-server --dev 다음, 기본 설정을 위해 cypress.json 만듭니다: 123456{ &quot;component&quot;: { &quot;testFiles&quot;: &quot;**/*.test.{js,ts,jsx,tsx}&quot;, &quot;componentFolder&quot;: &quot;src&quot; }} 여기에 몇가지 컴포넌트 테스팅 상세 옵션을 추가하고, 앞으로는 &quot;component&quot; 키를 사용합니다.&quot;componentFolder&quot;에 모든 컴포넌트와 테스트들이 위치하고 &quot;testFiles&quot;은 테스트파일을 찾기위한 패턴입니다. 마지막으로 컴포넌트 테스트를 위해 @cypress/webpack-dev-server가 필요합니다.플러그인은 Cypress 문서가 상세하게 설명합니다.기본 플러그인은 cypress/plugins/index.js 부터 로드 됩니다. 파일을 만들고 추가합니다: 12345678// cypress/plugins/index.jsconst injectDevServer = require(&quot;@cypress/react/plugins/react-scripts&quot;)module.exports = (on, config) =&gt; { injectDevServer(on, config) return config} 이것은 Cypress 웹팩 Dev Server를 사용하기 위해 웹팩과 같은 설정으로 리액트 앱을 사용합니다. 다른 템플릿을 사용한다면, Next.js 같은, 몇가지 다른 유용한 어댑터를 가져야합니다. 또한 1개의 어댑터를 만드는게 가능합니다. 테스트 작성법Cypress 를 사용하기 위해, src/App.test.tsx 이동시켜, 리액트 앱 템플릿으로 가져옵니다.간단한 이동입니다: 12345678910// src/App.test.tsximport React from 'react';import { mount } from '@cypress/react';import App from './App';it('renders learn react link', () =&gt; { mount(&lt;App /&gt;); cy.get('a').contains('Learn React');}); 대부분의 테스트는 @cypress/react 로 부터 mount할 때 시작할 것입니다. 테스트 라이브러리의 render와 유사합니다. 컴포넌트가 한번 마운트되면, Cypress의 확장된 올바른 행동을 확인하기 위한query and assertion APIs 를 사용할 수 있습니다.이 예제는 &quot;Learn React&quot; 렌더되었다고 확증할 수 있습니다. 테스트 러너에서 Cypress 컴포넌트를 실행하세요: 1yarn cypress open-ct 그리고 왼쪽 트리구조에서 스펙을 선택하세요. 변경되도록 해보세요 - 테스트는 즉각 재실행됩니다. 오로지 즉각적인 것은 아닙니다. 테스트가 통과되거나 실패 되었다면, 시각적으로 점검하고 디버그가 가능합니다. yarn cypress run-ct로 모든 스펙들은 실행할 수 있습니다. CI 환경, 또는 코드 커밋과 푸시 전에 마지막 체크에서 테스트들의 실행하기에 유용합니다. 논의Cypress 컴포넌트 테스트 러너는 jsdom 기반의 테스팅 환경(예를 들어, jest 와 Vue Test Utils)의 대안책입니다. 많은 장점을 제안합니다: 실제 브라우저에서 실행됩니다. 이 의미는 테스트가 유저에게 더 가까운 경험이 될 것입니다. 비주얼. 무엇이 렌더되었는지 볼 수 있습니다. 더이상 무엇이 렌더되거나 디버그인지 찾으며 수수께끼 터미널 로그를 스크롤링 하지 않아도 됩니다. - 단지 devtools 과 브라우저 DOM 을 열면 됩니다. Cypress 의 힘 - 가장 인기있고 의지할 수 있는 E2E 테스팅이 있습니다. 또한 디자인 환경이 2배입니다. 즉시 반영과 가까운 인스턴스 피드백을 주고 발전되는 것을 볼 수 있습니다.이것은 점진적으로 테스트 기반 jest 가 아니고, Storybook 디자인 기반 잘 되어진 환경입니다. 여전히 알파버전이지만, 빠르게 발전하고 있고 컴포넌트 테스팅의 지표를 바꿀 것을 약속합니다. 결론컴포넌트 테스팅을 위한 큰 Cypress 를 가져옵니다. 아래 어댑터 이래로, 웹팩과 같은, 테스트 전체를 버릴 필요는 없습니다. - 마이그레이션을오 가능합니다. 시각적인 측면은 단위 테스트과 단독 툴 디자인입니다. 엉망인 콘솔 결과를 잡아내던 시절은 끝났습니다. - 테스트 실행으로 어떤 컴포넌트인지 볼 수 있습니다. 블로그의 코드는 여기에서 볼 수 있습니다. Reference https://www.cypress.io/blog/2021/04/06/cypress-component-testing-react","link":"/2022/01/14/react-cypress/"},{"title":"리액트에 타입스크립트 적용하기","text":"리액트에서 타입스크립트를 지원하고 있어, 간단하게 설치가 가능하지만 기존 프로젝트에 마이그레이션 방법으로 설치를 해보고자 한다. React-TypeScript 적용 방법1npx create-react-app my-app --template typescript 기존 리액트 프로젝트에 타입스크립트로 마이그레이션 방법Create React App 의 순서대로 설치한다. 123npx create-react-app my-appcd my-appnpm start 리액트를 설치하고 프로젝트에 타입스크립트를 추가로 설치해준다. 12yarn add --D typescript @typescript-eslint/parseryarn run tsc --init index.js 와 App.js 파일의 확장자는 _.tsx 로 변경해준다.나머지 파일은 모두 _.ts 파일로 확장자를 변경해준다. eslint 에서도 타입의 영향을 받지 않으려면, @typescript-eslint/parser를 추가해준다.노드 버전이 v12.22.0 이상이 되어야 설치가 가능하다. 1yarn add -D @typescript-eslint/parser 프로젝트를 실행시 발생하는 버그: typescript svg 모듈 또는 해당 형식 선언을 찾을 수 없습니다 해결 방법:커스텀 타입 파일을 생성해주고, tsconfig 파일에 include 에 해당 파일을 추가해준다. (stack-overflow) 12345// custom-d.tsdeclare module &quot;*.svg&quot; { const content: any; export default content;} @typescript-eslint/parser’ declared in ‘.eslintrc’: Cannot find module ‘typescript’ 해결 방법:typescript가 로컬에 설치되어 있어야한다. 1yarn global add typescript","link":"/2021/11/05/react-migration/"},{"title":"React Native","text":"리액트 네이티브 앱은 Expo CLI를 설치해서 시작합니다. 123$ expo init my-app$ cd my-app$ expo start 핸드폰에 Expo 앱이 설치하고 expo start 실행 후 생성된 QR 코드를 핸드폰 카메라로 인식해서 링크로 이동합니다.와이파이로 같은 네트워크에 있다면, 화면을 확인할 수 있습니다. Async Storage 적용공식 문서에 react-native패키지에서 사용하던 방법이 현재는 react-native-async-storage에서 사용하는 방법으로 권장됩니다. 유튜브 영상을 보면서 예제를 해봤습니다. 123456789101112131415161718192021222324252627282930313233343536373839404142434445// App.jsimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';import AsyncStorage from '@react-native-async-storage/async-storage';export default function App() { let index = 0; const saveData = async () =&gt; { try { let user = `Jelee ${index++}`; AsyncStorage.setItem('user', user); } catch (error) { // Error saving data } }; const displayData = async () =&gt; { try { let user = await AsyncStorage.getItem('user'); alert(user); } catch (error) { alert(error); } }; return ( &lt;View style={styles.container}&gt; &lt;TouchableOpacity onPress={saveData}&gt; &lt;Text&gt;Click me to save data&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;TouchableOpacity onPress={displayData}&gt; &lt;Text&gt;Click me to display data&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; );}const styles = StyleSheet.create({ container: { flex: 1, backgroundColor: '#fff', alignItems: 'center', justifyContent: 'center', },}); 버튼을 클릭하면, 카운트를 계속 증가시켜 스토리지에 추가해보고 Click me to display data버튼을 클릭하면 증가한 숫자가 팝업창에 뜹니다. 리액트 개발 툴애뮬레이터를 실행했을 때, 개발 툴 명령어를 설치하면 개발자 도구로 UI 컴포넌트 트리를 확인할 수 있습니다.참고 리액트 네이티브로 앱을 개발하면서 만나게 된 버그들을 기록합니다.Error: Element type is invalid: expected a string Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports. Check the render method of App. 해결 방법:import 한 경우 export 가 잘 되었는지 확인한다. 책에선 import { AppLoading } from 'expo' 로 사용했던 것이 그 후로 버전이 바뀌면서 expo-app-loading 모듈 설치 방법으로 변경되었다.그래서 위와 같이 import 는 했는데, 올바른 모듈이 없을 경우에 발생한다. XDLError: ValidationError: “scheme” is not allowed XDLError: ValidationError: “scheme” is not allowed 해결 방법:$ rm -rf .expo //디렉토리를 삭제하고 실행해본다. [자세히] React Native RuntimeError: abort(Error: xcrun exited with non-zero code: 2 on iOS simulatorhttps://github.com/expo/expo-cli/issues/2413","link":"/2022/03/17/react-native/"},{"title":"React Redux","text":"리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다. 여러 컴포넌트에 걸쳐 전달하게 될 경우, 불필요한 props 가 늘어날 수 있다. 형제 컴포넌트에서 불필요한 렌더링이 일어날 수 있다. 최상위 컴포넌트에서 상태관리 로직이 많아 길어지는 현상도 있을 수 있다. 리덕스의 동작 과정 1234567891. 리덕스는 스토어라는 객체 내부에 상태를 담게 됩니다.2. 상태를 변경시킬 때, 액션을 전달하는데 이 과정을 디스패치라합니다.3. 스토어가 액션을 받으면 리듀서가 상태를 변화시키는 로직으로 어떤 작업을 할지 정합니다.4. 액션 처리 후에 새 상태를 스토어에 담습니다.5. 스토어 안에 있는 상태가 바뀌면 구독하고 있는 컴포넌트에게 전달합니다. 1yarn add redux react-redux 타입스크립트 공식문서 예제는 actions 와 reducer 파일을 분리했지만, 공부하는 입장에서 분리하지 않고 하나로 보면 아래와 같습니다. Action 접미사를 붙인 객체에는 type 에 넘겨줄 값들의 타입을 정의하고, payload 에 리듀서 상태를 변경하는 로직을 넣어줍니다. 123456789101112131415161718192021222324252627282930313233343536373839// src/store/system.tsexport const UPDATE_SESSION = 'UPDATE_SESSION'export interface SystemState { loggedIn: boolean session: string userName: string}interface UpdateSessionAction { type: typeof UPDATE_SESSION payload: SystemState}// 액션은 상태 변화 시킬 때 참조하는 객체를 정의한다.export type SystemActionTypes = UpdateSessionActionconst initialState: SystemState = { loggedIn: false, session: '', userName: ''}// 리듀서는 액션으로부터 받은 상태 변화 로직만 처리한다.export function systemReducer( state = initialState, action: SystemActionTypes): SystemState { switch (action.type) { case UPDATE_SESSION: { return { ...state, ...action.payload } } default: return state }} 123456789101112// src/store/index.tsimport { systemReducer } from './system/reducers';import { chatReducer } from './chat/reducers';const rootReducer = combineReducers({ system: systemReducer, chat: chatReducer,});// 2개이상의 리듀서를 합쳐서 내보낸다.export type RootState = ReturnType&lt;typeof rootReducer&gt;; index 파일에서 위에 정의했던 리듀서를 합쳐서 내보내주게 됩니다. combineReducers를 사용하면 여러개의 리듀서를 한번에 호출할 수 있습니다. 12345678910// src/hooks/useUpdateSession.tsimport { useDispatch } from 'react-redux';import { useCallback } from 'react';import { SystemActionTypes } from '../store/system';export default function useUpdateSession() { const dispatch = useDispatch(); return useCallback((text) =&gt; dispatch(SystemActionTypes(text)), [dispatch]);} useDispatch 함수는 액션을 전달합니다.hooks 디렉토리에는 이러한 dispatch 동작들을 정해둡니다. 123// src/components/**.tsxconst updateSession = useUpdateSession({loggedIn: true, session: '', userName: ''}; 화면에서 사용할 때는, use 접두사를 사용한 hook 을 사용합니다. 디버깅으로 리덕스로 변경된 값을 확인하는 방법은 크롬 확장자 도구에 리덕스 개발자도구(적용 방법)를 설치하시면 됩니다. 123456$ yarn add redux-devtools-extension// index.tsimport { composeWithDevTools } from 'redux-devtools-extension';const store = createStore(rootReducer, composeWithDevTools()); Reference https://ko.redux.js.org/recipes/usage-with-typescript/ https://velog.io/@velopert/use-typescript-and-redux-like-a-pro https://react.vlpt.us/redux/06-redux-devtools.html","link":"/2021/11/26/react-redux/"},{"title":"JS 런타임 오류 (React)","text":"오랜만에 React (v17.0.2) 최신버전으로 설치하고, npm start 를 실행했는데 아래와 같은 버그를 만났습니다. Bug: Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: @eslint\\eslintrc\\universal.js 먼저 어떤 버전의 문제인지, React 와 Eslint 에서 권장하는 버전을 확인하러 가봅니다. 공식 홈페이지 권장사항https://reactjs.org/docs/create-a-new-react-app.html 12Node &gt;= 14.0.0npm &gt;= 5.6 eslint v8 일 때, nodejs 버전을 업그레이드 해주라고 하네요.https://github.com/eslint/eslint/issues/15247 1Node ^12.22.0 || ^14.17.0 || &gt;=16.0.0 2가지 버전을 확인해보니, Node 버전이 최소 14 이상은 되어야 안정적일 거 같아 보이네요.설치된 런타임 버전을 확인해봅니다. 12node -v // v12.22npm -v // v6.14.15 예전에 작업하면서 노드 버전을 v12.22 로 사용하고 있었네요. v14.18 로 NVM을 변경해줍니다. 스위칭 후에 OSX 터미널에서 실행하면 정상적으로 동작합니다. 이제 VSCode 터미널에서 실행해봅니다.여전히 오류가 발생합니다. 한참을 찾아보다가 좋은 해결 방법을 발견했습니다.NVM을 이용해서 전역 버전을 변경하더라도 모든 동일하게 반영이 되지 않네요. 항상 사용하는 버전을 NVM Default 로 맞춰두고, nvm use default 로 사용을 해야할 거 같습니다.VSCode 에서는 launch.json 파일에 runtimeVersion: default로 추가해두면 항상 default 값을 사용할 수 있습니다. 12345// OS X Terminalnvm alias default 14.18.1// VSCode Terminalnvm use default","link":"/2021/12/28/react-runtime-error/"},{"title":"React VAC Pattern","text":"VAC Pattern 이란?View Asset Component 라 하며, jsx 파일 내에서 state 와 render 부분을 별도로 구분해서 보다 쉽게 관리하기 위한 패턴방식이다. 마크업, UI, 기능구현으로 이뤄지는 프론트개발에서 업무에 따라 프로젝트 충돌을 피하기 위해 사용한다. 디자인이 필요한 작업 관련 부분은 모두 props 로 넘겨주고, 비지니스 로직이 필요한 기능 구현 부분은 다른 컴포넌트에서 상태관리를 통해 처리해주는 방법이다.역할 구분을 확실하게 해서 의존적이지 않아 상당히 편한 패턴이란 생각이 든다.","link":"/2021/11/01/react-vac/"},{"title":"Sass(SCSS) 알아가기","text":"sass 사용하면, 변수로 사용한 상태에서 스타일을 재사용할 수 있다. 1yarn add node-sass --save 1. &amp;부모 요소 참조, $변수 사용 부모요소의 참조가 필요한 경우엔 &amp; 를 사용한다. 가상 클래스의 선택자를 지정하는 경우에 참조가 필요 1.myAnchor { color: green; &amp;:hover { text-decoration: underline; } } 2. Nesting nesting 프로퍼티에도 사용한다. 1.test { font: { size: 30em; weight: bold; } } 3. Import sass 분할된 파일(partial) 은 언더스코어(__) 를 붙여 사용한다. 파티셜 파일은 파일 접두어를 생략할 수 있다. 12// __vars.scss $width: 960px; // __header.scss #header { width: $width; } //__vars.scss 파일을 호출할때 // style.css @import &quot;vars&quot; @import &quot;header&quot;","link":"/2020/01/22/sass/"},{"title":"개발환경 세팅하기","text":"작업환경 세팅하기(2021.10.26) VSCode 2021.10.26 작업환경 세팅 Material Theme Material Theme Icons Prettier - Code formatter Code Spell Checker Bracket Pair Colorizer vscode-styled-components TODO Highlight Git Graph JavaScript and TypeScript Nightly Project Manager ES7 React/Redux/GraphQL/React-Native snippets Chrome plugins React Developer Tools Redux DevTools 참고: https://just-coding.tistory.com/1#recentComments (2019.09.26) WebStorm 2019.2.2 작업환경 세팅 Appearance 1234Theme: DraculaFont: Malgun GothicSize: 12Line spacing: 1.2 Tools &gt; Terminal 1Shell path &quot;C:\\Program Files\\Git\\bin\\sh.exe&quot; --login -i Installer WebStorm SourceTree PickPick Slack Jira Zepline Pigma 발사믹 목업 (Atlassian Confluence) Chrome plugins Vue.js devtools 네이버 영어사전 Momentum ColorZilla Marinara: Pomodoro® Assistant","link":"/2019/09/26/settings/"},{"title":"Mac을 편하게 사용하는 방법 7가지","text":"Mac 단축키option + cmd + esc : 응용 프로그램 강제 종료option + cmd + i : 크롬 개발자 도구cmd + space : 스포트라이트 검색 - (활성 상태 보기)cmd + w : 크롬 텝 닫기cmd + y : 크롬 브라우저 방문기록 보기cmd + shift + 4 : 영역지정 캡쳐 화면 잠금 (⌘ + L)시스템 환경설정 - 키보드 - 단축키 - 앱 단축키 - 화면 잠금(command+L)으로 추가하기 브라우저에서 탭으로 키워드 검색하기시스템 환경설정 - 트랙패드 - 포인트 및 클릭 - 찾아보기 및 데이터 탐색기(세 손가락으로 탭하기) 우클릭처럼 사용하기시스템 환경설정 - 트랙패드 - 포인트 및 클릭 - 보조 클릭(두 손가락으로 클릭 또는 탭하기) 브라우저에서 페이지 이동하기시스템 환경설정 - 트랙패드 - 추가 제스처 - 페이지 쓸어넘기기(두 손가락으로 좌우로 스크롤하기) 스크롤방향 바꾸기 (원도우처럼 사용하기)시스템 환경설정 - 트랙패드 - 스크롤 및 확대/축소 - 스크롤 방향: 자연스럽게 (해제) 드래그하기 트랙패드에서 세 손가락으로 드래그하기 기능 시스템 환경설정 - 손쉬운 사용 - 포인터 제어기 - 마우스와 트랙패드 - 스크롤(관성 사용), 드래그 활성화 (세 손가락으로 드래그하기)","link":"/2022/04/06/shortcut-mac/"},{"title":"단축키 모음","text":"유용한 단축키를 정리합니다. VSCode 단축키 (Window 단축키) cmd + d (ctrl + d) : 같은 파일내 단어 찾기option + cmd + i (F12) : 크롬 디버그ctrl + space : 파일에서 프로퍼티 자동완성cmd + shift + p : 페이지 셋업cmd + p : 파일 찾기cmd + j : 터미널 창 열기 Snippets 활용:html:5 html 자동완성 12345678&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt;&lt;/html&gt; :rfc 리액트 템플릿 자동완성 페이지 셋업에서 설정하기: json 파일열기 =&gt; open settings (json) 12345678910111213141516171819// settings.json{ // set prettier &quot;editor.formatOnSave&quot;: true, &quot;[javascript]&quot;: { &quot;editor.formatOnSave&quot;: true }, &quot;editor.codeActionsOnSave&quot;: { // For ESLint &quot;source.fixAll.eslint&quot;: false }, &quot;files.autoSave&quot;: &quot;onFocusChange&quot;, &quot;editor.fontSize&quot;: 13, // set eslint &quot;eslint.alwaysShowStatus&quot;: true, &quot;eslint.workingDirectories&quot;: [{ &quot;mode&quot;: &quot;auto&quot; }], &quot;eslint.validate&quot;: [&quot;javascript&quot;, &quot;typescript&quot;]} 터미널에서 code . 로 프로젝트를 열기 =&gt; Shell Command 프로젝트 매니저에 추가하기 =&gt; Project Manager: Save Project","link":"/2020/01/09/shortcut/"},{"title":"Local &amp; Session Storage","text":"로컬과 세션 스토리지의 차이점?로컬 스토리지는 사용자가 지우지 않으면 브라우저에 계속 남아있다. (지속적으로 필요한 데이터)세션 스토리지는 윈도우나 브라우저 탭을 닫을 경우 제거된다. (일회성 데이터) 세션 이전에 쿠키가 있었고, 쿠키는 만료 기한이 있는 key-value 저장소이다.(참고) zerocho 블로그 쿠키의 용량: 4KB 매 서버 요청마다 서버로 쿠키가 같이 전송된다. HTTP 요청의 특성상, 요청 대상자를 알기 위해 서버에서는 쿠키를 읽어 파악한다. 스토리지 용량: 5MB~ 10MB 도메인 별 용량 제한이 있다. (프로토콜, 호스트, 포트가 같으면 스토리지를 공유) 로컬 스토리지: 사용자의 설정(보안에 민감하지 않은)이나 유저 커스텀을 위한 데이터를 저장한다. 세션 스토리지: 데이터가 영구적으로 보관되지 않는다. (window.sessionStorage) IndexDB 용량: 50MB","link":"/2019/11/01/storage/"},{"title":"Vue.js 2.x 테스트 적용기","text":"라이브러리 설치하면서 만나게 되었던 버그들vue-cli 3.x 를 받게되면 자동으로 test 를 할 수 있는 환경이 구축되는데 프로젝트가 그렇게 쉽게 올라가는 건 아니니 2019년도에 작성한 블로그이니, 지금은 3.0 을 사용하면 된다. 기존 프로젝트를 위한 2.x 에 테스트 작업환경을 추가를 해보았다. 일단은 가장 많이 사용하는 jest 를 설정해보았다.Vue Test Util 을 참고하고 joshua1988님 블로그르 참고하면서 설치해보았다. 1npm install --save-dev jest @vue/test-utils vue-jest babel-jest 설치하고 babelrc 파일을 추가하는데 babel 스펙이 변하면서 다음과 같은 오류를 만나게 된다. Cannot find moudle ‘babel-preset-env’ - Div you mean “@babel/env?” 해결 방법 1234567891011// babelrc{ - &quot;presets&quot;: [[&quot;env&quot;, { &quot;modules&quot;: false }]], + &quot;presets&quot;: [[&quot;@babel/preset-env&quot;, { &quot;modules&quot;: false }]], &quot;env&quot;: { &quot;test&quot;: { - &quot;presets&quot;: [[&quot;@babel/preset-env&quot;, { &quot;targets&quot;: { &quot;node&quot;: &quot;current&quot; } }]] + &quot;presets&quot;: [[&quot;env&quot;, { &quot;targets&quot;: { &quot;node&quot;: &quot;current&quot; } }]] } }} 12345678910// package.json{... &quot;jest&quot;: { &quot;transform&quot;: { &quot;.*\\\\.(vue)$&quot;: &quot;vue-jest&quot;, &quot;^.+\\\\.js$&quot;: &quot;babel-jest&quot; }, &quot;collectCoverage&quot;: true }} 그 다음에 만나게 되는 오류를 해결하면 샘플 코드 작성이 가능하다. Requires Babel “^7.0.0-0”, but was loaded with “6.x” 해결 방법 1$ npm insatll -D babel-core@^7.0.0-0 Cannot find module ‘@/components/HelloWorld.vue’ from ‘helloworld.test.js’ 해결 방법 12// helloworld.test.jsimport HelloWorld from '../src/components/HelloWorld.vue'; @ 절대주소는 일단 모듈로 인식해서 파일을 찾을 수 없다한다. 우선은 상대경로로 작업해주자. 이렇게 해결을 하고 나면, 실제로 test/ 파일에 샘플 코드를 작성할 수 있다.","link":"/2019/10/17/testing-vue/"},{"title":"TSConfig 설정방법","text":"타입스크립트로 전환하면, config 파일을 생성해서 프로퍼티를 추가하게 되는데요,기본 리액트 버전으로 설치하면 가장 먼저 만나게 되는 오류가 있습니다. Could not find a declaration file for module ‘react’.…implicitly has an ‘any’ type. 암시적으로 any 타입을 가집니다. 라고 해석할 수 있는데요.타입스크립트에서 타입을 사용하도록 엄격하게 권장하고 있습니다. 어떤 타입인지 모르고 지나칠 때가 있습니다. 그러면 'any'라고 명시해야하는데 이 조차도 너무 번거롭다 느껴질 때 약간 느슨하게 타입을 안쓰고 넘어가게 해주는 방법이 있습니다. noImplicitAny 프로퍼티를 추가해주는 방법인데요, off 로 바꿔주면 오류는 발생하지 않을것입니다. 결과적으로는 타입스크립트로 전환했으면, 모든 타입을 작성해주는 것은 매우 중요한 거 같습니다. 1234567// tsconfig.json{ &quot;compilerOptions&quot;: { &quot;noImplicitAny&quot;: false }}","link":"/2022/01/14/typescript-config/"},{"title":"TypeScript 스터디","text":"타입스크립트 핸드북을 이용해서 문법과 타입스트립트에 대해 공부합니다. 예제를 확인해보고 싶다면, TS Playground에서 확인을 해봅니다. 타입 추론타입을 명시적으로 정의하기 위한 구문으로 interface 를 우선적으로 사용하고 특정 기능이 필요할 때 type을 사용합니다. 타입 구성여러가지 타입을 이용해서 새 타입을 작성하기 위한 방법으로 유니언과 제네릭이 있습니다. 유니언은 여러 타입 중 하나라고 선언하는 것입니다. (‘|’ 을 사용)제네릭은 타입에 변수를 제공하는 방법입니다. 제네릭이 있는 배열은 배열 안의 값을 설명할 수 있습니다. 1type ObjectWithArray = Array&lt;{ name: string }&gt;; 구조적 타입 시스템두 객체가 같은 형태를 가지면 같은 것으로 간주하는 것을 말합니다. 1234567891011interface Point { x: number; y: number;}function printPoint(p: Point) { console.log(`points ${p.x}, ${p.y}`);}const point3 = { x: 12, y: 25, z: 88 };printPoint(point3); // points 12, 25 타입 단언 (Type assertions)어떤 엔티티의 실제 타입이 현재 타입보다 더 구체적일 때 사용합니다. 타입 단언은 컴파일러에게 “날 믿어, 난 내가 뭘 하고 있는지 알아”라고 말해주는 방법입니다. 이는 형 변환과 유사하지만, 다른 특별한 검사를 하거나 데이터를 재구성 하지는 않습니다. jsx 에서는 as-스타일의 단언만 허용합니다. 1234let someValue: any = &quot;this is a string&quot;;let strLength: number = (someValue as string).length;console.log(strLength); 인터페이스타입스크립트의 핵심 원칙은 타입 검사가 값의 형태에 초점을 맞추고 있다는 것입니다. 이를 덕 타이핑이라 하는데 인터페이스는 이런 타입들의 이름을 짓는 역할을 합니다. 옵셔널 프로퍼티는 프로퍼티 이름 끝에 ?를 붙여 표시합니다. 인터페이스에 속하지 않은 프로퍼티를 선택적으로 사용하도록 해줍니다. 읽기 전용 프로퍼티는 프로퍼티 이름 앞에 readonly를 넣어서 지정합니다. 함수기본-초기화 매개변수 기본값을 함수에 지정해 둘 수 있습니다.나머지 매개변수로 인자들을 모을 수도 있습니다. 123456function buildName(firstName = 'Lee', ...restOfName: string[]) { return `${firstName} ${restName.join(' ')}`;}let leeName = buildName(undefined, 'Jieun', 'Joseph', 'Jerry');console.log(leeName); // Lee Jieun Joseph Jerry 클래스타입스크립트 3.8 이후 비공개 필드를 만들기 위해 자바스크립트의 # 문법을 사용할 수 있습니다. Reference https://typescript-kr.github.io","link":"/2021/11/01/typescript/"},{"title":"Vanilla JS 다뤄보기","text":"일반적으로 프레임워크를 사용하지 않고 자바스크립트를 다루는 방법은 있습니다.너무 프레임워크에 익숙해져 그 방법을 잊어버리지 않게 적습니다. 먼저 html 파일에서 js를 로드를 합니다. 12345678910111213//html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;[file].js&quot; /&gt; &lt;/body&gt;&lt;/html&gt; css 스크립트는 태그 사이에 작성합니다. 123&lt;head&gt; &lt;style lang=&quot;text/css&quot;&gt;&lt;/style&gt;&lt;/head&gt; 간단하게 HTML에서 자바스크립트를 사용하게 되었습니다. 그런데 모듈화라는 개념이 생기면서,import 를 통해 스크립트 모듈 파일을 가져오게 되었습니다. export로 파일을 내보냈을 경우에 html 에서는 위와 같은 방법으로는 오류를 만나게 됩니다. Uncaught SyntaxError: Cannot use import statement outside a module 해결 방법: 123&lt;body&gt; &lt;script type=&quot;module&quot; src=&quot;[file].js&quot; /&gt;&lt;/body&gt; script type 을 모듈이라 명시해주면서 문제를 해결할 수 있습니다.이렇게 간단한 방법도 매번 프레임워크의 렌더함수만 작성하다보면 잊어버리게 됩니다. 다음은 만들어진 여러개의 모듈파일을 한번에 압축해주는 방법인 웹팩으로 HTML 파일에서 로드하는 방법을 적어봅니다. 웹팩을 설치하고, 프로젝트 구조를 다음과 같이 추가해서 세팅해줍니다. 12npm init -ynpm install webpack webpack-cli --save-dev project 구조12345678webpack-demo |- /dist+ |- index.html- |- index.html+ |- /src+ |- index.js+ |- webpack.config.js |- package.json 웹팩 설정 파일에서 entry 와 output 을 설정하면, entry 에 설정된 파일을 로드해서 output 의 번들파일을 생성해줍니다. index.js 모듈 파일을 호출하도록 해줍니다. 123// src/index.jsimport file from '[file].js'; 1234567891011// webpack.config.jsconst path = require('path');module.exports = { entry: './src/index.js', output: { filename: 'main.js', path: path.resolve(__dirname, 'dist'), },}; 패키지 설정파일에 웹팩을 실행할 스크립트를 작성해줍니다. 1234567// package.json{ &quot;scripts&quot;: { &quot;build&quot;: &quot;webpack --mode development&quot; }} npm run build 실행하면, ‘dist’ 경로에 ‘main.js’ 라는 파일이 생성됩니다.HTML 파일에서 생성된 파일을 로드하도록 추가해주면 됩니다. 1234567891011121314// dist/index.html&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","link":"/2021/10/30/vanilla/"},{"title":"Vue 이야기","text":"MVC 패턴이 도입되면서 Controller 에서 데이터 작업들에 대한 역할 분담을 해왔고,Vue 는 MVVM 패턴으로 중간에 ViewModel 객체를 두고 데이터에 대한 의존성을 분리하기 위해 사용한 패턴이다.같은 데이터인데 몇가지 조합해서 가공이 필요한 경우에 View Model 부분에서 수정을 하게끔 정해져있다.(Dom listener, Directives, Data Binding 등등..) 렌더링은 React 랑 유사하고 Virtual DOM 을 사용해서 가볍고 빠름. 양방향 데이터 바인딩 (Vue 인스턴스와 Template) 이 모두 데이터에 접근할 수 있음. (v-model) 뷰는 인스턴스가 생성되면 데이터 바인딩을 할 동안 루트요소의 모든 자식 노드를 탐색하면서 데이터 변경에 반응함. 뷰는 DOM 을 비동기적으로 업데이트하고 Vue.nextTick(callback) 을 사용하면 업데이트된 이후를 보장할 수 있음. 그런데 이러한 계층 구조는 데이터 뿐만 아니라. 컴포넌트 상에서도 접목된다. 그 이후로 컴포넌트라는 개념이 자리잡았고, 비지니스 로직과 View 로직이 분리되면서 HTML 작업만 따로 작업을 할 수도 있게 되었다.그러면서 공통적으로 사용할 UI 인 경우엔 컴포넌트로 분리하고 필요하면 데이터만 변경해서 사용할 수 있게 만들어 놓게 되었다. 그리고 이렇게 발전한 사용법으로 Vue 를 접했을 땐, 자식 컴포넌트는 이미 부모 레벨의 정보를 들고 있을 수 있게 되었단걸 알게 되었다. 부모에서 자식 계층으로 정보를 전달하는 방법은?공통 컴포넌트라고 하면 보통은 제일 마지막 자식 계층일 경우가 많다.그래서 이 계층에서는 mounted 에서 부모의 clientHeight 를 구해올 수 있다. 12this.$parent;this.$el.parent; Vue Component 에 타입스크립트 해서 적용해본 사례는?SFC(Single File Component) 는 Vue가 권장하는 Vue 컴포넌트 전용 파일 포맷이다. 한 파일 안에 템플릿과 자바스크립트 그리고 CSS까지 정의한다.개발자가 클래스를 정의하기보다는 클래스를 만들 수 있는 옵션을 정의하는 형태로 개발한다.엄격한 타입의 언어를 다루던 개발자들이 자바스크립트를 다뤄야할때 완충 역할로 타입스크립트를 사용했고,타입은 어플리케이션 설계 전체에 영향을 주는 것이라 필요하게 되었다라고 말하는 shiren님의 글을 보게 되었다는데 아마상당한 시행착오를 겪은 걸 보고, 우리도 Vue3로 전환하면 사용하게 될 거 같다는 생각이 든다. Vue Test Utiljoshua 님 블로그에 보면, vue-cli 로 자동으로 설치가 된다하였지만, 기존에 만들었던 프로젝트는 vue-cli(2.x) 이라 모듈 설치방법으로 진행해봤다.jest 라이브러리 설치 1npm install jest @vue/test-utils vue-jest babel-jest --save-dev ESLint 적용하기standard 를 사용해보고 싶어서 적용했고, indent만 4칸만 지정했다.npm run eslint --fix 로 사용이 가능하다. 12345678// 기본설치npm install -D --save eslint eslint=plugin-vue// 추가사항npm install -D --save eslint-plugin-importnpm install -D --save eslint-plugin-nodenpm install -D --save eslint-plugin-promisenpm install -D --save eslint-plugin-standard indent 만 설정한 기본 파일로 세팅했다. 123456789// .eslint.jsmodule.exports = { root: true, extends: ['standard', 'plugin:vue/recommended'], rules: { indent: ['error', 4], },}; Child 의 이벤트를 전달하는 방법 (EventBus)12345678910111213141516171819202122232425262728293031323334// Child.vue&lt;template&gt; &lt;div&gt; &lt;input @input=&quot;event =&gt; this.$emit('inputChange', event)&quot; /&gt; &lt;/div&gt;&lt;/template&gt;// Parent.vue&lt;template&gt; &lt;div&gt; &lt;Child v-on:inputChange=&quot;handleChange&quot; /&gt; &lt;p&gt;Value: {{value}}&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Child from './Child.vue' export default { data() { return { value: '', }; }, components: { Child, }, methods: { handleChange(event) { const { value } = event.target; this.value = value; } } }&lt;/script&gt; v-on:inputChange 는 심플하게 @inputChange 이렇게 사용할 수 있고,@input 입력이 되면, Parent 의 handleChange 메서드에 값이 전달된다.이걸 내 방법으로 표현하면, this.$emit('inputChange', event) 이벤트 명을 정해주면 hook 이 걸려서동작한 값을 해당 이벤트 명에 전달해줄 수 있다는 의미가 될 수 있겠다. 출처: https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component","link":"/2019/08/14/vuejs/"},{"title":"Yarn","text":"전역에 설치된 모듈을 확인하는 방법: 1yarn global list","link":"/2021/10/17/yarn/"}],"tags":[],"categories":[{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"},{"name":"Lab","slug":"Lab","link":"/categories/Lab/"},{"name":"HTML&#x2F;CSS","slug":"HTML-CSS","link":"/categories/HTML-CSS/"},{"name":"Tip","slug":"Tip","link":"/categories/Tip/"},{"name":"Option","slug":"Option","link":"/categories/Option/"}]}