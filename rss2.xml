<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>jelee</title>
    <link>https://jelee603.github.io/</link>
    
    <atom:link href="https://jelee603.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 22 May 2022 14:43:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Mac을 편하게 사용하는 방법 7가지</title>
      <link>https://jelee603.github.io/2022/04/06/shortcut-mac/</link>
      <guid>https://jelee603.github.io/2022/04/06/shortcut-mac/</guid>
      <pubDate>Wed, 06 Apr 2022 23:00:14 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;Mac-단축키&quot;&gt;&lt;a href=&quot;#Mac-단축키&quot; class=&quot;headerlink&quot; title=&quot;Mac 단축키&quot;&gt;&lt;/a&gt;Mac 단축키&lt;/h4&gt;&lt;p&gt;&lt;code&gt;option + cmd + esc&lt;/code&gt; : 응용 프로그램 강제 종료&lt;br&gt;&lt;code&gt;option + cmd + i&lt;/code&gt; : 크롬 개발자 도구&lt;br&gt;&lt;code&gt;cmd + space&lt;/code&gt; : 스포트라이트 검색 - (활성 상태 보기)&lt;br&gt;&lt;code&gt;cmd + w&lt;/code&gt; : 크롬 텝 닫기&lt;br&gt;&lt;code&gt;cmd + y&lt;/code&gt; : 크롬 브라우저 방문기록 보기&lt;br&gt;&lt;code&gt;cmd + shift + 4&lt;/code&gt; : 영역지정 캡쳐&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="Mac-단축키"><a href="#Mac-단축키" class="headerlink" title="Mac 단축키"></a>Mac 단축키</h4><p><code>option + cmd + esc</code> : 응용 프로그램 강제 종료<br><code>option + cmd + i</code> : 크롬 개발자 도구<br><code>cmd + space</code> : 스포트라이트 검색 - (활성 상태 보기)<br><code>cmd + w</code> : 크롬 텝 닫기<br><code>cmd + y</code> : 크롬 브라우저 방문기록 보기<br><code>cmd + shift + 4</code> : 영역지정 캡쳐</p><span id="more"></span><h4 id="화면-잠금-⌘-L"><a href="#화면-잠금-⌘-L" class="headerlink" title="화면 잠금 (⌘ + L)"></a>화면 잠금 (⌘ + L)</h4><p>시스템 환경설정 - 키보드 - 단축키 - 앱 단축키 - 화면 잠금(command+L)으로 추가하기<br><img src="keyboard.png" alt="화면잠금"></p><h4 id="브라우저에서-탭으로-키워드-검색하기"><a href="#브라우저에서-탭으로-키워드-검색하기" class="headerlink" title="브라우저에서 탭으로 키워드 검색하기"></a>브라우저에서 탭으로 키워드 검색하기</h4><p>시스템 환경설정 - 트랙패드 - 포인트 및 클릭 - 찾아보기 및 데이터 탐색기(세 손가락으로 탭하기)<br><img src="trackpad.png" alt="세 손가락으로 탭하기"></p><h4 id="우클릭처럼-사용하기"><a href="#우클릭처럼-사용하기" class="headerlink" title="우클릭처럼 사용하기"></a>우클릭처럼 사용하기</h4><p>시스템 환경설정 - 트랙패드 - 포인트 및 클릭 - 보조 클릭(두 손가락으로 클릭 또는 탭하기)<br><img src="right-click.png" alt="두 손가락으로 클릭 또는 탭하기"></p><h4 id="브라우저에서-페이지-이동하기"><a href="#브라우저에서-페이지-이동하기" class="headerlink" title="브라우저에서 페이지 이동하기"></a>브라우저에서 페이지 이동하기</h4><p>시스템 환경설정 - 트랙패드 - 추가 제스처 - 페이지 쓸어넘기기(두 손가락으로 좌우로 스크롤하기)</p><h4 id="스크롤방향-바꾸기-원도우처럼-사용하기"><a href="#스크롤방향-바꾸기-원도우처럼-사용하기" class="headerlink" title="스크롤방향 바꾸기 (원도우처럼 사용하기)"></a>스크롤방향 바꾸기 (원도우처럼 사용하기)</h4><p>시스템 환경설정 - 트랙패드 - 스크롤 및 확대/축소 - 스크롤 방향: 자연스럽게 (해제)</p><p><img src="scroll.png" alt="스크롤 방향"></p><h4 id="드래그하기"><a href="#드래그하기" class="headerlink" title="드래그하기"></a>드래그하기</h4><blockquote><p>트랙패드에서 세 손가락으로 드래그하기 기능</p></blockquote><p>시스템 환경설정 - 손쉬운 사용 - 포인터 제어기 - 마우스와 트랙패드 - 스크롤(관성 사용), 드래그 활성화 (세 손가락으로 드래그하기)</p><p><img src="drag.png" alt="드래그 파일"></p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Tip/">Tip</category>
      
      
      
    </item>
    
    <item>
      <title>React Native</title>
      <link>https://jelee603.github.io/2022/03/17/react-native/</link>
      <guid>https://jelee603.github.io/2022/03/17/react-native/</guid>
      <pubDate>Thu, 17 Mar 2022 14:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;리액트 네이티브 앱은 &lt;a href=&quot;https://docs.expo.dev/get-started/create-a-new-app&quot;&gt;Expo CLI&lt;/a&gt;를 설치해서 시작합니다. &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트 네이티브 앱은 <a href="https://docs.expo.dev/get-started/create-a-new-app">Expo CLI</a>를 설치해서 시작합니다. </p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ expo init my-app</span><br><span class="line">$ cd my-app</span><br><span class="line">$ expo start</span><br></pre></td></tr></table></figure><p>핸드폰에 Expo 앱이 설치하고 <code>expo start</code> 실행 후 생성된 QR 코드를 핸드폰 카메라로 인식해서 링크로 이동합니다.<br>와이파이로 같은 네트워크에 있다면, 화면을 확인할 수 있습니다. </p><h3 id="Async-Storage-적용"><a href="#Async-Storage-적용" class="headerlink" title="Async Storage 적용"></a><a href="https://react-native-async-storage.github.io/async-storage/docs/install/">Async Storage</a> 적용</h3><p><a href="https://reactnative.dev/docs/asyncstorage">공식 문서</a>에 <code>react-native</code>패키지에서 사용하던 방법이 현재는 <code>react-native-async-storage</code>에서 사용하는 방법으로 권장됩니다. </p><p><a href="https://www.youtube.com/watch?v=aCe0h50hyCc">유튜브 영상</a>을 보면서 예제를 해봤습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StyleSheet</span>, <span class="title class_">Text</span>, <span class="title class_">View</span>, <span class="title class_">TouchableOpacity</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AsyncStorage</span> <span class="keyword">from</span> <span class="string">&#x27;@react-native-async-storage/async-storage&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">saveData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> user = <span class="string">`Jelee <span class="subst">$&#123;index++&#125;</span>`</span>;</span><br><span class="line">      <span class="title class_">AsyncStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user&#x27;</span>, user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// Error saving data</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">displayData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> user = <span class="keyword">await</span> <span class="title class_">AsyncStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">      <span class="title function_">alert</span>(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;saveData&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Click me to save data<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;displayData&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Click me to display data<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = <span class="title class_">StyleSheet</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">container</span>: &#123;</span><br><span class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">    <span class="attr">alignItems</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    <span class="attr">justifyContent</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>버튼을 클릭하면, 카운트를 계속 증가시켜 스토리지에 추가해보고 <code>Click me to display data</code>버튼을 클릭하면 증가한 숫자가 팝업창에 뜹니다.</p><h3 id="리액트-개발-툴"><a href="#리액트-개발-툴" class="headerlink" title="리액트 개발 툴"></a>리액트 개발 툴</h3><p>애뮬레이터를 실행했을 때, 개발 툴 명령어를 설치하면 개발자 도구로 UI 컴포넌트 트리를 확인할 수 있습니다.<br><a href="https://jeffgukang.github.io/react-native-tutorial/docs/basic-tutorial/basic-functions/02-debugging/debugging-kr.html">참고</a></p><h3 id="리액트-네이티브로-앱을-개발하면서-만나게-된-버그들을-기록합니다"><a href="#리액트-네이티브로-앱을-개발하면서-만나게-된-버그들을-기록합니다" class="headerlink" title="리액트 네이티브로 앱을 개발하면서 만나게 된 버그들을 기록합니다."></a>리액트 네이티브로 앱을 개발하면서 만나게 된 버그들을 기록합니다.</h3><h5 id="Error-Element-type-is-invalid-expected-a-string"><a href="#Error-Element-type-is-invalid-expected-a-string" class="headerlink" title="Error: Element type is invalid: expected a string"></a>Error: Element type is invalid: expected a string</h5><blockquote><p>Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it’s defined in, or you might have mixed up default and named imports. <br/><br>Check the render method of <code>App</code>. <br/><br>해결 방법:<br>import 한 경우 export 가 잘 되었는지 확인한다. 책에선 <code>import &#123; AppLoading &#125; from &#39;expo&#39;</code> 로 사용했던 것이 그 후로 버전이 바뀌면서 <a href="https://docs.expo.dev/versions/latest/sdk/app-loading/">expo-app-loading</a> 모듈 설치 방법으로 변경되었다.그래서 위와 같이 import 는 했는데, 올바른 모듈이 없을 경우에 발생한다.</p></blockquote><hr><h5 id="XDLError-ValidationError-“scheme”-is-not-allowed"><a href="#XDLError-ValidationError-“scheme”-is-not-allowed" class="headerlink" title="XDLError: ValidationError: “scheme” is not allowed"></a>XDLError: ValidationError: “scheme” is not allowed</h5><blockquote><p>XDLError: ValidationError: “scheme” is not allowed <br/><br>해결 방법:<br>$ rm -rf .expo  //디렉토리를 삭제하고 실행해본다. <a href="https://github.com/expo/expo-cli/issues/2951">[자세히]</a></p></blockquote><h5 id="React-Native-RuntimeError-abort-Error-xcrun-exited-with-non-zero-code-2-on-iOS-simulator"><a href="#React-Native-RuntimeError-abort-Error-xcrun-exited-with-non-zero-code-2-on-iOS-simulator" class="headerlink" title="React Native RuntimeError: abort(Error: xcrun exited with non-zero code: 2 on iOS simulator"></a>React Native <code>RuntimeError: abort(Error: xcrun exited with non-zero code: 2</code> on iOS simulator</h5><p><a href="https://github.com/expo/expo-cli/issues/2413">https://github.com/expo/expo-cli/issues/2413</a></p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
    <item>
      <title>모던 자바스크립트 새로운 기능</title>
      <link>https://jelee603.github.io/2022/01/27/modern-js/</link>
      <guid>https://jelee603.github.io/2022/01/27/modern-js/</guid>
      <pubDate>Thu, 27 Jan 2022 23:47:36 GMT</pubDate>
      
      <description>&lt;p&gt;ES2016 ~ ES2020 까지 자바스크립트의 많은 변화가 있었습니다.&lt;br&gt;&lt;a href=&quot;http://www.yes24.com/Product/Goods/101478466&quot;&gt;모던자바스립트 핵심가이드&lt;/a&gt;책이 너무 잘 정리되어있어 책을 보는 것을 추천합니다. 여기엔 자주 사용하는 몇가지 문법만 정리해봅니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>ES2016 ~ ES2020 까지 자바스크립트의 많은 변화가 있었습니다.<br><a href="http://www.yes24.com/Product/Goods/101478466">모던자바스립트 핵심가이드</a>책이 너무 잘 정리되어있어 책을 보는 것을 추천합니다. 여기엔 자주 사용하는 몇가지 문법만 정리해봅니다.</p><span id="more"></span><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries">Object.fromEntries()</a></p><p>키/값 쌍이 포함된 배열을 객체로 변환합니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> entries = [[<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;v1&#x27;</span>], [<span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;v2&#x27;</span>]]</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(entries)</span><br><span class="line"><span class="comment">// &#123;foo: &#x27;v1&#x27;, baz: &#x27;v2&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/entries">Object.entries()</a></p><p>주어진 객체를 [key, value] 쌍의 배열로 반환합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(object1).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[k, v] = e</span>)  =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(k, v));</span><br><span class="line"><span class="comment">// a somestring</span></span><br><span class="line"><span class="comment">// b 42</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/values">Object.values()</a></p><p>모든 값이 담긴 배열을 반환합니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(object1)</span><br><span class="line"><span class="comment">// [&#x27;somestring&#x27;, 42]</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/seal">Object.seal()</a></p><p>객체의 새로운 속성을 추가할 수 없게 얼려버리는 걸 말합니다. 하지만 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze()</a> 과 다르게 데이터 속성값을 변경하는 것은 가능합니다. </p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from()</a></p><p>유사배열객체나 이터러블한 객체를 얕게 복사해 새로운 배열을 생성합니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr_like_obj = &#123;</span><br><span class="line"><span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line"><span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line"><span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line"><span class="attr">length</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arr_like_obj)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a></p><p>자료형을 나타내는 문자열을 반환합니다. </p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a></p><p>해당 속성이 프로토타입 체인 어딘가에 존재하는지 판별합니다. </p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a></p><p>항상 고유하며 객체 속성의 식별자로 사용할 수 있습니다. </p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties">defineProperties</a></p><p>메서드 객체에 새로운 속성을 정의하거나 기존의 속성을 수정하고 그 객체를 반환합니다.</p><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/Private_class_fields">private class fields</a></p><p><code>#</code> 해쉬를 추가해 클래스의 속성을 외부에서 호출할 수 없게 만들 수 있습니다. </p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/static">static</a></p><p>클래스의 정적 메서드 키워드입니다. 인스턴스가 아닌 클래스 자체에서 접근할 수 있는 메서드입니다. </p><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/get">get</a></p><p>클래스 내에서 설정한 객체를 읽기 전용으로 가져올 수 있습니다. </p><h4 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h4><p>Document에 상속된 가장 일반적인 기본 클래스입니다.<br>HTML 태그를 직접 짚어서 사용할 경우에 하위 클래스들의 요소들을 선택할 수 있습니다.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild">firstElementChild</a></p><p>엘리먼트의 첫번째 자식요소를 반환합니다. </p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild">lastElementChild</a></p><p>엘리먼트의 마지막 자식요소를 반환합니다. </p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling">nextElementSibling</a></p><p>엘리먼트 지정한 요소의 바로 다음 요소를 반환합니다. 지정된 요소가 목록의 마지막 요소일 경우엔 null을 반환합니다.</p><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Window/requestAnimationFrame">requestAnimationFrame()</a></p><p>브라우저에게 애니메이션을 호출하는 합수입니다. 실행할 콜백을 인자로 넘겨주면, 리페인트 되기 전에 업데이트 함수를 실행합니다. </p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
    <item>
      <title>코드스피츠 [객체지향 자바스크립트] 돌아보기</title>
      <link>https://jelee603.github.io/2022/01/27/codespitz-86/</link>
      <guid>https://jelee603.github.io/2022/01/27/codespitz-86/</guid>
      <pubDate>Thu, 27 Jan 2022 21:11:37 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=E9NZ0YEZrYU&amp;list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&quot;&gt;코드스피츠 86 - 객체지향 자바스크립트&lt;/a&gt; 강의를 정리해봅니다. &lt;/p&gt;
&lt;h3 id=&quot;프로그래밍의-기준을-어디에-둘까요&quot;&gt;&lt;a href=&quot;#프로그래밍의-기준을-어디에-둘까요&quot; class=&quot;headerlink&quot; title=&quot;프로그래밍의 기준을 어디에 둘까요?&quot;&gt;&lt;/a&gt;프로그래밍의 기준을 어디에 둘까요?&lt;/h3&gt;&lt;p&gt;Value Context: 메모리 주소에 관계없이 값이 같다고 보면 같은 것이라 보는 관점 (값 기반)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;할당하거나 가져올 때, 값을 사용한 경우는 끝없이 복사본을 만든다.&lt;/li&gt;
&lt;li&gt;상태가 관리되서 안전한게 아니라, 계속 불변하는 값들을 만들어내서 안전해 보이는 것일뿐&lt;/li&gt;
&lt;li&gt;연산을 기반으로 로직을 전개</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://www.youtube.com/watch?v=E9NZ0YEZrYU&list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw">코드스피츠 86 - 객체지향 자바스크립트</a> 강의를 정리해봅니다. </p><h3 id="프로그래밍의-기준을-어디에-둘까요"><a href="#프로그래밍의-기준을-어디에-둘까요" class="headerlink" title="프로그래밍의 기준을 어디에 둘까요?"></a>프로그래밍의 기준을 어디에 둘까요?</h3><p>Value Context: 메모리 주소에 관계없이 값이 같다고 보면 같은 것이라 보는 관점 (값 기반)</p><ul><li>할당하거나 가져올 때, 값을 사용한 경우는 끝없이 복사본을 만든다.</li><li>상태가 관리되서 안전한게 아니라, 계속 불변하는 값들을 만들어내서 안전해 보이는 것일뿐</li><li>연산을 기반으로 로직을 전개<span id="more"></span>identifier Context: 힙 메모리에 있는 주소로 보는 관점 (식별 기반)</li></ul><p>기준을 정했으면, 하나의 컨텍스트만 쓰는 것을 권장합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 오브젝트 객체의 리터럴로 값을 만드는 방법</span><br><span class="line">const a = &#123;</span><br><span class="line"> a: 3,</span><br><span class="line"> b: 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const b = &#123;</span><br><span class="line"> a: 3,</span><br><span class="line"> b: 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(a === b) // false (identifier context 기준으로 메모리의 주소를 보면 다른 값이다)</span><br><span class="line">console.log(JSON.stringify(a) === JSON.stringify(b)) // true (문자열로 환원하면, 값으로 보는것이라 같다)</span><br></pre></td></tr></table></figure><h4 id="객체지향-세계"><a href="#객체지향-세계" class="headerlink" title="객체지향 세계"></a>객체지향 세계</h4><ul><li>객체는 하나의 원본입니다. </li><li>내부의 상태관리를 책임지는 객체입니다.</li><li>메시지를 통해서 위임해서 로직을 전개합니다. </li><li>객체 지향은 value context 를 쓰지 않습니다. </li></ul><h4 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h4><ol><li><p>substitution (대체 가능성)</p><ul><li>확장된 객체는 원본으로 대체 가능합니다. (자식은 부모를 대신할 수 있습니다)</li></ul></li><li><p>internal identity (내적일관성)</p><ul><li>생성 시점의 타입이 내부에 일관성 있게 참조됩니다. (어느시점에서든 만들어질 때 상태를 유지합니다)</li></ul></li></ol><p>ex) 오버라이딩: 부모함수를 덮어서 없애고 자식함수로 대체하는 것을 말합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Worker</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;working&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">run</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HardWorker</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">  <span class="comment">// 하드워커의 부분집합이 워커, 확장될 클래스는 확장할 대상을 대체할 수 있다.</span></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hardWorking&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">HardWorker</span>(); <span class="comment">// 워커의 인스턴스로 하드워커를 만듬</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker <span class="keyword">instanceof</span> <span class="title class_">Worker</span>); <span class="comment">// substitution</span></span><br><span class="line">worker.<span class="title function_">print</span>(); <span class="comment">// internal identity</span></span><br></pre></td></tr></table></figure><h4 id="Object-Essentials-객체의-본질"><a href="#Object-Essentials-객체의-본질" class="headerlink" title="Object Essentials (객체의 본질)"></a>Object Essentials (객체의 본질)</h4><ul><li>Maintenance of State (데이터를 은닉)<br>: 객체의 속성이 모두 프라이빗이면서 내 데이터를 관리합니다.</li><li>Encapsulation of Functionality (기능의 캡슐화)<br>: 메소드를 감춥니다. 외부에 캡슐화해서 제공합니다.</li><li>Isolation of Change (격리)<br>: 변화의 여파를 막고 격리시킵니다. 오염시켰을 때, 전역 처리기를 걸어둡니다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const EssentialObject = class &#123;</span><br><span class="line">#name = &quot;&quot;; // hide state</span><br><span class="line">#screen = null;</span><br><span class="line">constructor(name) &#123;</span><br><span class="line">this.#name = name;</span><br><span class="line">&#125;</span><br><span class="line">camouflage() &#123;</span><br><span class="line">this.#screen = (Math.random() * 10).toString(16).replace(&quot;.&quot;, &quot;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">get name() &#123;</span><br><span class="line">return this.#screen || this.#name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="알려진-기본-설계요령-SOLID-원칙"><a href="#알려진-기본-설계요령-SOLID-원칙" class="headerlink" title="알려진 기본 설계요령 (SOLID 원칙)"></a>알려진 기본 설계요령 (SOLID 원칙)</h4><ul><li><p>SRP (Single Responsibility) 단일책임</p><p>코드를 고쳐야하는 이유는 하나뿐이야라고 만드는 방법입니다.<br>잘못하게 되면 산탄총 수술이 필요하게 됩니다.<br>다른 객체에게 의뢰한다 = 다른 객체에게 메시지를 보내는 것.</p></li><li><p>OCP (Open Closed) 개방폐쇄</p><p>기존의 객체를 건드리지 않게 설계를 해야합니다.<br>새로운 문제가 일어났으면 새로운 객체를 만들어서 새로운 것에 대한 해결책만 내릴 수 있게 만듭니다. </p><p>인터페이스나 추상클래스를 상속받아서 처리합니다. 그 다음번 문제도 추상화를 받아서 해결합니다.</p></li><li><p>LSP (Liskov Substitution, 리스코프 치환) </p><p>부모쪽으로 캐스팅해서 형을 변환하는 것을 말합니다.(업캐스팅)</p><p>Ex) 추상층: 생물(숨을 쉰다) 구상층: 사람(생물, 다리로 이동한다), 타조(생물, 다리로 이동한다), 아메바(생물)</p></li><li><p>ISP (Interface Substitution, ISP 치환)</p><p>리스코프 치환법칙을 위반(똑같은 위치에서 같은 기능을 하는 경우에 위임이 불가능할 경우)하게 되면, 인터페이스로 분리하도록 해봅니다. </p><p>역할에 맞게 분리해서 만들어야합니다. </p><ol><li>소유 방법으로 분리한다.</li><li>인터페이스를 만들어서 오버라이딩하면 됩니다.</li></ol></li><li><p>DIP (Dependency Inversion)</p><p>의존성 역전의 법칙, 의존성은 항상 부모에서 자식으로만 상속됩니다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Manager</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">  #workers;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">...workers</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (workers.<span class="title function_">every</span>(<span class="function">(<span class="params">w</span>) =&gt;</span> w <span class="keyword">instanceof</span> <span class="title class_">Worker</span>)) <span class="variable language_">this</span>.#workers = workers;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">doWork</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#workers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">w</span>) =&gt;</span> w.<span class="title function_">run</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> manager = <span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="keyword">new</span> <span class="title class_">Worker</span>(), <span class="keyword">new</span> <span class="title class_">HardWorker</span>());</span><br><span class="line">manager.<span class="title function_">doWork</span>();</span><br></pre></td></tr></table></figure><blockquote><p>용어 정리</p><ol><li>DI (Dependency Injection) 의존성 주입</li><li>DRY 중복방지</li><li>Hollywood Principle 의존성 부패방지<br>물어보지 말고 요청하지 않습니다.. ex) 시간날 때, 나한테 연락을 줘.</li><li>Law of demeter 최소 지식<br>최소한의 지식만 가지고, 내부에서 객체의 타입, 원래 필드의 타입, 인자로 가져온 객체의 타입만 알게 합니다.<br>너무 많아지면, train wreck (열차전복) 현상이 일어납니다.</li><li>Inversion Of Control 제어 역전<br>flow control (흐름 제어) = 역으로 대치하겠다. 즉, 위임하겠다라는 의미입니다.<br>프로그램 실행 통제 : 어떠한 흐름으로 제어할지 결정하는 것입니다.<br>제어를 추상화하고 제어문을 한번만 작성하면, 일반화합니다.<br>개별 제어의 차이점만 외부에서 주입합니다.<br>실제구현: 전략패턴 &amp; 템플릿 메소드 패턴 &lt; 컴포지트 패턴 &lt; 비지터 패턴</li></ol></blockquote><h4 id="SRP-준수하는-객체망이-문제를-해결하는-방법은-뭘까요"><a href="#SRP-준수하는-객체망이-문제를-해결하는-방법은-뭘까요" class="headerlink" title="SRP 준수하는 객체망이 문제를 해결하는 방법은 뭘까요?"></a>SRP 준수하는 객체망이 문제를 해결하는 방법은 뭘까요?</h4><p>다른 객체에게 의뢰하는 것입니다.</p><ol><li>메시지 - 의뢰할 내용</li><li>오퍼레이션 - 메시지를 수신할 객체가 제공하는 서비스</li><li>메소드 - 오퍼레이션이 연결될 실제 처리기</li></ol><h4 id="의존성의-종류"><a href="#의존성의-종류" class="headerlink" title="의존성의 종류"></a>의존성의 종류</h4><ol><li>객체의 생명 주기 전체에 걸친 의존성</li></ol><ul><li>상속(extends)</li><li>연관(association) : 상속을 소유를 합니다.</li><li>의존성이 높거나 역할을 개개인별로 너무 많이 부여하면 코드가 망가집니다.</li><li>부모는 방탄이다.</li><li>필드의 객체 타입을 알고 있습니다.</li></ul><ol start="2"><li>각 오퍼레이션 실행 시 임시적인 의존성</li></ol><blockquote><p>이러한 의존성을 낮추고 격리시키는 방법을 배우는 것이 객체지향 방법론을 배우는 이유입니다. </p></blockquote><h3 id="MVVM-패턴을-알아보고-실습하면서-점진적으로-수정해가는-과정을-배운다"><a href="#MVVM-패턴을-알아보고-실습하면서-점진적으로-수정해가는-과정을-배운다" class="headerlink" title="MVVM 패턴을 알아보고 실습하면서 점진적으로 수정해가는 과정을 배운다."></a>MVVM 패턴을 알아보고 실습하면서 점진적으로 수정해가는 과정을 배운다.</h3><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>Model -&gt; Controller -&gt; View -&gt; Model</p><p>뷰가 모델을 알고 있는 것이 문제가 됩니다. 모델은 비지니스 모델인데 화면에 표시되는 이유와 관련 없는데 밀접하게 연관되서 동작하게 됩니다. </p><p>서버 프로그래밍에서는 컨트롤러로 가공하는 방법이라 괜찮은데 클라이언트 프로그래밍에서는 양방향이 서로 연동되면 안되서 문제가 됩니다.</p><h4 id="제왕적-컨트롤러-MVC"><a href="#제왕적-컨트롤러-MVC" class="headerlink" title="제왕적 컨트롤러 MVC"></a>제왕적 컨트롤러 MVC</h4><p>View -&gt; Controller -&gt; Model -&gt; Controller -&gt; View</p><p>뷰가 컨트롤러를 통해 모델을 바꾸고 뷰의 변화나 모델의 변화가 필요할 때, 컨트롤러를 변경하게 됩니다.</p><h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><p>View (getter, setter) - Presenter -&gt; Model -&gt; Presenter -&gt; View (getter, setter)</p><p>뷰는 인터페이스로써 세터와 게터가를 갖고 있습니다. </p><p>프레젠터 입장에서 뷰의 게터, 세터를 호출합니다. 사실 모델을 모르고 호출하게 되므로, 뷰가 모델을 건드릴 수가 없습니다.</p><p>프레젠터는 통제만 하는 역할을 합니다. </p><h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p>View &lt;- Binder(옵저버) -&gt; ViewModel -&gt; Model -&gt; ViewModel</p><p>뷰모델은 순수한 뷰입니다. 뷰의 변화가 있으면 바인더가 뷰모델을 갱신해줍니다.<br>진짜 뷰와 뷰모델의 의존성을 바인더가 컨트롤하게 됩니다. </p><p>여기서도 뷰모델이 뷰를 완전히 모르게 합니다.</p><h4 id="코드-작성-소스"><a href="#코드-작성-소스" class="headerlink" title="코드 작성 (소스)"></a>코드 작성 <a href="https://gist.github.com/hikaMaeng/ae5301b2808afd150c4f55a47bd9466a">(소스)</a></h4><h3 id="1회차"><a href="#1회차" class="headerlink" title="1회차"></a>1회차</h3><ul><li>TypeCheck()<br>: 자바스크립트는 런타임에 에러가 발견되는 즉시, throw 로 멈추게 하는 코드가 필요합니다. 타입검사를 해서 ‘string’ 또는 객체인지를 비교합니다.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof type == &#x27;string&#x27; // type 이 string 이 아니면 객체이다.</span><br></pre></td></tr></table></figure><blockquote><p>동등 연산자는(==) 강제 형변환을 일으키지 않아서 속도가 빠르다. 그래서 미리 체크하는 함수를 만들어서 사용하면 매번 일치 연산자(===) 로 비교하는 작업을 줄일 수 있다. 일치 연산자는 자료형 검사를 먼저하게 되서 속도가 느리다.</p></blockquote><ul><li>Binder Class<br>: 어떤 뷰 모델과 매칭할지 내부 hook과 뷰모델을 연결해서 반영해줍니다. </li></ul><p>바인딩에는 2가지 방식있습니다.</p><ol><li>태그를 스캔하게 만들어서 만드는 방식, 뷰와 모델을 분리해서 관리할 수 있습니다. (앵귤러의 방식)</li><li>데이터와 연결되어 있는 뷰를 만들어서 이 뷰를 꽂게하는 컴포넌트 방식, 자기 뷰를 모델과 연결해서 만들어둡니다. (리액트의 방식)</li></ol><ul><li>Scanner Class<br>: 현재의 뷰모델을 이용해서 스캔합니다. 스캐너가 아이템을 체크하면서 Binder 클래스에 아이템을 추가합니다.</li></ul><p>SRP원칙을 기반으로 HTML 해석 스캐너를 따로 둡니다. </p><blockquote><p>HTML5 에서는 ‘data-‘ 만들지 않는 속성은 <a href="https://validator.w3.org/#validate_by_uri">유효성 검사</a>에서 모두 깨지게 되어있습니다. 속성을 만들 때는 ‘data-‘ 프리픽스로 만들어줍니다. </p></blockquote><ul><li>애니메이션 효과 </li></ul><p>isStop 플래그로 색상이 변경된 후, 클릭했을 때 멈추도록 설정해줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> viewmodel = <span class="title class_">ViewModel</span>.<span class="title function_">get</span>(&#123;</span><br><span class="line">    <span class="attr">isStop</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="title function_">changeContents</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">wrapper</span>.<span class="property">styles</span>.<span class="property">background</span> = <span class="string">`rgb(<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">            <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">150</span>) + <span class="number">100</span></span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span>,<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">150</span>) + <span class="number">100</span>&#125;</span>,<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">            <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">150</span>) + <span class="number">100</span></span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span>)`</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">contents</span>.<span class="property">properties</span>.<span class="property">innerHTML</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">            .<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">            .<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        binder.<span class="title function_">render</span>(viewmodel);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">wrapper</span>: <span class="title class_">ViewModel</span>.<span class="title function_">get</span>(&#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="attr">events</span>: &#123;</span><br><span class="line">            <span class="title function_">click</span>(<span class="params">e, vm</span>) &#123;</span><br><span class="line">                vm.<span class="property">isStop</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>, vm);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params">_</span>) =&gt; &#123;</span><br><span class="line">    viewmodel.<span class="title function_">changeContents</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(viewmodel.<span class="property">isStop</span>);</span><br><span class="line">    <span class="keyword">if</span> (!viewmodel.<span class="property">isStop</span>) <span class="title function_">requestAnimationFrame</span>(f);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(f);</span><br></pre></td></tr></table></figure><h3 id="2회차"><a href="#2회차" class="headerlink" title="2회차"></a>2회차</h3><p><img src="ex-2.png" alt="MVVM 패턴"></p><p>ViewModel &lt;- Binder[BinderItem] &lt;- Scanner -&gt; HTMLElement</p><ul><li>ViewModel Class <a href="https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2463">[강의]</a><br>: 커스텀 key에 값을 추가할 수 있도록 변경합니다.<br>DOM의 프로퍼티(엘리먼트)와 어트리뷰트(태그) 값을 업데이트 할 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title class_">Object</span>.<span class="title function_">entries</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;styles.attributes.properties&#x27;</span>.<span class="title function_">includes</span>(k)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>[k] = <span class="title class_">ViewModel</span>.<span class="title function_">define</span>(<span class="variable language_">this</span>, k, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, k, &#123;</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">get</span>: <span class="function">(<span class="params">_</span>) =&gt;</span> v,</span><br><span class="line">            <span class="attr">set</span>: <span class="function">(<span class="params">newV</span>) =&gt;</span> &#123;</span><br><span class="line">                v = newV;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> <span class="title class_">ViewModel</span>) &#123;</span><br><span class="line">            v.<span class="property">subKey</span> = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Binder Class <a href="https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2908">[강의]</a></li></ul><p>: 뷰를 그리는 제어문은 바인더에 작성합니다. *** ISP 제어역전이 성립합니다.<br>  데이터를 조작하는 코드만 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params">viewmodel, _ = type(viewmodel, ViewModel)</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.#items.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> vm = <span class="title function_">type</span>(viewmodel[item.<span class="property">viewmodel</span>], <span class="title class_">ViewModel</span>),</span><br><span class="line">               el = item.<span class="property">el</span>;</span><br><span class="line"></span><br><span class="line">           <span class="title class_">Object</span>.<span class="title function_">entries</span>(vm.<span class="property">styles</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> (el.<span class="property">style</span>[k] = v));</span><br><span class="line">           <span class="title class_">Object</span>.<span class="title function_">entries</span>(vm.<span class="property">attributes</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span></span><br><span class="line">               el.<span class="title function_">setAttribute</span>(k, v)</span><br><span class="line">           );</span><br><span class="line">           <span class="title class_">Object</span>.<span class="title function_">entries</span>(vm.<span class="property">properties</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> (el[k] = v));</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>Scanner Class <a href="https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=3955">[강의]</a><br>: HTML을 스캔하고, hook 을 만들어서 바인더와 연결해주는 작업을 합니다. </li></ul><blockquote><p>재귀로 함수가 함수를 호출하다보면 임시 메모리가 쌓이면서 스택오버플로우가 발생하게 됩니다. 해결하려면, 별도의 메모리 공간 스택을 만들고 while 로 돌면서 처리를 하면됩니다. 동적으로 스택을 빼가면서 만듭니다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = [el.<span class="property">firstElementChild</span>];</span><br><span class="line"><span class="keyword">let</span> target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((target = stack.<span class="title function_">pop</span>())) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">checkItem</span>(binder, target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">firstElementChild</span>) stack.<span class="title function_">push</span>(target.<span class="property">firstElementChild</span>);</span><br><span class="line">    <span class="keyword">if</span> (target.<span class="property">nextElementSibling</span>)</span><br><span class="line">        stack.<span class="title function_">push</span>(target.<span class="property">nextElementSibling</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ViewModel Class <a href="https://youtu.be/RT38Za1pkdI?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=4770">[강의]</a><br>: 새로운 클릭했을 때의 이벤트를 추가합니다. style, attribute 를 key 로 잡아줍니다.<br>wrapper 랑 contents 를 바꾼 후에 한번만 렌더합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;styles.attributes.properties&#x27;</span>.<span class="title function_">includes</span>(k)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>[k] = <span class="title class_">ViewModel</span>.<span class="title function_">define</span>(<span class="variable language_">this</span>, k, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, k, &#123;</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">get</span>: <span class="function">(<span class="params">_</span>) =&gt;</span> v,</span><br><span class="line">            <span class="attr">set</span>: <span class="function">(<span class="params">newV</span>) =&gt;</span> &#123;</span><br><span class="line">                newV = v;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> <span class="title class_">ViewModel</span>) &#123;</span><br><span class="line">            v.<span class="property">subKey</span> = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3회차"><a href="#3회차" class="headerlink" title="3회차"></a>3회차</h3><p><img src="ex-3.png" alt="전략 패턴"></p><p>기존 바인더 코드를 전략적으로 변경하는 방법 (바인더가 모델이 변하면 자동으로 변경되게끔 만드는게 목적입니다)</p><h4 id="전략-패턴-Strategy"><a href="#전략-패턴-Strategy" class="headerlink" title="전략 패턴 (Strategy)"></a>전략 패턴 (Strategy)</h4><p>어떤 문제를 해결하기 위한 핵심적인 지식 부분을 의미합니다. 객체에서 상태는 프로퍼티, 행동은 메소드로 표현합니다. </p><ol><li>변화가 생길 때마다 코드를 변경하는게 아니라 객체로 변경합니다. (컴포지션 패턴 -&gt; DI)<ul><li>내부에서 만들면 다시 하드코딩이 됩니다. 코드를 변경하지 않고 외부에서 공급받으면 객체에 대한 의존성을 줄일 수 있습니다. (DI)</li></ul></li><li>반드시 인터페이스나 타입으로 변환합니다. </li><li>내부의 코드를 프로세서와의 계약으로 풀었기 때문에 프로세서로 풀어줍니다.(알고리즘의 일반화)</li></ol><blockquote><p>공통로직으로 묶고, 타입이 제공하는 메소드로만 알고리즘을 수정하는 것 -&gt; 알고리즘의 일반화</p></blockquote><h4 id="템플릿-패턴"><a href="#템플릿-패턴" class="headerlink" title="템플릿 패턴"></a>템플릿 패턴</h4><p>기존 Binder 기능을 Processor Class를 생성해서 위임합니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Processor</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">    cat;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">cat</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cat</span> = cat;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">process</span>(<span class="params"></span></span><br><span class="line"><span class="params">        vm,</span></span><br><span class="line"><span class="params">        el,</span></span><br><span class="line"><span class="params">        k,</span></span><br><span class="line"><span class="params">        v,</span></span><br><span class="line"><span class="params">        _0 = type(vm, ViewModel),</span></span><br><span class="line"><span class="params">        _1 = type(el, HTMLElement),</span></span><br><span class="line"><span class="params">        _2 = type(k, <span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="params">    </span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_process</span>(vm, el, k, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_process</span>(<span class="params">vm, el, k, v</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;override&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">binder.<span class="title function_">addProcessor</span>(</span><br><span class="line">    <span class="keyword">new</span> (<span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Processor</span> &#123;</span><br><span class="line">        <span class="title function_">_process</span>(<span class="params">vm, el, k, v</span>) &#123;</span><br><span class="line">            el.<span class="property">styles</span>[k] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(<span class="string">&#x27;styles&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>자식한테 위임하는 방법 (템플릿 메소드 -&gt; <code>hook</code> 이라 부른다.)</p></blockquote><h4 id="옵저버-패턴-Observer"><a href="#옵저버-패턴-Observer" class="headerlink" title="옵저버 패턴 (Observer)"></a>옵저버 패턴 (Observer)</h4><p>감시하는 쪽(observer)는 상대적으로 편합니다.<br>감시 당하는 쪽(subject)은 변화가 일어나면 notify 로 알려줘야해서 subject가 더 피곤하다 보면 됩니다.</p><dl><dt>ViewModel Class</dt><dd>notify 를 만들어 변경될 때마다 감지를 할 수 있도록 변경합니다. 타겟이 되는 결과 오브젝트를 해석한 후 프로퍼티로 세팅해줍니다. </dd></dl><dl><dt>Binder Class</dt><dd>ViewModelListener 의 책임도 생기게 됩니다. 그래서 인터페이스 별로 분리해줘야합니다.<br>  watch, unwatch 로 등록해서 뷰모델을 받아서 noti가 안 왔을 때, 렌더를 해줄 수 있도록 변경합니다. </dd></dl><h4 id="컴포지트-패턴-Composite"><a href="#컴포지트-패턴-Composite" class="headerlink" title="컴포지트 패턴 (Composite)"></a>컴포지트 패턴 (Composite)</h4><p>동일한 문제를 위임을 반복해서 취합하는 방법을 말합니다.</p><ol><li>뷰모델인 자신이 자식 뷰모델을 옵저버가 되야합니다.<br>자신의 변화를 알아차려야하므로, 뷰모델의 리스너가 되야합니다. 리스너가 아닐 때까지 계속 반복합니다. 백바인드를 걸어준다.</li><li>옵저버 패턴의 인포 객체가 넘어오면 이벤트를 알아야합니다. </li><li>리퀘스트 애니메이션 프레임 당 모든 걸 취합해서 noti 를 한번만 보내줍니다.</li></ol><p>vm 커버하는 단일 루프 하나에 등록해서 씁니다. 배열 루프가 훨씬 빠릅니다. (리스너를 100개 다는 것보다 리스너 1개만 걸고 루프 돌리는게 훨씬 빠름)</p><blockquote><p>계속 하다보면 쉬워집니다. 그래프 순회나 재귀로 푸는 것보다 컴포지트 패턴이 훨씬 쉽게 풀립니다. </p></blockquote><h4 id="비지터-패턴"><a href="#비지터-패턴" class="headerlink" title="비지터 패턴"></a>비지터 패턴</h4><p>2개 이상의 알고리즘에 개입하도록 외부에서 공급되는 전략입니다.<br>단일 컨트롤, 다양한 메서드 다른 곳에서 역할 수행하는 경우에 모두 비지터의 가능성이 있습니다.</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>뷰모델의 부모의 isStop 을 업데이트해줍니다.</p><h3 id="4회차"><a href="#4회차" class="headerlink" title="4회차"></a>4회차</h3><p><img src="ex-4.png" alt="권한 조정"></p><p>책임에 맞는 권한을 부여합니다.</p><h4 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h4><p>뷰모델의 역할에 옵저버 패턴의 서브젝트 역할이 어울리지 않는 거 같습니다. - (역할분리를 해봅니다)<br>역할에 맞게 ViewModel 을 개선하면서 ViewModelSubject 를 만듭니다. </p><ul><li>자바스크립트는 다중상속이 불가능합니다.</li><li>뷰모델 리스너와 뷰모델 서브젝트를 상속 받은 것을 사용해야만합니다.</li><li>리스너가 1개라도 생겼을 때, watch 할 수 있도록 만듭니다. </li><li>리스너가 없으면 unwatch 하고 빼줍니다.</li><li><code>#inited</code> 플래그를 이용한 간단한 제어입니다. 싱글스레드로 변경할 수 있는 방법이 한번뿐이라 쉽습니다. </li></ul><blockquote><p>역할을 분리하고 행위에 대해서 생각합니다. 작명법으로 해결되지 않습니다. </p></blockquote><h4 id="섬세한-권한-조정"><a href="#섬세한-권한-조정" class="headerlink" title="섬세한 권한 조정"></a>섬세한 권한 조정</h4><p>getter, setter 의 진짜 값을 갖고 있는 걸 백그라운드 필드라합니다. </p><p>코드에서는 트랜잭션을 표현하려면, 함수로 만들어야합니다.<br>한번에 일어나는 일인지(트랜잭션)를 함수로 표현하는 것이다.<br>(외부에서도 필요할 때, 함수로 가져갈 수 있도록)</p><blockquote><p>public getter, private setter 패턴 -&gt; 자바스크립트에서 읽기전용을 구현하는 방법입니다.</p></blockquote><h4 id="Visitor-패턴"><a href="#Visitor-패턴" class="headerlink" title="Visitor 패턴"></a>Visitor 패턴</h4><p>보살핌을 받는애가 있고, 그 애가 비지터에게 자기자신을 주면 비지터가 대신 돌아주는 것을 의미합니다.<br>제어를 위임하기 위해 코드를 객체로 변경한다. </p><blockquote><p>어려운 자료구조나 특별한 코드에 대해서 제어코드가 완전히 외부로 위임되서 한 곳에 모여있습니다.<br>특수한 제어를 빼놓기 위해 사용합니다. </p></blockquote><ul><li>DOMVisitor Class</li></ul><p>DOM의 반복은 DOMVisitor의 역할입니다.<br>DOMVisitor는 루프를 돌 필요가 있는 모든 곳에서 사용할 수 있는 함수가 됩니다.</p><ul><li>DOMScanner Class</li></ul><p>Binder가 스캐너의 역할을 가져가고 Scanner는 checkItem 정책을 돌고 HTML만 공급합니다.<br>그래서 스캐너는 역할에 안 맞기 때문에 코드를 분리해서 위임합니다.</p><blockquote><p>소프트웨어 설계란, 코드를 재배치하는 기술을 설계라합니다.<br>코드의 역할을 알고 분리할 줄 알아야한다. 객체를 재배치하는 게 아닙니다. </p></blockquote><h4 id="추상계층-불일치"><a href="#추상계층-불일치" class="headerlink" title="추상계층 불일치"></a>추상계층 불일치</h4><p>계약을 잘못 쓰면 의존성을 잘못 설정하면, 망한 코드가 됩니다.<br>어떤 형에서는 부모를 사용하고 어떤 형에서는 자식을 사용하다보면, 불일치가 일어나게 됩니다. </p><blockquote><p>연습을 많이하면 역할별 분리하는 습관이 생기게 되는데 한쪽이 추상계층이면, 반대쪽도 추상계층으로 맞춰줘야 불일치가 없어진다.</p></blockquote><p>추상계층과 연결될 수 있게 바꾸면 OCP를 수정하지않고 확장할 수 있도록 바꿀 수 있습니다.</p><blockquote><p>기능적인 부분과 도메인적인 부분을 나눠서 개발해야 추후에 도메인 부분만 교체할 수 있습니다.</p></blockquote><h4 id="설계-종합"><a href="#설계-종합" class="headerlink" title="설계 종합"></a>설계 종합</h4><p>좋은 코드는 복잡성을 쪼개서 최적화를 적용할 수 있게 됩니다.<br>가상화된 렌더러 시스템은 어떤 플랫폼으로든 교체가 가능하다는 점이 장점입니다.<br>많은 구현체들은 직접 바인더 콜하는 경우가 많아졌고, 옵저버 패턴으로 연결된 부분만 복잡도가 높게 되었습니다. </p><h3 id="5회차"><a href="#5회차" class="headerlink" title="5회차"></a>5회차</h3><h4 id="문제점-짚어보기"><a href="#문제점-짚어보기" class="headerlink" title="문제점 짚어보기"></a>문제점 짚어보기</h4><p>문제 1. binder 의 viewmodelUpdated 가 전역변수를 참조하고 있다.<br>자신의 뷰모델을 보내주도록 변경해줍니다. set 안에 별도의 속성을 넣는 건 애매한 일이기에 인자에 따로 플래그를 준다.</p><p>문제 2. 바인더에는 vm 의 특정 키를 인식하는 코드가 없다.<br>뷰모델에는 key가 확정(하드코딩)되어있는데 다른 서브키를 가질 수 없다. </p><ul><li>임의의 키를 매핑할 수 있는 코드로 수정한다. (하드코딩을 제거한다.)</li><li>처리기는 데이터 구조가 매핑된다. 데이터 구조도 동적으로 바꾸는과정이 필요하다.<br>define 이 재귀로 호출하게끔 한다.</li></ul><blockquote><p>reduce 는 초기값은 두고 첫번째 인자 accumulator 가 계속 앞에 인자로 들어오고 두번째 인자는 배열의 원소들이 들어온다. 그 다음에 있는  accumulator 있는 건 함수가 반환하는 값으로 변경된다. 오브젝트로 반환 될거다. ex) Object.entries().reduce(() =&gt; {}, {})</p></blockquote><p>문제3. setDomProcessor 세팅을 넣어준다.<br>바인더에게 데코레이팅 해준다.</p><p>문제4. binder에 공개 정보를 너무 많이 주고 있다? 프로세스의 자율성이 떨어진다.</p><p>핵심 코어의 복잡성을 알려주기 위해 바인더가 무거워졌습니다. 본체는 가볍과 바깥쪽에 마지막 구현체의 실력에 따라 달라지도록 만든 것입니다. </p><blockquote><p>디자인이나 설계는 정답이 조직안에 있습니다. 누가 더 난이도 높은 쪽을 가져갈 것인가.<br>디자인 의사결정은 코드의 배치 결정인데 항상 사람의 역량을 보고 결정해야합니다. </p></blockquote><h4 id="데코레이터-패턴-강의"><a href="#데코레이터-패턴-강의" class="headerlink" title="데코레이터 패턴 [강의]"></a>데코레이터 패턴 <a href="https://youtu.be/5UUISCK6CL4?list=PLBNdLLaRx_rIRXCp9tKsg7qDQmAX19ocw&t=2791">[강의]</a></h4><p>자기가 일하고 계속 다음번에게 넘기는 것을 말합니다.<br>바인더에 도움없이 프로세서 세터를 만들어줍니다.<br>소유하는 것과 격리시켜서 분리할 수 있습니다.</p><blockquote><p>다음번 애한테 일을 시킬지 말지 결정해서 중간에 멈출 수 있는 패턴은 Chain of Responsibility 패턴이라 합니다.</p></blockquote><p>루프가 나왔을 때, 객체로 바꾸는 방법이 링크드리스트로 만드는 데코레이터 패턴입니다. </p><h4 id="새로운-ol-li-만들기"><a href="#새로운-ol-li-만들기" class="headerlink" title="새로운 ol, li 만들기"></a>새로운 ol, li 만들기</h4><p>확장가능한 밑작업 위에 템플릿 프로세서를 만듭니다.<br>오브젝트의 검증 -&gt; err 순수함수 사용 or 클래스로 정의</p><blockquote><p>클래스의 싱글톤 객체와 static 의 차이<br>static 은 상속이 안된다. 단순 함수와 상태만 있습니다. </p></blockquote><h4 id="쉴드-패턴"><a href="#쉴드-패턴" class="headerlink" title="쉴드 패턴"></a>쉴드 패턴</h4><p>검증되어있는 코드, 모든 코드가 안정화된 것만 내려오도록 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (..)&#123; </span><br><span class="line">  template = ... </span><br><span class="line">  data = ...</span><br><span class="line">&#125;<span class="comment">// black list : 코드의 검증</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// white list: 위에 데이터를 이용하는 코드 (실수를 방지하기 위해)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WL</span> = &#123; template, data &#125;</span><br></pre></td></tr></table></figure><p>유지보수 면에서는 로직 코드가 시작되기 전에 모두 검증이 끝나있어야합니다. </p><blockquote><p>옵셔널 코드와 쉴드패턴의 차이는 잘못되면 옵셔널은 전개가 되지 않습니다.</p></blockquote><p><img src="result.png" alt="결과"></p><hr><p>강의 중간중간에 개발에 도움되는 얘기를 많이 듣게 됩니다.<br>코드도 너무 잘 짜시고, 패턴대로 수정해나갈 수 있다는게 정말 엄청 신기하고 멋지다는 생각이 절로 듭니다. </p><p>저는 직접가서 보기도 했었지만..(유튜브에 뒷통수가 출연했어요!)<br>주옥같은 강의를 여러번 돌려볼 수 있다는게 너무 다행이란 생각입니다:)</p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
    <item>
      <title>VSCode 에서 ESLint와 Prettier 설정방법</title>
      <link>https://jelee603.github.io/2022/01/15/eslint-prettier/</link>
      <guid>https://jelee603.github.io/2022/01/15/eslint-prettier/</guid>
      <pubDate>Sat, 15 Jan 2022 17:05:58 GMT</pubDate>
      
      <description>&lt;p&gt;ESLint 와 Prettier 를 적용 후 VSCode에서 자동 저장이 되게 하기 위해서는 다음과 같이 코드를 추가해주면 됩니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>ESLint 와 Prettier 를 적용 후 VSCode에서 자동 저장이 되게 하기 위해서는 다음과 같이 코드를 추가해주면 됩니다.</p><span id="more"></span><h4 id="Settings-파일을-직접-수정하는-방법"><a href="#Settings-파일을-직접-수정하는-방법" class="headerlink" title="Settings 파일을 직접 수정하는 방법"></a>Settings 파일을 직접 수정하는 방법</h4><p>command + shift + P : Command Palette</p><p><img src="./settings.png" alt="file open"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VSCode &gt; settings.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span> <span class="comment">// ESLint</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>, <span class="comment">// Prettier</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IDE에서-파일을-설정하는-방법"><a href="#IDE에서-파일을-설정하는-방법" class="headerlink" title="IDE에서 파일을 설정하는 방법"></a>IDE에서 파일을 설정하는 방법</h4><p>Preference &gt; Settings (⌘ ,)<br><img src="./auto-save.png" alt="auto-save"></p><h4 id="규칙-설정-방법"><a href="#규칙-설정-방법" class="headerlink" title="규칙 설정 방법"></a>규칙 설정 방법</h4><p><a href="https://eslint.org/docs/user-guide/getting-started">ESLint</a>는 코드가 정의된 규칙과 일치하지 않을 때, 판별해주는 정적 코드 분석 도구입니다. <br/> 자동저장 시, 코드 스타일을 바꿔줄 수 있습니다.</p><p>문자열 배열의 경우에 쉼표 뒤에 아래로 한칸씩 떨어지는 스타일을 더 선호한다면, <a href="https://eslint.org/docs/rules/indent#:~:text=bar%2C%0Abaz%2C%0A%20%20%20%20%20%20qux%0A%5D%3B-,Examples,-of%20correct%20code">규칙</a>을 추가해서 사용하면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;indent&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="number">4</span>, &#123; <span class="string">&quot;ArrayExpression&quot;</span>: <span class="number">1</span> &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://prettier.io/docs/en/index.html">Prettier</a>는 공통 스타일 가이드에 따라 더 이쁘게 표현하기 위한 코드 포맷터입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .prettierrc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;trailingComma&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tabWidth&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&quot;semi&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대부분 2가지를 같이 사용하기에 일관성 있는 코드가 될 수 있게 자동 저장시에 반영될 수 있게 적용해서 사용하시길 바랍니다.</p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Tip/">Tip</category>
      
      
      
    </item>
    
    <item>
      <title>TSConfig 설정방법</title>
      <link>https://jelee603.github.io/2022/01/14/typescript-config/</link>
      <guid>https://jelee603.github.io/2022/01/14/typescript-config/</guid>
      <pubDate>Fri, 14 Jan 2022 16:14:08 GMT</pubDate>
      
      <description>&lt;p&gt;타입스크립트로 전환하면, config 파일을 생성해서 프로퍼티를 추가하게 되는데요,&lt;br&gt;기본 리액트 버전으로 설치하면 가장 먼저 만나게 되는 오류가 있습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>타입스크립트로 전환하면, config 파일을 생성해서 프로퍼티를 추가하게 되는데요,<br>기본 리액트 버전으로 설치하면 가장 먼저 만나게 되는 오류가 있습니다.</p><span id="more"></span><blockquote><p><span style='color:red'> Could not find a declaration file for module ‘react’.<br>…<br>implicitly has an ‘any’ type. </span></p></blockquote><p>암시적으로 any 타입을 가집니다. 라고 해석할 수 있는데요.<br>타입스크립트에서 타입을 사용하도록 엄격하게 권장하고 있습니다.</p><p>어떤 타입인지 모르고 지나칠 때가 있습니다. 그러면 <code>&#39;any&#39;</code>라고 명시해야하는데 이 조차도 너무 번거롭다 느껴질 때 약간 느슨하게 타입을 안쓰고 넘어가게 해주는 방법이 있습니다.</p><p><a href="https://www.typescriptlang.org/tsconfig#noImplicitAny">noImplicitAny</a> 프로퍼티를 추가해주는 방법인데요, off 로 바꿔주면 오류는 발생하지 않을것입니다.</p><p>결과적으로는 타입스크립트로 전환했으면, 모든 타입을 작성해주는 것은 매우 중요한 거 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Tip/">Tip</category>
      
      
      
    </item>
    
    <item>
      <title>리액트 타입스크립트에 Cypress 적용하기</title>
      <link>https://jelee603.github.io/2022/01/14/react-cypress/</link>
      <guid>https://jelee603.github.io/2022/01/14/react-cypress/</guid>
      <pubDate>Fri, 14 Jan 2022 13:58:02 GMT</pubDate>
      
      <description>&lt;p&gt;이 글은 Cypress 블로그의 &lt;a href=&quot;https://www.cypress.io/blog/2021/04/06/cypress-component-testing-react&quot;&gt;원문&lt;/a&gt;을 직역해서 &lt;a href=&quot;https://github.com/jelee603/cypress-testing-example&quot;&gt;실습&lt;/a&gt;하기 위해 작성했습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>이 글은 Cypress 블로그의 <a href="https://www.cypress.io/blog/2021/04/06/cypress-component-testing-react">원문</a>을 직역해서 <a href="https://github.com/jelee603/cypress-testing-example">실습</a>하기 위해 작성했습니다.</p><span id="more"></span><h2 id="Cypress-시작하기"><a href="#Cypress-시작하기" class="headerlink" title="Cypress 시작하기"></a>Cypress 시작하기</h2><p>Cypress7.0 중, Cypress와 함께 패키지로 묶은 새로운 컴포넌트입니다.<br>이것은 테스팅을 실행으로부터 만드는 법을 배우고, <code>experimentalComponentTesting</code> 플래그가 숨겨져 있습니다.</p><p>블로그의 이 글에서는 타입스크립트를 사용한 새로운 리액트 앱을 통해 리액트를 생성하고 Cypress 컴포넌트 테스트 러너를 설치하는 방법을 볼 수 있을 것입니다.</p><p>블로그에 사용된 예제코드는 <a href="https://github.com/lmiller1990/cypress-react-template">여기</a>서 얻을 수 있습니다.</p><h2 id="새-리액트-프로젝트-생성"><a href="#새-리액트-프로젝트-생성" class="headerlink" title="새 리액트 프로젝트 생성"></a>새 리액트 프로젝트 생성</h2><p>새로운 리액트는 만드는 법을 시작합니다. 옵션으로 타입스크립트를 추가합니다. - 이 예제를 사용할 것입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create react-app cypress-test-react --template typescript</span><br></pre></td></tr></table></figure><h2 id="Cypress-컴포넌트-테스트-러너를-구성하는-방법"><a href="#Cypress-컴포넌트-테스트-러너를-구성하는-방법" class="headerlink" title="Cypress 컴포넌트 테스트 러너를 구성하는 방법"></a>Cypress 컴포넌트 테스트 러너를 구성하는 방법</h2><p>리액트 프로젝트를 한번 얻고, Cypress 설치와 웹팩 DevServer 와 리액트 어댑터를 설치합니다.</p><p>리액트 앱 프로젝트는 웹팩 기반에 있습니다. 웹팩 어댑터와 연관된 설치중입니다.<br>또한 <code>@cypress/react</code> 필요하고, 컴포넌트(<code>mount</code>하기 위해 비슷한 Enzyme 또는 테스팅 라이브러리에 <code>render</code>)들과 상호적으로 붙일 수 있는 방법이 우선입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add cypress @cypress/react @cypress/webpack-dev-server --dev</span><br></pre></td></tr></table></figure><p>다음, 기본 설정을 위해 <code>cypress.json</code> 만듭니다:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;component&quot;: &#123;</span><br><span class="line">    &quot;testFiles&quot;: &quot;**/*.test.&#123;js,ts,jsx,tsx&#125;&quot;,</span><br><span class="line">    &quot;componentFolder&quot;: &quot;src&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기에 몇가지 컴포넌트 테스팅 상세 옵션을 추가하고, 앞으로는 <code>&quot;component&quot;</code> 키를 사용합니다.<br><code>&quot;componentFolder&quot;</code>에 모든 컴포넌트와 테스트들이 위치하고 <code>&quot;testFiles&quot;</code>은 테스트파일을 찾기위한 패턴입니다.</p><p>마지막으로 컴포넌트 테스트를 위해 <code>@cypress/webpack-dev-server</code>가 필요합니다.<br>플러그인은 <a href="https://docs.cypress.io/guides/tooling/plugins-guide#Installing-plugins">Cypress 문서</a>가 상세하게 설명합니다.<br>기본 플러그인은 <code>cypress/plugins/index.js</code> 부터 로드 됩니다. 파일을 만들고 추가합니다:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// cypress/plugins/index.js</span><br><span class="line"></span><br><span class="line">const injectDevServer = require(&quot;@cypress/react/plugins/react-scripts&quot;)</span><br><span class="line"></span><br><span class="line">module.exports = (on, config) =&gt; &#123;</span><br><span class="line">  injectDevServer(on, config)</span><br><span class="line">  return config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이것은 Cypress 웹팩 Dev Server를 사용하기 위해 웹팩과 같은 설정으로 리액트 앱을 사용합니다.</p><p>다른 템플릿을 사용한다면, Next.js 같은, 몇가지 다른 유용한 어댑터를 가져야합니다.</p><p>또한 1개의 어댑터를 만드는게 가능합니다.</p><h2 id="테스트-작성법"><a href="#테스트-작성법" class="headerlink" title="테스트 작성법"></a>테스트 작성법</h2><p>Cypress 를 사용하기 위해, <code>src/App.test.tsx</code> 이동시켜, 리액트 앱 템플릿으로 가져옵니다.<br>간단한 이동입니다:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// src/App.test.tsx</span><br><span class="line"></span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">import &#123; mount &#125; from &#x27;@cypress/react&#x27;;</span><br><span class="line">import App from &#x27;./App&#x27;;</span><br><span class="line"></span><br><span class="line">it(&#x27;renders learn react link&#x27;, () =&gt; &#123;</span><br><span class="line">  mount(&lt;App /&gt;);</span><br><span class="line">  cy.get(&#x27;a&#x27;).contains(&#x27;Learn React&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>대부분의 테스트는 <code>@cypress/react</code> 로 부터 <code>mount</code>할 때 시작할 것입니다. 테스트 라이브러리의 <code>render</code>와 유사합니다. 컴포넌트가 한번 마운트되면, Cypress의 확장된 올바른 행동을 확인하기 위한<a href="https://docs.cypress.io/api/table-of-contents">query and assertion APIs</a> 를 사용할 수 있습니다.<br>이 예제는 <code>&quot;Learn React&quot;</code> 렌더되었다고 확증할 수 있습니다.</p><p>테스트 러너에서 Cypress 컴포넌트를 실행하세요:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn cypress open-ct</span><br></pre></td></tr></table></figure><p>그리고 왼쪽 트리구조에서 스펙을 선택하세요.</p><p>변경되도록 해보세요 - 테스트는 즉각 재실행됩니다. 오로지 즉각적인 것은 아닙니다. 테스트가 통과되거나 실패 되었다면, 시각적으로 점검하고 디버그가 가능합니다.</p><p><code>yarn cypress run-ct</code>로 모든 스펙들은 실행할 수 있습니다. CI 환경, 또는 코드 커밋과 푸시 전에 마지막 체크에서 테스트들의 실행하기에 유용합니다.</p><h2 id="논의"><a href="#논의" class="headerlink" title="논의"></a>논의</h2><p>Cypress 컴포넌트 테스트 러너는 jsdom 기반의 테스팅 환경(예를 들어, jest 와 Vue Test Utils)의 대안책입니다. 많은 장점을 제안합니다:</p><ul><li>실제 브라우저에서 실행됩니다. 이 의미는 테스트가 유저에게 더 가까운 경험이 될 것입니다.</li><li>비주얼. 무엇이 렌더되었는지 볼 수 있습니다. 더이상 무엇이 렌더되거나 디버그인지 찾으며 수수께끼 터미널 로그를 스크롤링 하지 않아도 됩니다. - 단지 devtools 과 브라우저 DOM 을 열면 됩니다.</li><li>Cypress 의 힘 - 가장 인기있고 의지할 수 있는 E2E 테스팅이 있습니다.</li></ul><p>또한 디자인 환경이 2배입니다. 즉시 반영과 가까운 인스턴스 피드백을 주고 발전되는 것을 볼 수 있습니다.<br>이것은 점진적으로 테스트 기반 jest 가 아니고, Storybook 디자인 기반 잘 되어진 환경입니다.</p><p>여전히 알파버전이지만, 빠르게 발전하고 있고 컴포넌트 테스팅의 지표를 바꿀 것을 약속합니다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>컴포넌트 테스팅을 위한 큰 Cypress 를 가져옵니다. 아래 어댑터 이래로, 웹팩과 같은, 테스트 전체를 버릴 필요는 없습니다. - 마이그레이션을오 가능합니다.</p><p>시각적인 측면은 단위 테스트과 단독 툴 디자인입니다. 엉망인 콘솔 결과를 잡아내던 시절은 끝났습니다. - 테스트 실행으로 어떤 컴포넌트인지 볼 수 있습니다.</p><p>블로그의 코드는 <a href="https://github.com/lmiller1990/cypress-react-template">여기</a>에서 볼 수 있습니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cypress.io/blog/2021/04/06/cypress-component-testing-react">https://www.cypress.io/blog/2021/04/06/cypress-component-testing-react</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Lab/">Lab</category>
      
      
      
    </item>
    
    <item>
      <title>JS 런타임 오류 (React)</title>
      <link>https://jelee603.github.io/2021/12/28/react-runtime-error/</link>
      <guid>https://jelee603.github.io/2021/12/28/react-runtime-error/</guid>
      <pubDate>Tue, 28 Dec 2021 14:57:17 GMT</pubDate>
      
      <description>&lt;p&gt;오랜만에 React (v17.0.2) 최신버전으로 설치하고, &lt;code&gt;npm start&lt;/code&gt; 를 실행했는데 아래와 같은 버그를 만났습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bug: Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: @eslint\eslintrc\universal.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;먼저 어떤 버전의 문제인지, React 와 Eslint 에서 권장하는 버전을 확인하러 가봅니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>오랜만에 React (v17.0.2) 최신버전으로 설치하고, <code>npm start</code> 를 실행했는데 아래와 같은 버그를 만났습니다.</p><blockquote><p>Bug: Error [ERR_REQUIRE_ESM]: Must use import to load ES Module: @eslint\eslintrc\universal.js</p></blockquote><p>먼저 어떤 버전의 문제인지, React 와 Eslint 에서 권장하는 버전을 확인하러 가봅니다.</p><span id="more"></span><ol><li>공식 홈페이지 권장사항<br><a href="https://reactjs.org/docs/create-a-new-react-app.html">https://reactjs.org/docs/create-a-new-react-app.html</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node &gt;= 14.0.0</span><br><span class="line">npm &gt;= 5.6</span><br></pre></td></tr></table></figure><ol start="2"><li>eslint v8 일 때, nodejs 버전을 업그레이드 해주라고 하네요.<br><a href="https://github.com/eslint/eslint/issues/15247">https://github.com/eslint/eslint/issues/15247</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node  ^12.22.0 || ^14.17.0 || &gt;=16.0.0</span><br></pre></td></tr></table></figure><p>2가지 버전을 확인해보니, Node 버전이 최소 14 이상은 되어야 안정적일 거 같아 보이네요.<br>설치된 런타임 버전을 확인해봅니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v // v12.22</span><br><span class="line">npm -v // v6.14.15</span><br></pre></td></tr></table></figure><p>예전에 작업하면서 노드 버전을 v12.22 로 사용하고 있었네요. v14.18 로 NVM을 변경해줍니다.</p><p>스위칭 후에 OSX 터미널에서 실행하면 정상적으로 동작합니다. 이제 VSCode 터미널에서 실행해봅니다.<br>여전히 오류가 발생합니다. <br/><br/></p><p>한참을 찾아보다가 좋은 <a href="https://stackoverflow.com/questions/44700432/visual-studio-code-to-use-node-version-specified-by-nvm">해결 방법</a>을 발견했습니다.<br>NVM을 이용해서 전역 버전을 변경하더라도 모든 동일하게 반영이 되지 않네요. <br/><br/></p><p>항상 사용하는 버전을 NVM Default 로 맞춰두고, <code>nvm use default</code> 로 사용을 해야할 거 같습니다.<br>VSCode 에서는 <a href="https://code.visualstudio.com/docs/editor/debugging#_run-view">launch.json 파일</a>에 <code>runtimeVersion: default</code>로 추가해두면 항상 default 값을 사용할 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// OS X Terminal</span><br><span class="line">nvm alias default 14.18.1</span><br><span class="line"></span><br><span class="line">// VSCode Terminal</span><br><span class="line">nvm use default</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
    <item>
      <title>브라우저 동작 원리</title>
      <link>https://jelee603.github.io/2021/12/01/browser-operation/</link>
      <guid>https://jelee603.github.io/2021/12/01/browser-operation/</guid>
      <pubDate>Wed, 01 Dec 2021 21:59:43 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;브라우저의-역할&quot;&gt;&lt;a href=&quot;#브라우저의-역할&quot; class=&quot;headerlink&quot; title=&quot;브라우저의 역할&quot;&gt;&lt;/a&gt;브라우저의 역할&lt;/h2&gt;&lt;p&gt;브라우저는 웹페이지를 서버에 요청하고 서버의 응답을 받아 표시합니다.&lt;br&gt;서버로부터 html, css, javascript, 이미지 파일 등 응답받는 것입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="브라우저의-역할"><a href="#브라우저의-역할" class="headerlink" title="브라우저의 역할"></a>브라우저의 역할</h2><p>브라우저는 웹페이지를 서버에 요청하고 서버의 응답을 받아 표시합니다.<br>서버로부터 html, css, javascript, 이미지 파일 등 응답받는 것입니다.</p><span id="more"></span><p>html, css 는 렌더링 엔진인 html 파서와 css 파서에 의해 파싱되어 DOM, CSSOM 트리로 변환되어 렌더 트리로 결합됩니다. 브라우저는 렌더 트리를 기반으로 웹페이지를 표시합니다.</p><p>크롬은 대부분의 브라우저와 달리 각 탭마다 별도의 렌더링 엔진 인스턴스를 유지하고 있습니다.<br>각 탭은 독립된 프로세스로 처리된다는 점이 장점입니다.</p><p>사파리와 크롬은 <a href="%5Bhttps://webkit.org%5D(https://webkit.org/)">웹킷 엔진</a>을 사용합니다.</p><h2 id="동작-과정"><a href="#동작-과정" class="headerlink" title="동작 과정"></a>동작 과정</h2><h3 id="렌더링-엔진"><a href="#렌더링-엔진" class="headerlink" title="렌더링 엔진"></a>렌더링 엔진</h3><p><code>렌더링 엔진</code>은 HTML 문서를 파싱하고 “콘텐츠 트리” 내부에서 태그를 <code>DOM 노드</code>로 변환해줍니다. 그 다음 외부 CSS 파일과 함께 스타일 요소도 파싱하게 되는데 스타일 정보와 HTML 표시 규칙은 <code>렌더 트리</code>라고 부르는 또다른 트리를 생성합니다.</p><p><code>렌더 트리</code> 생성이 끝나면 배치(layout)가 시작되는데 각 노드가 화면의 정확한 위치에 표시는 되는 것을 의미합니다.</p><p><code>렌더링 엔진</code>은 좀 더 나은 사용자 경험을 위해 가능하면 빠르게 내용을 표시하는데 모든 html 을 파싱할 때까지 기다리지 않고 배치(layout)와 그리기 과정을 시작합니다. 네트워크로부터 나머지 내용이 전송되기를 기다리는 동시에 받은 내용의 일부를 먼저 화면에 표시해주는 것이죠.</p><h3 id="파싱"><a href="#파싱" class="headerlink" title="파싱"></a>파싱</h3><p>html 파서는 script 태그를 만나면 자바스크립트 코드를 실행하기 위해 DOM 생성 프로세스를 중지하고 자바스크립트 엔진으로 제어권을 넘겨줍니다. 자바스크립트 엔진은 자바스크립트 파일을 로드하고 파싱하여 실행합니다.</p><p>자바스크립트의 실행이 완료되면, 다시 HTML 파서로 제어권을 넘겨서 브라우저가 중지했던 시점부터 DOM 생성을 재개합니다.</p><p>이처럼 브라우저는 동기적으로 html, css, javascript를 처리하게 됩니다.<br>그래서 흔히, body 아래에 script 써주는 방법이 dom 생성이 지연되어 발생할 수 있는 오류를 예방하는데 좋은 방법이 되었습니다.</p><h2 id="자바스크립트-엔진"><a href="#자바스크립트-엔진" class="headerlink" title="자바스크립트 엔진"></a>자바스크립트 엔진</h2><p>자바스크립트는 렌더링 엔진이 아닌 chrome 에서는 chrome v8 자바스크립트 엔진이 담당합니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://poiemaweb.com/js-browser">https://poiemaweb.com/js-browser</a></li><li><a href="https://d2.naver.com/helloworld/59361">https://d2.naver.com/helloworld/59361</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/HTML-CSS/">HTML/CSS</category>
      
      
      
    </item>
    
    <item>
      <title>React Redux</title>
      <link>https://jelee603.github.io/2021/11/26/react-redux/</link>
      <guid>https://jelee603.github.io/2021/11/26/react-redux/</guid>
      <pubDate>Fri, 26 Nov 2021 13:45:56 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;리덕스는-아래와-같은-상황을-방지하기-위해-사용합니다&quot;&gt;&lt;a href=&quot;#리덕스는-아래와-같은-상황을-방지하기-위해-사용합니다&quot; class=&quot;headerlink&quot; title=&quot;리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다.&quot;&gt;&lt;/a&gt;리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다.&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;여러 컴포넌트에 걸쳐 전달하게 될 경우, 불필요한 props 가 늘어날 수 있다.&lt;/li&gt;
&lt;li&gt;형제 컴포넌트에서 불필요한 렌더링이 일어날 수 있다.&lt;/li&gt;
&lt;li&gt;최상위 컴포넌트에서 상태관리 로직이 많아 길어지는 현상도 있을 수 있다.</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="리덕스는-아래와-같은-상황을-방지하기-위해-사용합니다"><a href="#리덕스는-아래와-같은-상황을-방지하기-위해-사용합니다" class="headerlink" title="리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다."></a>리덕스는 아래와 같은 상황을 방지하기 위해 사용합니다.</h2><ul><li>여러 컴포넌트에 걸쳐 전달하게 될 경우, 불필요한 props 가 늘어날 수 있다.</li><li>형제 컴포넌트에서 불필요한 렌더링이 일어날 수 있다.</li><li>최상위 컴포넌트에서 상태관리 로직이 많아 길어지는 현상도 있을 수 있다.<span id="more"></span><h2 id="리덕스의-동작-과정"><a href="#리덕스의-동작-과정" class="headerlink" title="리덕스의 동작 과정"></a>리덕스의 동작 과정</h2></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 리덕스는 스토어라는 객체 내부에 상태를 담게 됩니다.</span><br><span class="line"></span><br><span class="line">2. 상태를 변경시킬 때, 액션을 전달하는데 이 과정을 디스패치라합니다.</span><br><span class="line"></span><br><span class="line">3. 스토어가 액션을 받으면 리듀서가 상태를 변화시키는 로직으로 어떤 작업을 할지 정합니다.</span><br><span class="line"></span><br><span class="line">4. 액션 처리 후에 새 상태를 스토어에 담습니다.</span><br><span class="line"></span><br><span class="line">5. 스토어 안에 있는 상태가 바뀌면 구독하고 있는 컴포넌트에게 전달합니다.</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux react-redux</span><br></pre></td></tr></table></figure><p>타입스크립트 공식문서 <a href="https://ko.redux.js.org/recipes/usage-with-typescript">예제</a>는 actions 와 reducer 파일을 분리했지만, 공부하는 입장에서 분리하지 않고 하나로 보면 아래와 같습니다.</p><p><code>Action</code> 접미사를 붙인 객체에는</p><p>type 에 넘겨줄 값들의 타입을 정의하고,</p><p>payload 에 리듀서 상태를 변경하는 로직을 넣어줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/system.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">UPDATE_SESSION</span> = <span class="string">&#x27;UPDATE_SESSION&#x27;</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">SystemState</span> &#123;</span><br><span class="line">  <span class="attr">loggedIn</span>: boolean</span><br><span class="line">  <span class="attr">session</span>: string</span><br><span class="line">  <span class="attr">userName</span>: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">UpdateSessionAction</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="keyword">typeof</span> <span class="variable constant_">UPDATE_SESSION</span></span><br><span class="line">  <span class="attr">payload</span>: <span class="title class_">SystemState</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 액션은 상태 변화 시킬 때 참조하는 객체를 정의한다.</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">SystemActionTypes</span> = <span class="title class_">UpdateSessionAction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">initialState</span>: <span class="title class_">SystemState</span> = &#123;</span><br><span class="line">  <span class="attr">loggedIn</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">session</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">userName</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리듀서는 액션으로부터 받은 상태 변화 로직만 처리한다.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">systemReducer</span>(<span class="params"></span></span><br><span class="line"><span class="params">  state = initialState,</span></span><br><span class="line"><span class="params">  action: SystemActionTypes</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">SystemState</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">UPDATE_SESSION</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        ...action.<span class="property">payload</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; systemReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./system/reducers&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; chatReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./chat/reducers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">  <span class="attr">system</span>: systemReducer,</span><br><span class="line">  <span class="attr">chat</span>: chatReducer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2개이상의 리듀서를 합쳐서 내보낸다.</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">RootState</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> rootReducer&gt;;</span><br></pre></td></tr></table></figure><p>index 파일에서 위에 정의했던 리듀서를 합쳐서 내보내주게 됩니다.</p><p><a href="https://lunit.gitbook.io/redux-in-korean/recipes/structuringreducers/usingcombinereducers">combineReducers</a>를 사용하면 여러개의 리듀서를 한번에 호출할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/hooks/useUpdateSession.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SystemActionTypes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/system&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useUpdateSession</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useCallback</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> <span class="title function_">dispatch</span>(<span class="title class_">SystemActionTypes</span>(text)), [dispatch]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>useDispatch 함수는 액션을 전달합니다.<br>hooks 디렉토리에는 이러한 dispatch 동작들을 정해둡니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/**.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateSession = <span class="title function_">useUpdateSession</span>(&#123;<span class="attr">loggedIn</span>: <span class="literal">true</span>, <span class="attr">session</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">userName</span>: <span class="string">&#x27;&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>화면에서 사용할 때는, <code>use</code> 접두사를 사용한 hook 을 사용합니다.</p><p>디버깅으로 리덕스로 변경된 값을 확인하는 방법은 크롬 확장자 도구에 리덕스 개발자도구(<a href="https://react.vlpt.us/redux/06-redux-devtools.html">적용 방법</a>)를 설치하시면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add redux-devtools-extension</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(rootReducer, <span class="title function_">composeWithDevTools</span>());</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://ko.redux.js.org/recipes/usage-with-typescript/">https://ko.redux.js.org/recipes/usage-with-typescript/</a></li><li><a href="https://velog.io/@velopert/use-typescript-and-redux-like-a-pro">https://velog.io/@velopert/use-typescript-and-redux-like-a-pro</a></li><li><a href="https://react.vlpt.us/redux/06-redux-devtools.html">https://react.vlpt.us/redux/06-redux-devtools.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
    <item>
      <title>CSS 선택자</title>
      <link>https://jelee603.github.io/2021/11/12/css-selectors/</link>
      <guid>https://jelee603.github.io/2021/11/12/css-selectors/</guid>
      <pubDate>Fri, 12 Nov 2021 15:12:23 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS 선택자&lt;/a&gt;는 CSS 규칙을 적용할 요소를 정의합니다.&lt;/p&gt;
&lt;p&gt;타입 선택자 분류는 다음과 같이 쓴다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Selectors">CSS 선택자</a>는 CSS 규칙을 적용할 요소를 정의합니다.</p><p>타입 선택자 분류는 다음과 같이 쓴다.</p><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="comment">/* 공백 : 하위 선택자 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* &gt; : 자식 선택자 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* + : 형제 선택자 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="comment">/* 전체 선택자 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마지막 라인 없애는 방법, <code>last-child</code> 선택자를 이용하자.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>첫번째 스탸일 변경 방법 <a href="https://developer.mozilla.org/ko/docs/Web/CSS/:first-child"><code>first-child</code></a> 선택자를 이용하자.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;article&gt;</span><br><span class="line">  &lt;p&gt;First paragraph...&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Lorem ipsum...&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Dolor sit amet...&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Consectetur adipisicing...&lt;/p&gt;</span><br><span class="line">&lt;/article&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p:first-child &#123;</span><br><span class="line">  font-size: 1.5em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/HTML-CSS/">HTML/CSS</category>
      
      
      
    </item>
    
    <item>
      <title>HTML &lt;span&gt; 요소</title>
      <link>https://jelee603.github.io/2021/11/12/html-span/</link>
      <guid>https://jelee603.github.io/2021/11/12/html-span/</guid>
      <pubDate>Fri, 12 Nov 2021 15:08:11 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; 은 구문 컨텐츠를 위한 문장을 묶을 때 사용하는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/Inline_elements&quot;&gt;인라인 요소&lt;/a&gt;입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://developer.mozilla.org/ko/docs/Web/HTML/Element/span"><code>&lt;span&gt;</code></a> 은 구문 컨텐츠를 위한 문장을 묶을 때 사용하는 <a href="https://developer.mozilla.org/ko/docs/Web/HTML/Inline_elements">인라인 요소</a>입니다.</p><span id="more"></span>ㄴ<p>인라인은 전체 문단이 끊기지 않고 하나로 그려집니다. 문서의 흐름에서 줄바꿈을 강제하진 않는거죠.<br>반면에 블록 요소는 줄바꿈을 할 수 있습니다. 그럼에도 간단한 문장은 span 만 사용해서 개행을 하고 싶은 경우가 생기죠.</p><hr><h5 id="개행-문자-amp-공백-문자는-어떻게-처리할까"><a href="#개행-문자-amp-공백-문자는-어떻게-처리할까" class="headerlink" title="개행 문자 &amp; 공백 문자는 어떻게 처리할까?"></a>개행 문자 &amp; 공백 문자는 어떻게 처리할까?</h5><ol><li>span 요소 1개로만 처리할 때</li></ol><p>span 태그를 1개에 <a href="https://developer.mozilla.org/ko/docs/Web/CSS/white-space"><code>white-space</code></a> 속성을 이용한다.<br><a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%8A%A4%EC%BC%80%EC%9D%B4%ED%94%84_%EB%AC%B8%EC%9E%90">이스케이프 문자</a> 중 <code>\n</code>(개행문자)를 사용해서 줄바꿈이 가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">spanStyle</span> &#123;</span><br><span class="line">    white-<span class="attr">space</span>: <span class="string">&quot;pre-line&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;span <span class="keyword">class</span>=<span class="string">&quot;spanStyle&quot;</span>&gt;테스트\n입니다.&lt;/span&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>div 요소 안에 span 으로 처리할 때</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">spanStyle</span> &#123;</span><br><span class="line">    <span class="attr">display</span>: <span class="string">&quot;block&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span class=&quot;spanStyle&quot;&gt;테스트&lt;span&gt;</span><br><span class="line">    &lt;span class=&quot;spanStyle&quot;&gt;입니다&lt;span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/HTML-CSS/">HTML/CSS</category>
      
      
      
    </item>
    
    <item>
      <title>썸네일 이미지 생성</title>
      <link>https://jelee603.github.io/2021/11/10/create-thumbnail/</link>
      <guid>https://jelee603.github.io/2021/11/10/create-thumbnail/</guid>
      <pubDate>Wed, 10 Nov 2021 17:55:44 GMT</pubDate>
      
      <description>&lt;p&gt;블로그엔 썸네일(thumbnail) 이미지도 같이 추가해야하는데 매번 그림을 찾는것도 그 그림의 픽셀이 깨지는 것도 번거로워서 글자와 배경만 바뀌는 심플한 이미지로 대체해봤습니다.&lt;/p&gt;
&lt;p&gt;아래는 그 썸네일 이미지를 생성할 수 있는 페이지입니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>블로그엔 썸네일(thumbnail) 이미지도 같이 추가해야하는데 매번 그림을 찾는것도 그 그림의 픽셀이 깨지는 것도 번거로워서 글자와 배경만 바뀌는 심플한 이미지로 대체해봤습니다.</p><p>아래는 그 썸네일 이미지를 생성할 수 있는 페이지입니다.</p><span id="more"></span><p>텍스트를 입력하고, 색상을 선택하면 이미지를 다운 받을 수 있고, 색상값은 미리 대중화 된 걸로 설정해두었습니다.</p><iframe src="https://jelee603.github.io/code/create-thumbnail.html" style="width: 100vh; height: 30vh"></iframe><p>코드는 배경과 텍스트 정렬이 된, 캔버스를 그려두고 저장했을 때, <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL">toDataURL()</a> 이용해서 png 파일를 만들고, 임시로 <code>&lt;a link&gt;</code> 만들었다가 지우는 방법으로 다운로드 할 수 있게 만들었습니다.</p><p>컬러값 부분은 <a href="https://developer.mozilla.org/ko/docs/Learn/JavaScript/Building_blocks/Events#:~:text=%EB%8B%BF%EC%9D%84%20%EB%95%8C%EA%B9%8C%EC%A7%80%20%EA%B3%84%EC%86%8D%ED%95%A9%EB%8B%88%EB%8B%A4.-,%EB%B2%84%EB%B8%94%EB%A7%81,-%EB%8B%A8%EA%B3%84%EC%97%90%EC%84%9C%EB%8A%94%2C%20%EC%A0%95%ED%99%95%ED%9E%88%20%EB%B0%98%EB%8C%80%EC%9D%98">이벤트 버블링</a>이 되니 부모 div 에 클릭 이벤트를 걸어두고 버튼마다 <a href="https://developer.mozilla.org/ko/docs/Learn/HTML/Howto/Use_data_attributes">데이터 속성</a>값으로 버튼을 눌렸을 때, 색상이 바뀔 수 있도록 처리했습니다.</p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Lab/">Lab</category>
      
      
      
    </item>
    
    <item>
      <title>리액트에 타입스크립트 적용하기</title>
      <link>https://jelee603.github.io/2021/11/05/react-migration/</link>
      <guid>https://jelee603.github.io/2021/11/05/react-migration/</guid>
      <pubDate>Fri, 05 Nov 2021 00:22:39 GMT</pubDate>
      
      <description>&lt;p&gt;리액트에서 타입스크립트를 지원하고 있어, 간단하게 설치가 가능하지만 기존 프로젝트에 마이그레이션 방법으로 설치를 해보고자 한다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>리액트에서 타입스크립트를 지원하고 있어, 간단하게 설치가 가능하지만 기존 프로젝트에 마이그레이션 방법으로 설치를 해보고자 한다.</p><span id="more"></span><h3 id="React-TypeScript-적용-방법"><a href="#React-TypeScript-적용-방법" class="headerlink" title="React-TypeScript 적용 방법"></a><a href="https://reactjs.org/docs/static-type-checking.html#typescript">React-TypeScript</a> 적용 방법</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app --template typescript</span><br></pre></td></tr></table></figure><h3 id="기존-리액트-프로젝트에-타입스크립트로-마이그레이션-방법"><a href="#기존-리액트-프로젝트에-타입스크립트로-마이그레이션-방법" class="headerlink" title="기존 리액트 프로젝트에 타입스크립트로 마이그레이션 방법"></a>기존 리액트 프로젝트에 타입스크립트로 마이그레이션 방법</h3><p><a href="https://reactjs.org/docs/create-a-new-react-app.html">Create React App</a> 의 순서대로 설치한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>리액트를 설치하고 프로젝트에 <a href="https://reactjs.org/docs/static-type-checking.html#adding-typescript-to-a-project">타입스크립트를 추가</a>로 설치해준다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add --D typescript @typescript-eslint/parser</span><br><span class="line">yarn run tsc --init</span><br></pre></td></tr></table></figure><p>index.js 와 App.js 파일의 확장자는 _.tsx 로 변경해준다.<br>나머지 파일은 모두 _.ts 파일로 확장자를 변경해준다.</p><p>eslint 에서도 타입의 영향을 받지 않으려면, <a href="https://www.npmjs.com/package/@typescript-eslint/parser">@typescript-eslint/parser</a>를 추가해준다.<br>노드 버전이 v12.22.0 이상이 되어야 설치가 가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @typescript-eslint/parser</span><br></pre></td></tr></table></figure><p>프로젝트를 실행시 발생하는 버그:</p><blockquote><p>typescript svg 모듈 또는 해당 형식 선언을 찾을 수 없습니다</p><p>해결 방법:<br>커스텀 타입 파일을 생성해주고, tsconfig 파일에 include 에 해당 파일을 추가해준다. <a href="https://stackoverflow.com/questions/44717164/unable-to-import-svg-files-in-typescript">(stack-overflow)</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// custom-d.ts</span></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&quot;*.svg&quot;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> <span class="attr">content</span>: any;</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>@typescript-eslint/parser’ declared in ‘.eslintrc’: Cannot find module ‘typescript’</p><p>해결 방법:<br><a href="https://github.com/typescript-eslint/typescript-eslint/blob/master/docs/getting-started/linting/FAQ.md#typescript-should-be-installed-locally">typescript가 로컬에 설치</a>되어 있어야한다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add typescript</span><br></pre></td></tr></table></figure></blockquote>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Lab/">Lab</category>
      
      
      
    </item>
    
    <item>
      <title>React VAC Pattern</title>
      <link>https://jelee603.github.io/2021/11/01/react-vac/</link>
      <guid>https://jelee603.github.io/2021/11/01/react-vac/</guid>
      <pubDate>Mon, 01 Nov 2021 16:57:17 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;VAC-Pattern-이란&quot;&gt;&lt;a href=&quot;#VAC-Pattern-이란&quot; class=&quot;headerlink&quot; title=&quot;VAC Pattern 이란?&quot;&gt;&lt;/a&gt;VAC Pattern 이란?&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/coxcore/react-vac&quot;&gt;View Asset Component&lt;/a&gt; 라 하며, jsx 파일 내에서 state 와 render 부분을 별도로 구분해서 보다 쉽게 관리하기 위한 패턴방식이다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="VAC-Pattern-이란"><a href="#VAC-Pattern-이란" class="headerlink" title="VAC Pattern 이란?"></a>VAC Pattern 이란?</h4><p><a href="https://github.com/coxcore/react-vac">View Asset Component</a> 라 하며, jsx 파일 내에서 state 와 render 부분을 별도로 구분해서 보다 쉽게 관리하기 위한 패턴방식이다.</p><span id="more"></span><p>마크업, UI, 기능구현으로 이뤄지는 프론트개발에서 업무에 따라 프로젝트 충돌을 피하기 위해 사용한다.</p><p>디자인이 필요한 작업 관련 부분은 모두 props 로 넘겨주고, 비지니스 로직이 필요한 기능 구현 부분은 다른 컴포넌트에서 상태관리를 통해 처리해주는 방법이다.<br>역할 구분을 확실하게 해서 의존적이지 않아 상당히 편한 패턴이란 생각이 든다.</p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
    <item>
      <title>TypeScript 스터디</title>
      <link>https://jelee603.github.io/2021/11/01/typescript/</link>
      <guid>https://jelee603.github.io/2021/11/01/typescript/</guid>
      <pubDate>Mon, 01 Nov 2021 14:27:36 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://typescript-kr.github.io/&quot;&gt;타입스크립트 핸드북&lt;/a&gt;을 이용해서 문법과 타입스트립트에 대해 공부합니다. 예제를 확인해보고 싶다면, &lt;a href=&quot;https://www.typescriptlang.org/play&quot;&gt;TS Playground&lt;/a&gt;에서 확인을 해봅니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://typescript-kr.github.io/">타입스크립트 핸드북</a>을 이용해서 문법과 타입스트립트에 대해 공부합니다. 예제를 확인해보고 싶다면, <a href="https://www.typescriptlang.org/play">TS Playground</a>에서 확인을 해봅니다.</p><span id="more"></span><h2 id="타입-추론"><a href="#타입-추론" class="headerlink" title="타입 추론"></a>타입 추론</h2><p>타입을 명시적으로 정의하기 위한 구문으로 <code>interface</code> 를 우선적으로 사용하고 특정 기능이 필요할 때 <code>type</code>을 사용합니다.</p><h2 id="타입-구성"><a href="#타입-구성" class="headerlink" title="타입 구성"></a>타입 구성</h2><p>여러가지 타입을 이용해서 새 타입을 작성하기 위한 방법으로 유니언과 제네릭이 있습니다.</p><p>유니언은 여러 타입 중 하나라고 선언하는 것입니다. (‘|’ 을 사용)<br>제네릭은 타입에 변수를 제공하는 방법입니다. 제네릭이 있는 배열은 배열 안의 값을 설명할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">ObjectWithArray</span> = <span class="title class_">Array</span>&lt;&#123; <span class="attr">name</span>: string &#125;&gt;;</span><br></pre></td></tr></table></figure><h2 id="구조적-타입-시스템"><a href="#구조적-타입-시스템" class="headerlink" title="구조적 타입 시스템"></a>구조적 타입 시스템</h2><p>두 객체가 같은 형태를 가지면 같은 것으로 간주하는 것을 말합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: number;</span><br><span class="line">  <span class="attr">y</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printPoint</span>(<span class="params">p: Point</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`points <span class="subst">$&#123;p.x&#125;</span>, <span class="subst">$&#123;p.y&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> point3 = &#123; <span class="attr">x</span>: <span class="number">12</span>, <span class="attr">y</span>: <span class="number">25</span>, <span class="attr">z</span>: <span class="number">88</span> &#125;;</span><br><span class="line"><span class="title function_">printPoint</span>(point3); <span class="comment">// points 12, 25</span></span><br></pre></td></tr></table></figure><h2 id="타입-단언-Type-assertions"><a href="#타입-단언-Type-assertions" class="headerlink" title="타입 단언 (Type assertions)"></a>타입 단언 (Type assertions)</h2><p>어떤 엔티티의 실제 타입이 현재 타입보다 더 구체적일 때 사용합니다. 타입 단언은 컴파일러에게 “날 믿어, 난 내가 뭘 하고 있는지 알아”라고 말해주는 방법입니다. 이는 형 변환과 유사하지만, 다른 특별한 검사를 하거나 데이터를 재구성 하지는 않습니다. jsx 에서는 <code>as</code>-스타일의 단언만 허용합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: any = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: number = (someValue <span class="keyword">as</span> string).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strLength);</span><br></pre></td></tr></table></figure><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><p>타입스크립트의 핵심 원칙은 타입 검사가 <code>값의 형태</code>에 초점을 맞추고 있다는 것입니다. 이를 덕 타이핑이라 하는데 인터페이스는 이런 타입들의 이름을 짓는 역할을 합니다.</p><p>옵셔널 프로퍼티는 프로퍼티 이름 끝에 <code>?</code>를 붙여 표시합니다. 인터페이스에 속하지 않은 프로퍼티를 선택적으로 사용하도록 해줍니다.</p><p>읽기 전용 프로퍼티는 프로퍼티 이름 앞에 <code>readonly</code>를 넣어서 지정합니다.</p><h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><p><code>기본-초기화 매개변수</code> 기본값을 함수에 지정해 둘 수 있습니다.<br>나머지 매개변수로 인자들을 모을 수도 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName = <span class="string">&#x27;Lee&#x27;</span>, ...restOfName: string[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;restName.join(<span class="string">&#x27; &#x27;</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> leeName = <span class="title function_">buildName</span>(<span class="literal">undefined</span>, <span class="string">&#x27;Jieun&#x27;</span>, <span class="string">&#x27;Joseph&#x27;</span>, <span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(leeName); <span class="comment">// Lee Jieun Joseph Jerry</span></span><br></pre></td></tr></table></figure><h2 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h2><p>타입스크립트 3.8 이후 비공개 필드를 만들기 위해 자바스크립트의 <code>#</code> 문법을 사용할 수 있습니다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://typescript-kr.github.io/">https://typescript-kr.github.io</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
    <item>
      <title>Vanilla JS 다뤄보기</title>
      <link>https://jelee603.github.io/2021/10/30/vanilla/</link>
      <guid>https://jelee603.github.io/2021/10/30/vanilla/</guid>
      <pubDate>Sat, 30 Oct 2021 23:20:00 GMT</pubDate>
      
      <description>&lt;p&gt;일반적으로 프레임워크를 사용하지 않고 자바스크립트를 다루는 방법은 있습니다.&lt;br&gt;너무 프레임워크에 익숙해져 그 방법을 잊어버리지 않게 적습니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>일반적으로 프레임워크를 사용하지 않고 자바스크립트를 다루는 방법은 있습니다.<br>너무 프레임워크에 익숙해져 그 방법을 잊어버리지 않게 적습니다.</p><span id="more"></span><p>먼저 html 파일에서 js를 로드를 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;[file].js&quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span></span><br></pre></td></tr></table></figure><p>css 스크립트는 <head> 태그 사이에 작성합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>간단하게 HTML에서 자바스크립트를 사용하게 되었습니다.</p><p>그런데 모듈화라는 개념이 생기면서,<br><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> 를 통해 스크립트 모듈 파일을 가져오게 되었습니다.</p><p><code>export</code>로 파일을 내보냈을 경우에 html 에서는 위와 같은 방법으로는 오류를 만나게 됩니다.</p><blockquote><p><span style="color: red">Uncaught SyntaxError: Cannot use import statement outside a module</span></p><p>해결 방법:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;[file].js&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></blockquote><p><code>script type</code> 을 모듈이라 명시해주면서 문제를 해결할 수 있습니다.<br>이렇게 간단한 방법도 매번 프레임워크의 렌더함수만 작성하다보면 잊어버리게 됩니다.</p><p>다음은 만들어진 여러개의 모듈파일을 한번에 압축해주는 방법인 웹팩으로 HTML 파일에서 로드하는 방법을 적어봅니다.</p><p><a href="https://webpack.js.org/guides/getting-started">웹팩</a>을 설치하고, 프로젝트 구조를 다음과 같이 추가해서 세팅해줍니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><h5 id="project-구조"><a href="#project-구조" class="headerlink" title="project 구조"></a>project 구조</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpack-demo</span><br><span class="line"> |- /dist</span><br><span class="line">+   |- index.<span class="property">html</span></span><br><span class="line">- |- index.<span class="property">html</span></span><br><span class="line">+ |- /src</span><br><span class="line">+    |- index.<span class="property">js</span></span><br><span class="line">+ |- webpack.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line"> |- package.<span class="property">json</span></span><br></pre></td></tr></table></figure><p>웹팩 설정 파일에서 entry 와 output 을 설정하면, entry 에 설정된 파일을 로드해서 output 의 번들파일을 생성해줍니다. <code>index.js</code> 모듈 파일을 호출하도록 해줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> file <span class="keyword">from</span> <span class="string">&#x27;[file].js&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>패키지 설정파일에 웹팩을 실행할 스크립트를 작성해줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode development&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>npm run build</code> 실행하면, ‘dist’ 경로에 ‘main.js’ 라는 파일이 생성됩니다.<br>HTML 파일에서 생성된 파일을 로드하도록 추가해주면 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dist/index.html</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Lab/">Lab</category>
      
      
      
    </item>
    
    <item>
      <title>Yarn</title>
      <link>https://jelee603.github.io/2021/10/17/yarn/</link>
      <guid>https://jelee603.github.io/2021/10/17/yarn/</guid>
      <pubDate>Sun, 17 Oct 2021 15:31:01 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;전역에-설치된-모듈을-확인하는-방법&quot;&gt;&lt;a href=&quot;#전역에-설치된-모듈을-확인하는-방법&quot; class=&quot;headerlink&quot; title=&quot;전역에 설치된 모듈을 확인하는 방법:&quot;&gt;&lt;/a&gt;전역에 설치된 모듈을 확인하는 방법:&lt;/h4&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="전역에-설치된-모듈을-확인하는-방법"><a href="#전역에-설치된-모듈을-확인하는-방법" class="headerlink" title="전역에 설치된 모듈을 확인하는 방법:"></a>전역에 설치된 모듈을 확인하는 방법:</h4><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global list</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Tip/">Tip</category>
      
      
      
    </item>
    
    <item>
      <title>Port</title>
      <link>https://jelee603.github.io/2021/10/10/port/</link>
      <guid>https://jelee603.github.io/2021/10/10/port/</guid>
      <pubDate>Sun, 10 Oct 2021 23:31:07 GMT</pubDate>
      
      <description>&lt;h4 id=&quot;점유중인-Port-종료하는-방법&quot;&gt;&lt;a href=&quot;#점유중인-Port-종료하는-방법&quot; class=&quot;headerlink&quot; title=&quot;점유중인 Port 종료하는 방법:&quot;&gt;&lt;/a&gt;점유중인 Port 종료하는 방법:&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for Mac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ lsof -i :&amp;#123;&lt;span class=&quot;variable constant_&quot;&gt;PORT&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ kill -&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &amp;#123;&lt;span class=&quot;variable constant_&quot;&gt;PID&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;점유하고 있는 포트번호의 PID(Porcess ID) 를 찾아서 kill 로직을 써준다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h4 id="점유중인-Port-종료하는-방법"><a href="#점유중인-Port-종료하는-방법" class="headerlink" title="점유중인 Port 종료하는 방법:"></a>점유중인 Port 종료하는 방법:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for Mac</span></span><br><span class="line">$ lsof -i :&#123;<span class="variable constant_">PORT</span>&#125;</span><br><span class="line"></span><br><span class="line">$ kill -<span class="number">9</span> &#123;<span class="variable constant_">PID</span>&#125;</span><br></pre></td></tr></table></figure><p>점유하고 있는 포트번호의 PID(Porcess ID) 를 찾아서 kill 로직을 써준다.</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :<span class="number">19000</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">COMMAND</span>  <span class="variable constant_">PID</span>  <span class="variable constant_">USER</span>   <span class="variable constant_">FD</span>   <span class="variable constant_">TYPE</span>             <span class="variable constant_">DEVICE</span> <span class="variable constant_">SIZE</span>/<span class="variable constant_">OFF</span> <span class="variable constant_">NODE</span> <span class="variable constant_">NAME</span></span><br><span class="line">node    <span class="number">6284</span> jieun   39u  <span class="title class_">IPv6</span> <span class="number">0x18419eaeae92a123</span>      0t0  <span class="variable constant_">TCP</span> *:igrid (<span class="variable constant_">LISTEN</span>)</span><br><span class="line"></span><br><span class="line">kill -<span class="number">9</span> <span class="number">6284</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/Option/">Option</category>
      
      
      
    </item>
    
    <item>
      <title>React 조건부 렌더링</title>
      <link>https://jelee603.github.io/2021/10/03/react-condition/</link>
      <guid>https://jelee603.github.io/2021/10/03/react-condition/</guid>
      <pubDate>Sun, 03 Oct 2021 18:38:26 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;a href=&quot;https://ko.reactjs.org/docs/conditional-rendering.html&quot;&gt;조건부 렌더링&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><a href="https://ko.reactjs.org/docs/conditional-rendering.html">조건부 렌더링</a></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  const isLoggedIn = this.state.isLoggedIn;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;isLoggedIn ? (</span><br><span class="line">        &lt;LogoutButton onClick=&#123;this.handleLogoutClick&#125; /&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;LoginButton onClick=&#123;this.handleLoginClick&#125; /&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>참고: <a href="https://reactjs-kr.firebaseapp.com/docs/conditional-rendering.html">https://reactjs-kr.firebaseapp.com/docs/conditional-rendering.html</a></p><p>jsx 에서는 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map">map</a> 메서드를 사용합니다. 배열의 모든 요소를 순회하면서 결과값으로 새로운 배열을 반환할 수 있는 함수입니다.</p><p>반복문</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const todoItems = todos.map((todo, index) =&gt;</span><br><span class="line">  // Only do this if items have no stable IDs</span><br><span class="line">  &lt;li key=&#123;index&#125;&gt;</span><br><span class="line">    &#123;todo.text&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>참고:<br><a href="https://ko.reactjs.org/docs/lists-and-keys.html">https://ko.reactjs.org/docs/lists-and-keys.html</a></p><h4 id="append-dynamic-component"><a href="#append-dynamic-component" class="headerlink" title="append dynamic component"></a>append dynamic component</h4><p><a href="https://stackoverflow.com/questions/51404335/append-a-react-component-in-another-on-button-click">https://stackoverflow.com/questions/51404335/append-a-react-component-in-another-on-button-click</a></p>]]></content:encoded>
      
      
      <category domain="https://jelee603.github.io/categories/JavaScript/">JavaScript</category>
      
      
      
    </item>
    
  </channel>
</rss>
