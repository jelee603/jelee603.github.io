{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/3.5.0/jquery.min.js","path":"libs/jquery/3.5.0/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"source/images/thumnail/study.png","path":"images/thumnail/study.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"8a2c0dc6c1d1e8a6bb1b15ff5111a5f6ffe5d1da","modified":1632456937096},{"_id":"source/images/.DS_Store","hash":"9523ffe2357b889a9dbabafec62707186ea5fe6e","modified":1632456937103},{"_id":"source/_posts/.DS_Store","hash":"7a5e325d1dc0277e3adfc4061a3834ef87fa0a81","modified":1632456937096},{"_id":"source/_posts/blob.md","hash":"18081b726680f3b48a8614f9e2538d4e18a13b0c","modified":1632461490950},{"_id":"source/_posts/array.md","hash":"08763a2dad1c778ea2ecbbda21644cd83bd97173","modified":1632461557184},{"_id":"source/_posts/canvas.md","hash":"e5ba08791022840c8a27685a77f05cc3651fb7f8","modified":1632461383802},{"_id":"source/_posts/browser.md","hash":"772fc3fcbd9f58394a54465489f4504a3edea603","modified":1632461553050},{"_id":"source/_posts/css.md","hash":"a65d99a9bede6f54362c61b3886edeebf04152fb","modified":1632461663990},{"_id":"source/_posts/d3.md","hash":"fc0c460c1ac5ecdfe45a2dc4f37b1c084f14c2e1","modified":1632461496752},{"_id":"source/_posts/debugging.md","hash":"cd351205b660a1427f165db31ac4bee7839c9391","modified":1632461519497},{"_id":"source/_posts/design-pattern.md","hash":"a6cef01a3acf257ed7f9e30fe0db14f87aad3a90","modified":1632461514069},{"_id":"source/_posts/event.md","hash":"d17675c008435c37f61b51b982de5b2a158e10b6","modified":1632461534596},{"_id":"source/_posts/git.md","hash":"735028a205a9248ace9cf1e6d59f261b064303f5","modified":1632461541457},{"_id":"source/_posts/good-image.md","hash":"c153407ae5bbada166ccd2c9367ddfe2b05ad76d","modified":1632461414478},{"_id":"source/_posts/graphql.md","hash":"35a8c48408617ad4d0abc6caf512c5bb6ce24a13","modified":1632461484455},{"_id":"source/_posts/install-jekyll.md","hash":"6df5790d8b4ce3bddd60e1082a52e9702ac0527e","modified":1632461463800},{"_id":"source/_posts/javascript.md","hash":"6c91845fe4ce4ba3c8cc997fcd1dce55b51cffba","modified":1632461432794},{"_id":"source/_posts/npm.md","hash":"9fdacdbda0d122ae590f7397d36d69f5a796cea8","modified":1632461755625},{"_id":"source/_posts/max.md","hash":"e8cfe1fce8e0c467b88188d3259348a8df399f15","modified":1632461507488},{"_id":"source/_posts/object.md","hash":"55cd2e929a46f13a37cac88761b5ea12243e524d","modified":1632461547126},{"_id":"source/_posts/promise.md","hash":"0a16cd811f62e48e785e8c49b0b6d2bc9a1ca889","modified":1632461524689},{"_id":"source/_posts/scss.md","hash":"da848d3042180998d9884b42a9f16672812796cf","modified":1632461438292},{"_id":"source/_posts/settings.md","hash":"9a909441fcb1f3f3359deca6af6460ac06586e6b","modified":1632461502528},{"_id":"source/_posts/shortcut2.md","hash":"6fa73e867c5c637aa5db501051dcbeec92eff514","modified":1632461444028},{"_id":"source/_posts/storage.md","hash":"8b0349cadf8a58211320d3165a8205cf1cab49d5","modified":1632461450174},{"_id":"source/_posts/test-util.md","hash":"7a0e388bc21a774a21c59a3ca422013a9f431aa8","modified":1632461475891},{"_id":"source/_posts/vuejs.md","hash":"89484bdf2950840f1d3b011aa602cfca1536a480","modified":1632461747227},{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1632456937108},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1632456937109},{"_id":"themes/hueman/README.md","hash":"096d3c5c90b77bb69e5ea5230c60b9fe8c04746b","modified":1632456937109},{"_id":"themes/hueman/_config.yml.example","hash":"32dc691a594ac54b196807aa770534d2d69cfb84","modified":1632456937109},{"_id":"themes/hueman/package.json","hash":"1dda3c209f51d6d6a3b4f112f787915d3add726a","modified":1632456937130},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"1ce6c6330e2e37fcf4764d69ed2c43670e30eb23","modified":1632456937108},{"_id":"themes/hueman/languages/en.yml","hash":"26a3d8c89a257a4e8b84e3b5214d0f184cb8ad79","modified":1632456937110},{"_id":"themes/hueman/languages/ca.yml","hash":"deb751cd834e928a218cd4dff25f9b8a4f1597f4","modified":1632456937110},{"_id":"themes/hueman/languages/es.yml","hash":"8bfab5d3e889fe2959ee469263c19951aab08fad","modified":1632456937110},{"_id":"themes/hueman/languages/fr.yml","hash":"8ab415076d01d069c24c9bc60e448ef258834dec","modified":1632456937110},{"_id":"themes/hueman/languages/hu.yml","hash":"b612b0d3329aa205e5903576018194e44d5f8d22","modified":1632456937110},{"_id":"themes/hueman/languages/id.yml","hash":"36fa092fe362ffffe1db67afb35d2bab1f04e2f0","modified":1632456937111},{"_id":"themes/hueman/languages/ja.yml","hash":"3695f6c76b48195881419e69fbeb8c25bd985119","modified":1632456937111},{"_id":"themes/hueman/languages/ko.yml","hash":"09703bf440a4de3f7aec02357bc46079b7d99b77","modified":1632456937111},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"2b65116ff36781cc130138ee8cb209095e5ba5df","modified":1632456937111},{"_id":"themes/hueman/languages/ru.yml","hash":"2878b42646ddea60ce1236f68f4b907c436cf26e","modified":1632456937112},{"_id":"themes/hueman/languages/tr.yml","hash":"c6bd8d946213d0a1dd05c033669513d1ab67a66e","modified":1632456937112},{"_id":"themes/hueman/languages/vi.yml","hash":"c2d23b1034e1e51355f97224ad7bda8066d597a2","modified":1632456937112},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"38c119ff77bb4eaa22403dde4f1303920260e9a3","modified":1632456937112},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"343d3589f6c8449319c872c03e028a92682fce35","modified":1632456937112},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1632456937113},{"_id":"themes/hueman/layout/author.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1632456937113},{"_id":"themes/hueman/layout/authors.ejs","hash":"8946d0d1a70ac470b3ee56dd36b4f9da2b73ed76","modified":1632456937113},{"_id":"themes/hueman/layout/categories.ejs","hash":"8946d0d1a70ac470b3ee56dd36b4f9da2b73ed76","modified":1632456937113},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1632456937113},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1632456937122},{"_id":"themes/hueman/layout/layout.ejs","hash":"2c8cdd3a857a4b35e89b354931909186eaa91853","modified":1632456937122},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1632456937123},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1632456937124},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1632456937127},{"_id":"themes/hueman/layout/tags.ejs","hash":"8946d0d1a70ac470b3ee56dd36b4f9da2b73ed76","modified":1632456937127},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1632456937130},{"_id":"themes/hueman/scripts/md5.js","hash":"7712232a328daf1797a3dd313bfce124f7df67ff","modified":1632456937130},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1632456937130},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1632456937130},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"e4d32fa38c969db0d0f66463bc67a3020ed979f7","modified":1632456937117},{"_id":"themes/hueman/layout/common/article.ejs","hash":"3aec000ae8c5ea1d1c729214fe5c35c1c620cd0c","modified":1632456937117},{"_id":"themes/hueman/layout/common/authors.ejs","hash":"dc9adbd9fa759c80614feaa499433de1b76f8d83","modified":1632456937117},{"_id":"themes/hueman/layout/common/categories.ejs","hash":"b408e91026ebbb324b7e4f517242f22903e3992b","modified":1632456937117},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"4e1a92448207b8e3d1695df855f6be7c70576248","modified":1632456937118},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"d62dc97ec079d8ef5d0af401b56dceec1ffb64f7","modified":1632456937118},{"_id":"themes/hueman/layout/common/head.ejs","hash":"20d27432498ec723a685b989917d9b2d2c3f8b92","modified":1632456937118},{"_id":"themes/hueman/layout/common/header.ejs","hash":"ee7b3d8e28114c9acdd28a37bf57559dbc452307","modified":1632456937118},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1632456937121},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"f582cd96ce6fa3b0340a1642695fec1632391e25","modified":1632456937121},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"42d6f99906ae96a6d00ee9a727405e47ec5e7c81","modified":1632456937121},{"_id":"themes/hueman/layout/common/tags.ejs","hash":"20769fc8213091770e5b5dac16e4528f9104e244","modified":1632456937122},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1632456937122},{"_id":"themes/hueman/layout/comment/changyan.ejs","hash":"4dbfefe8c9ed9b824a6bc4952d2a0a72e9166b61","modified":1632456937114},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"237fe2f89c128fe4f7c1edb9187f504f42cb5e74","modified":1632456937114},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"936ded56d044e5f0a2f4c5d773d41965b2bea145","modified":1632456937114},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1632456937114},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"8881b9945904d247768a6482cc9c2e4010642d5e","modified":1632456937115},{"_id":"themes/hueman/layout/comment/gitalk.ejs","hash":"915124de9806cf92bbe1af1b77e6580d0eaa8ac3","modified":1632456937115},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"058f7dc27f700d083841e3d7a251e57ccbc4706e","modified":1632456937115},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"c196dbd522a3969d75ce5e61bc7ce7cec52d462f","modified":1632456937115},{"_id":"themes/hueman/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1632456937116},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"48212bc99b046a67a1027024efecda8c79eb7fa9","modified":1632456937116},{"_id":"themes/hueman/layout/comment/valine.ejs","hash":"00502e24843fab3cad0d99d2ac66144685fd39ce","modified":1632456937116},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"ef6c37f535d4897679823143ce37c25d556cd729","modified":1632456937116},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1632456937126},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"5fd8c82a40d957e9481540a0b7d3ffca874e14a7","modified":1632456937126},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1632456937126},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1632456937127},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"b80332a1e0c8d230fabcf5e696edae349925ae17","modified":1632456937127},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1632456937128},{"_id":"themes/hueman/layout/widget/catalog.ejs","hash":"b95f91c7b3b26236ea675482b173b29fecf3e7f4","modified":1632456937128},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1632456937128},{"_id":"themes/hueman/layout/widget/google_adsense.ejs","hash":"c83ea7f18b970c48c90994cb96be2f659f7744fa","modified":1632456937128},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1632456937128},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1632456937129},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1632456937129},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1632456937129},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1632456937129},{"_id":"themes/hueman/source/css/_extend.styl","hash":"c2160499dc89c524ff17cd2e3fcbb8df83ebca1a","modified":1632456937131},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1632456937150},{"_id":"themes/hueman/source/css/_variables.styl","hash":"c077e2412dd38c40e68ecc763c0b8c5e3254808a","modified":1632456937150},{"_id":"themes/hueman/source/css/style.styl","hash":"b76d43839bda01ee791e71093f009ad2c8b093b2","modified":1632456937152},{"_id":"themes/hueman/layout/pwa/index.ejs","hash":"6db63250679a4fdf8113d57f302a50d848a408cf","modified":1632456937125},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1632456937125},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1632456937125},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1632456937126},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1632456937126},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1632456937123},{"_id":"themes/hueman/layout/plugin/cookie-consent.ejs","hash":"6baf0d836b2c1ddc757b047f014c08fbbf008ee8","modified":1632456937123},{"_id":"themes/hueman/layout/plugin/google-adsense.ejs","hash":"8b3870371d6554777b3323389cdeb8a287467ed3","modified":1632456937124},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"9ae10a0ff00a5bfe2bb6ad2ce2f882ae9074ad2b","modified":1632456937124},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"7d011d257cabf47c8faacbb1ca98381db4ace71c","modified":1632456937124},{"_id":"themes/hueman/layout/plugin/statcounter.ejs","hash":"7773a7ef15dbaf4ead2485eb7e5c394d20789438","modified":1632456937124},{"_id":"themes/hueman/layout/plugin/twitter-conversion.ejs","hash":"b9bc79727c9790b868e52ce2bd80536a04407a7e","modified":1632456937124},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1632456937152},{"_id":"themes/hueman/source/js/main.js","hash":"2ef5449478816096cdd0e9dde4d1fc1c2f33ab87","modified":1632456937152},{"_id":"themes/hueman/layout/common/post/counter.ejs","hash":"708566f1fb93062201e51fc1ce2a251078985437","modified":1632456937119},{"_id":"themes/hueman/layout/common/post/author.ejs","hash":"d27178a76c95949f537def3d16ae42ef68437b2b","modified":1632456937119},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1632456937119},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"62600215be93098d88f3ef949cc9d5264167810c","modified":1632456937119},{"_id":"themes/hueman/layout/common/post/ld_json.ejs","hash":"b33214e00cf9972382ff0c2c93c0fc9e411f921f","modified":1632456937120},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1632456937120},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1632456937120},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1632456937120},{"_id":"themes/hueman/layout/common/post/valinecounter.ejs","hash":"9d7bb963286520690dc4e0a2ffae44560f013a1e","modified":1632456937121},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1632456937148},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1632456937148},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"5f93edada8ba08100e1fee6a9f6f5cf4a35b6c7f","modified":1632456937148},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1632456937149},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"219f881c937735869ac4a1af1259e0d234aea9f3","modified":1632456937149},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1632456937149},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1632456937149},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1632456937150},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"b17e0f5cedf4eecd35126b5cb4de567b64123377","modified":1632456937150},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1632456937151},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1632456937151},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1632456937151},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1632456937151},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1632456937152},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1632456937131},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1632456937131},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1632456937132},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1632456937132},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1632456937132},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1632456937132},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1632456937133},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1632456937133},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1632456937133},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1632456937133},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1632456937133},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1632456937134},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1632456937134},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1632456937134},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1632456937135},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1632456937134},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1632456937135},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1632456937135},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1632456937135},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1632456937136},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1632456937136},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1632456937137},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1632456937136},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1632456937136},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1632456937137},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1632456937137},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1632456937137},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1632456937138},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1632456937138},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1632456937138},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1632456937139},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1632456937139},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1632456937139},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1632456937140},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1632456937140},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1632456937140},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1632456937141},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1632456937140},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1632456937141},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1632456937141},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1632456937141},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1632456937142},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1632456937142},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1632456937142},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1632456937142},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1632456937142},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1632456937143},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1632456937143},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1632456937143},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1632456937143},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1632456937144},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1632456937144},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1632456937144},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1632456937144},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1632456937145},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1632456937145},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1632456937145},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1632456937145},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1632456937145},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1632456937146},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1632456937146},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1632456937146},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1632456937146},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1632456937146},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1632456937146},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1632456937147},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1632456937147},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1632456937147},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1632456937147},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1632456937148},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1632456937162},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1632456937162},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1632456937173},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1632456937175},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1632456937153},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1632456937154},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1632456937163},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1632456937163},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1632456937163},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1632456937164},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1632456937164},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1632456937164},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1632456937165},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1632456937165},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1632456937165},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1632456937166},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1632456937166},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1632456937166},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1632456937166},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1632456937167},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1632456937167},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1632456937167},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1632456937167},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1632456937168},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1632456937168},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1632456937168},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1632456937168},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1632456937168},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1632456937169},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1632456937169},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1632456937169},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1632456937169},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1632456937169},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1632456937170},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1632456937170},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1632456937171},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1632456937170},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1632456937171},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1632456937171},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1632456937172},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1632456937172},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1632456937173},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1632456937173},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1632456937173},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1632456937174},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1632456937174},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1632456937174},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1632456937174},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1632456937174},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1632456937155},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1632456937155},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1632456937160},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1632456937160},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1632456937159},{"_id":"themes/hueman/source/libs/jquery/3.5.0/jquery.min.js","hash":"206ed314e32bca5b801434367d742c898572aea6","modified":1632456937162},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1632456937158},{"_id":"source/images/thumnail/study.png","hash":"2fa24ed59ba7488e995f21224e71d8e3f10b04b1","modified":1632456937107},{"_id":"public/content.json","hash":"2ca8f2693be791f759e416477550a16e99b91924","modified":1632461763438},{"_id":"public/2021/09/13/good-image/index.html","hash":"ee6861d93c43d8ed483051d981033d84bd59776b","modified":1632461763438},{"_id":"public/2020/02/04/javascript/index.html","hash":"fa3d9afdefed7057ebb2b731730c26a131df0017","modified":1632461763438},{"_id":"public/2020/01/22/scss/index.html","hash":"09f3db79b29dd3c2bbc96db93efcc013f843b663","modified":1632461763438},{"_id":"public/2020/01/09/shortcut2/index.html","hash":"401c4bda1182e512c91ee909b13f0d40144f82c6","modified":1632461763438},{"_id":"public/2019/11/01/storage/index.html","hash":"b5e7921e67296f9fb99fbc0576d01d99370c2ae5","modified":1632461763438},{"_id":"public/2019/10/17/test-util/index.html","hash":"ab8981697cdd605d7eacee4d81bda6e2fab94649","modified":1632461763438},{"_id":"public/2019/10/16/graphql/index.html","hash":"cb7f69fa901856b16ee05cdad6262d1ad934641f","modified":1632461763438},{"_id":"public/2019/10/10/blob/index.html","hash":"be1945d5a9fd63cbf593d314b7b23def4dda8cc1","modified":1632461763438},{"_id":"public/2019/10/01/d3/index.html","hash":"67740236e92e39de927a340a77b590f103a2a1e9","modified":1632461763438},{"_id":"public/2019/09/26/settings/index.html","hash":"de56627b241f4ad9388d92f0c8465d8f68af0481","modified":1632461763438},{"_id":"public/2019/09/18/max/index.html","hash":"d3fa6c6e253b63743aa20b14dc1a5012669fe3e9","modified":1632461763438},{"_id":"public/2019/09/11/design-pattern/index.html","hash":"b3d1a5a4168e0a5ea82d5eae166e7826236f638f","modified":1632461763438},{"_id":"public/2019/09/10/debugging/index.html","hash":"46726d83e00ef6f1155e6a704e2d41ff81c40321","modified":1632461763438},{"_id":"public/2019/08/28/promise/index.html","hash":"461ab39a243891c1e0a9fe2960e3c84bd6927c2f","modified":1632461763438},{"_id":"public/2019/08/22/event/index.html","hash":"f75dfdf93ca55e7dfa6e0a197837094958f0a000","modified":1632461763438},{"_id":"public/2019/08/21/object/index.html","hash":"b547fdd8f54932340a29b12ee332628c9f4c9cca","modified":1632461763438},{"_id":"public/2019/08/19/browser/index.html","hash":"cf4bba770936063efe4c24064e869e315fa9b856","modified":1632461763438},{"_id":"public/2019/08/18/array/index.html","hash":"1f11de5cf0ed8c9479c495dfce9c548106e62844","modified":1632461763438},{"_id":"public/2019/08/16/css/index.html","hash":"162faa13ca54722dd1ac28ebf4800d96f6eb151a","modified":1632461763438},{"_id":"public/2019/08/14/vuejs/index.html","hash":"7ac2e510544cd3ec3f0d31c739b885835c329eb3","modified":1632461763438},{"_id":"public/2019/08/09/npm/index.html","hash":"1fbc1a418eb92f5344bf70721aa254ef0ad4ed41","modified":1632461763438},{"_id":"public/2019/08/08/git/index.html","hash":"325b430ac835b23fbc146e3c6b2f9b898dce0e20","modified":1632461763438},{"_id":"public/2019/08/07/install-jekyll/index.html","hash":"60fe419eb73d96291ff27467248adbb6b52d39c0","modified":1632461763438},{"_id":"public/2019/06/10/canvas/index.html","hash":"69e75d51a10505076edf729291033644bdb4349f","modified":1632461763438},{"_id":"public/archives/index.html","hash":"d2c78dbcfa8400ffc031cd5fc526fdd817c97d4c","modified":1632461763438},{"_id":"public/archives/page/2/index.html","hash":"439e054fe030e93467138ec022946da6fb5b9efd","modified":1632461763438},{"_id":"public/archives/page/3/index.html","hash":"d8c94d97f6d224b68e991731f9da8525d4b46b45","modified":1632461763438},{"_id":"public/archives/2019/index.html","hash":"3ce26f16a2ae651e5dddaf4171019901379b5b91","modified":1632461763438},{"_id":"public/archives/2019/page/2/index.html","hash":"a3fd6fe87eee8ea270ca9d2d8d85d7f2edd45928","modified":1632461763438},{"_id":"public/archives/2019/06/index.html","hash":"b4149c6872e8012825deb3cd4f69d2635a1de7fe","modified":1632461763438},{"_id":"public/archives/2019/08/index.html","hash":"2a09efdc713152d158831d79733824d7a383f04f","modified":1632461763438},{"_id":"public/archives/2019/09/index.html","hash":"8bb070adcaf2e1a228dea82cffc091c1af0da0e9","modified":1632461763438},{"_id":"public/archives/2019/10/index.html","hash":"14f71160910cf67917cd237389627f5bc29973a1","modified":1632461763438},{"_id":"public/archives/2019/11/index.html","hash":"28eb78b73d09d2a8320657d20b35c60ceb1148f4","modified":1632461763438},{"_id":"public/archives/2020/index.html","hash":"bc06a33d11fe798caeef38fe902115e1b7e8d092","modified":1632461763438},{"_id":"public/archives/2020/01/index.html","hash":"e4bd60366b35acc1a39926dfd9fefe0dae64772f","modified":1632461763438},{"_id":"public/archives/2020/02/index.html","hash":"954aa6a2d8d881dc13d0280118007f69a52c658f","modified":1632461763438},{"_id":"public/archives/2021/index.html","hash":"7a3cd24586afdd40d3a00e41b89a835ef7fbc62d","modified":1632461763438},{"_id":"public/archives/2021/09/index.html","hash":"add67b93a5e76af74a1ba5679ce0b8cd0d570950","modified":1632461763438},{"_id":"public/categories/javascript/index.html","hash":"8fa39cfc9f3e3bd241ce9e4904b84c1f4b607aae","modified":1632461763438},{"_id":"public/categories/javascript/page/2/index.html","hash":"19ef360202af99ada40197cf2669ebb78d95710f","modified":1632461763438},{"_id":"public/categories/http/index.html","hash":"6b0d00fcd872d3731c16b4144be90c0c8853c79a","modified":1632461763438},{"_id":"public/categories/css/index.html","hash":"e9d6ee7aa59ede29b046f399048d05906404dd93","modified":1632461763438},{"_id":"public/categories/setting/index.html","hash":"0a43e061b373d46dba1f426730e0cfd14d36ccf4","modified":1632461763438},{"_id":"public/index.html","hash":"2e6c79b372fc210c10b7f46d8444257353430cf2","modified":1632461763438},{"_id":"public/page/2/index.html","hash":"2ed31d71a2037158950c51b7c2cd6acc1d216dbd","modified":1632461763438},{"_id":"public/page/3/index.html","hash":"aa9f2e57b06ca7516c09cdc3d4080cdbf13b16c7","modified":1632461763438},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1632461763438},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1632461763438},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1632461763438},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1632461763438},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1632461763438},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1632461763438},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1632461763438},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1632461763438},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1632461763438},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1632461763438},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1632461763438},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1632461763438},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1632461763438},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1632461763438},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1632461763438},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1632461763438},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1632461763438},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1632461763438},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1632461763438},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1632461763438},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1632461763438},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1632461763438},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1632461763438},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1632461763438},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1632461763438},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1632461763438},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1632461763438},{"_id":"public/js/main.js","hash":"2ef5449478816096cdd0e9dde4d1fc1c2f33ab87","modified":1632461763438},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1632461763438},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1632461763438},{"_id":"public/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1632461763438},{"_id":"public/css/style.css","hash":"302025d712bf4fd3ee7b52d9a411166460b75f29","modified":1632461763438},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1632461763438},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1632461763438},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1632461763438},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1632461763438},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1632461763438},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1632461763438},{"_id":"public/libs/jquery/3.5.0/jquery.min.js","hash":"206ed314e32bca5b801434367d742c898572aea6","modified":1632461763438},{"_id":"public/images/thumnail/study.png","hash":"2fa24ed59ba7488e995f21224e71d8e3f10b04b1","modified":1632461763438},{"_id":"source/About/index.md","hash":"1164ebeb0b3ee795feb6d3a54f8f1a165c071206","modified":1632461969812},{"_id":"source/about/index.md","hash":"1164ebeb0b3ee795feb6d3a54f8f1a165c071206","modified":1632461969812}],"Category":[{"name":"javascript","_id":"cktxxl2hz0002vb8z4udw3wyv"},{"name":"http","_id":"cktxxl2i7000evb8z66s68c3g"},{"name":"css","_id":"cktxxl2i9000jvb8zhxqre01u"},{"name":"setting","_id":"cktxxl2ia000ovb8zerwp5408"}],"Data":[],"Page":[{"title":"About","date":"2021-09-24T05:39:08.000Z","_content":"\n테스트\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-09-24 14:39:08\n---\n\n테스트\n","updated":"2021-09-24T05:39:29.812Z","path":"about/index.html","_id":"cktxxrnfq00009r8z5z3nbbp6","comments":1,"layout":"page","content":"<p>테스트</p>\n","site":{"data":{}},"excerpt":"","more":"<p>테스트</p>\n"}],"Post":[{"layout":"post","title":"Load Image File","date":"2019-10-09T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### 서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 Web 에서는 어떻게 보여줄까?\n\nbase64 데이터가 있으면, 이 데이터를 blob:URL 을 만들어 src 속성에 URL 입력해서 이미지를 보여주면 된다.\n\n그런데 이렇게 되면 URL이 엄청 크게 되어 이 사이즈를 줄이는 방법이 필요하게 된다.\n[iCaan][icaan]님과 [codeday][codeday]님의 블로그를 보면 상당히 정리가 잘 되어 있는데.. base64 데이터를 인코딩해서 데이터를 출력해야한다.\n\n```js\n<img src=\"data:image/jpeg;base64, base64_encode\">\n```\n\n[icaan]: http://blog.naver.com/PostView.nhn?blogId=loverman85&logNo=221114631019&categoryNo=11&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search\n[codeday]: https://codeday.me/ko/qa/20190306/7131.html\n","source":"_posts/blob.md","raw":"---\nlayout: post\ntitle: 'Load Image File'\ndate: 2019-10-10\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### 서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 Web 에서는 어떻게 보여줄까?\n\nbase64 데이터가 있으면, 이 데이터를 blob:URL 을 만들어 src 속성에 URL 입력해서 이미지를 보여주면 된다.\n\n그런데 이렇게 되면 URL이 엄청 크게 되어 이 사이즈를 줄이는 방법이 필요하게 된다.\n[iCaan][icaan]님과 [codeday][codeday]님의 블로그를 보면 상당히 정리가 잘 되어 있는데.. base64 데이터를 인코딩해서 데이터를 출력해야한다.\n\n```js\n<img src=\"data:image/jpeg;base64, base64_encode\">\n```\n\n[icaan]: http://blog.naver.com/PostView.nhn?blogId=loverman85&logNo=221114631019&categoryNo=11&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search\n[codeday]: https://codeday.me/ko/qa/20190306/7131.html\n","slug":"blob","published":1,"updated":"2021-09-24T05:31:30.950Z","photos":[],"link":"","_id":"cktxxl2hu0000vb8zf7qv5ye3","content":"<h4 id=\"서버에서-온-base64-로-인코딩되어-온-이미지-파일을-그대로-보내줄-경우-Web-에서는-어떻게-보여줄까\"><a href=\"#서버에서-온-base64-로-인코딩되어-온-이미지-파일을-그대로-보내줄-경우-Web-에서는-어떻게-보여줄까\" class=\"headerlink\" title=\"서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 Web 에서는 어떻게 보여줄까?\"></a>서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 Web 에서는 어떻게 보여줄까?</h4><p>base64 데이터가 있으면, 이 데이터를 blob:URL 을 만들어 src 속성에 URL 입력해서 이미지를 보여주면 된다.</p>\n<p>그런데 이렇게 되면 URL이 엄청 크게 되어 이 사이즈를 줄이는 방법이 필요하게 된다.<br><a href=\"http://blog.naver.com/PostView.nhn?blogId=loverman85&logNo=221114631019&categoryNo=11&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search\">iCaan</a>님과 <a href=\"https://codeday.me/ko/qa/20190306/7131.html\">codeday</a>님의 블로그를 보면 상당히 정리가 잘 되어 있는데.. base64 데이터를 인코딩해서 데이터를 출력해야한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;data:image/jpeg;base64, base64_encode&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"서버에서-온-base64-로-인코딩되어-온-이미지-파일을-그대로-보내줄-경우-Web-에서는-어떻게-보여줄까\"><a href=\"#서버에서-온-base64-로-인코딩되어-온-이미지-파일을-그대로-보내줄-경우-Web-에서는-어떻게-보여줄까\" class=\"headerlink\" title=\"서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 Web 에서는 어떻게 보여줄까?\"></a>서버에서 온 base64 로 인코딩되어 온 이미지 파일을 그대로 보내줄 경우 Web 에서는 어떻게 보여줄까?</h4><p>base64 데이터가 있으면, 이 데이터를 blob:URL 을 만들어 src 속성에 URL 입력해서 이미지를 보여주면 된다.</p>\n<p>그런데 이렇게 되면 URL이 엄청 크게 되어 이 사이즈를 줄이는 방법이 필요하게 된다.<br><a href=\"http://blog.naver.com/PostView.nhn?blogId=loverman85&logNo=221114631019&categoryNo=11&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=search\">iCaan</a>님과 <a href=\"https://codeday.me/ko/qa/20190306/7131.html\">codeday</a>님의 블로그를 보면 상당히 정리가 잘 되어 있는데.. base64 데이터를 인코딩해서 데이터를 출력해야한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=<span class=\"string\">&quot;data:image/jpeg;base64, base64_encode&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"Javascript Array 이야기","date":"2019-08-17T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\n#### Split, Join 의 사용법\n\narray 를 string으로 string 을 array 로 바꾸는 연습은 너무나 중요하지만.. 헷갈림의 연속이다.\narray 를 string 으로 바꾸는 방법으로 콤마를 split 으로 분리해서 띄어쓰기를 주면 된다.\n\n```js\nconst arr = ['first', 'second', 'third'];\n\narr.toString().split(',').join(' '); // first second third\n```\n\n#### Splice 사용법\n\n가장 많이 사용한 건 splice(start, deleteCount) 이다.이 삭제 방법은 배열의 길이도 줄어들기 때문에 편리하긴 하지만..\n반복문으로 인덱스를 찾아서 삭제해줄려고 할때면, 배열의 길이가 변경되어 다음 인덱스를 찾는 어려움이 있었다.\n이럴 땐, 삭제한 갯수만큼 인덱스에서 빼서 삭제해준다.\n\n```js\nlet count = 0;\n\narr.forEach((v) => {\n  const start = v - count;\n\n  arr.splice(start, 1);\n  count++;\n});\n```\n\n#### Set 사용법\n\niterator 를 활용하는 방법 중 반복되는 값의 중복을 제거하는 방법으로 유용한 방법이 있다.\nSet 을 사용하면 중복되는 값들 중 맨 앞의 값만 남기고 나머지는 무시가된다.\n\n```js\nconst foo = [1, 2, 3, 5, 1, 1, 2, 3, 5]\n\nconsole.log(new Set(foo)) // {1, 2, 3, 5}\n\n// 중복 제거 방법 (remove duplication)\n[...new Set([...array1 ,...array2])];\n```\n","source":"_posts/array.md","raw":"---\nlayout: post\ntitle: 'Javascript Array 이야기'\ndate: 2019-08-18\ncategories: javascript\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\n#### Split, Join 의 사용법\n\narray 를 string으로 string 을 array 로 바꾸는 연습은 너무나 중요하지만.. 헷갈림의 연속이다.\narray 를 string 으로 바꾸는 방법으로 콤마를 split 으로 분리해서 띄어쓰기를 주면 된다.\n\n```js\nconst arr = ['first', 'second', 'third'];\n\narr.toString().split(',').join(' '); // first second third\n```\n\n#### Splice 사용법\n\n가장 많이 사용한 건 splice(start, deleteCount) 이다.이 삭제 방법은 배열의 길이도 줄어들기 때문에 편리하긴 하지만..\n반복문으로 인덱스를 찾아서 삭제해줄려고 할때면, 배열의 길이가 변경되어 다음 인덱스를 찾는 어려움이 있었다.\n이럴 땐, 삭제한 갯수만큼 인덱스에서 빼서 삭제해준다.\n\n```js\nlet count = 0;\n\narr.forEach((v) => {\n  const start = v - count;\n\n  arr.splice(start, 1);\n  count++;\n});\n```\n\n#### Set 사용법\n\niterator 를 활용하는 방법 중 반복되는 값의 중복을 제거하는 방법으로 유용한 방법이 있다.\nSet 을 사용하면 중복되는 값들 중 맨 앞의 값만 남기고 나머지는 무시가된다.\n\n```js\nconst foo = [1, 2, 3, 5, 1, 1, 2, 3, 5]\n\nconsole.log(new Set(foo)) // {1, 2, 3, 5}\n\n// 중복 제거 방법 (remove duplication)\n[...new Set([...array1 ,...array2])];\n```\n","slug":"array","published":1,"updated":"2021-09-24T05:32:37.184Z","photos":[],"link":"","_id":"cktxxl2hy0001vb8zda9cb3hy","content":"<h4 id=\"Split-Join-의-사용법\"><a href=\"#Split-Join-의-사용법\" class=\"headerlink\" title=\"Split, Join 의 사용법\"></a>Split, Join 의 사용법</h4><p>array 를 string으로 string 을 array 로 바꾸는 연습은 너무나 중요하지만.. 헷갈림의 연속이다.<br>array 를 string 으로 바꾸는 방법으로 콤마를 split 으로 분리해서 띄어쓰기를 주면 된다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;second&#x27;</span>, <span class=\"string\">&#x27;third&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.toString().split(<span class=\"string\">&#x27;,&#x27;</span>).join(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">// first second third</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Splice-사용법\"><a href=\"#Splice-사용법\" class=\"headerlink\" title=\"Splice 사용법\"></a>Splice 사용법</h4><p>가장 많이 사용한 건 splice(start, deleteCount) 이다.이 삭제 방법은 배열의 길이도 줄어들기 때문에 편리하긴 하지만..<br>반복문으로 인덱스를 찾아서 삭제해줄려고 할때면, 배열의 길이가 변경되어 다음 인덱스를 찾는 어려움이 있었다.<br>이럴 땐, 삭제한 갯수만큼 인덱스에서 빼서 삭제해준다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = v - count;</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.splice(start, <span class=\"number\">1</span>);</span><br><span class=\"line\">  count++;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Set-사용법\"><a href=\"#Set-사용법\" class=\"headerlink\" title=\"Set 사용법\"></a>Set 사용법</h4><p>iterator 를 활용하는 방법 중 반복되는 값의 중복을 제거하는 방법으로 유용한 방법이 있다.<br>Set 을 사용하면 중복되는 값들 중 맨 앞의 값만 남기고 나머지는 무시가된다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(foo)) <span class=\"comment\">// &#123;1, 2, 3, 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 중복 제거 방법 (remove duplication)</span></span><br><span class=\"line\">[...new <span class=\"built_in\">Set</span>([...array1 ,...array2])];</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Split-Join-의-사용법\"><a href=\"#Split-Join-의-사용법\" class=\"headerlink\" title=\"Split, Join 의 사용법\"></a>Split, Join 의 사용법</h4><p>array 를 string으로 string 을 array 로 바꾸는 연습은 너무나 중요하지만.. 헷갈림의 연속이다.<br>array 를 string 으로 바꾸는 방법으로 콤마를 split 으로 분리해서 띄어쓰기를 주면 된다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;second&#x27;</span>, <span class=\"string\">&#x27;third&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.toString().split(<span class=\"string\">&#x27;,&#x27;</span>).join(<span class=\"string\">&#x27; &#x27;</span>); <span class=\"comment\">// first second third</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Splice-사용법\"><a href=\"#Splice-사용법\" class=\"headerlink\" title=\"Splice 사용법\"></a>Splice 사용법</h4><p>가장 많이 사용한 건 splice(start, deleteCount) 이다.이 삭제 방법은 배열의 길이도 줄어들기 때문에 편리하긴 하지만..<br>반복문으로 인덱스를 찾아서 삭제해줄려고 할때면, 배열의 길이가 변경되어 다음 인덱스를 찾는 어려움이 있었다.<br>이럴 땐, 삭제한 갯수만큼 인덱스에서 빼서 삭제해준다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = v - count;</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.splice(start, <span class=\"number\">1</span>);</span><br><span class=\"line\">  count++;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Set-사용법\"><a href=\"#Set-사용법\" class=\"headerlink\" title=\"Set 사용법\"></a>Set 사용법</h4><p>iterator 를 활용하는 방법 중 반복되는 값의 중복을 제거하는 방법으로 유용한 방법이 있다.<br>Set 을 사용하면 중복되는 값들 중 맨 앞의 값만 남기고 나머지는 무시가된다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(foo)) <span class=\"comment\">// &#123;1, 2, 3, 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 중복 제거 방법 (remove duplication)</span></span><br><span class=\"line\">[...new <span class=\"built_in\">Set</span>([...array1 ,...array2])];</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Canvas로 그래프 그리기","date":"2019-06-09T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\nGrid 내부에 그래프를 그려야하는데 캔버스와 SVG, DIV 방법이 있을 수 있는데 어느 것을 골라야할지 망설여졌다.\n분명 성능 이슈가 있겠지? 그래서 성능면에서 어떤 차이가 있는지부터 먼저 찾아보기로 했다.\n\n---\n\n#### SVG 와 Canvas의 장단점\n\n**SVG**\n\n- 복잡하지 않게 사용자 인터렉션이 가능합니다. (클릭, 마우스오버 이벤트 포함)\n- 모든 엘리먼트는 DOM에 부착되어 자바스크립트와 CSS 통해 변형이 가능하며 텍스트를 지원한다.\n- DOM 방식보다는 시간이 오래걸립니다.\n- 성능은 화면이 크거나, 픽셀 수가 적을 경우(<10k) 에 좋습니다.\n- 고품질 문서 작업이나 정적 이미지의 조작 작업 등에 어울립니다.\n- 스크립트와 CSS를 통해서도 수정할 수 있음\n\n**Canvas**\n\n- 단순한 그래픽 API로 픽셀 이상을 나타내기 어렵습니다.\n- 화면상 다른 동작을 할때도 전혀 부담이 없습니다.\n- 빠른 응답속도와 메모리 과부하가 가장 적습니다.\n- 성능은 화면이 작거나, 픽셀 수가 많을 경우(>10k) 에 좋습니다.\n- 고성능의 애니메니션 작업이나 동영상 조작 등의 작업에 어울립니다.\n- 스크립트를 통해서만 수정할 수 있음\n\n캔버스는 그래픽이 잘 동작하고 성능이 저하되지 않도록 엘리먼트 사용을 최적화할 수 있는 방법이다.\n\n---\n\n#### 성능 비교\n\n1px dom 25만개를 그렸을때 걸리는 시간에 대한 [idchoi2][idchoi2-blog]\n님의 글을 읽어보고 나니.. 렌더링 시간이 확연히 차이가 있었다.\n\n|          | 렌더링 시간          | 메모리 사용량 |\n| -------- | -------------------- | ------------- |\n| HTML DOM | 4356.28ms (3~4초)    | 796.3M        |\n| SVG      | 7799.06ms (6~7초)    | 1.7G          |\n| Canvas   | 430.71ms (0.3~0.4초) | 217.6M        |\n\n---\n\n#### 결론\n\n그래서 렌더링 속도가 빠른 캔버스로 그려봤다.\n\n```js\nconst draw = (curr) => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const tot = 1000;\n  const percent = Math.floor((curr / tot) * 100);\n  const height = 25;\n\n  if (this.width === null) {\n    this.width = document.querySelectorAll('th')[2].clientWidth;\n  }\n  const width = this.width * (percent / 100);\n\n  canvas.width = width + 50;\n  canvas.height = height;\n  ctx.fillStyle = 'green';\n  ctx.font = '10px Aria';\n  ctx.fillRect(0, 0, width, height);\n  ctx.fillStyle = 'white';\n\n  // 퍼센트값\n  ctx.fillText(`${percent}%`, 8, height - 10);\n  ctx.textAlign = 'right';\n\n  // 실제값\n  ctx.fillText(curr, width + 30, height - 10);\n  ctx.textAlign = 'left';\n\n  return canvas;\n};\n```\n\n**결과**\n![canvas](/img/post-2019-06-10-1.png){:width=\"100%\" height=\"50%\"}\n\n[idchoi2-blog]: https://medium.com/@idchoi2/javascript-%EB%8F%84%ED%98%95-%EA%B7%B8%EB%A6%AC%EA%B8%B0-html-vs-svg-vs-canvas-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90-9e1ce2396fcd\n","source":"_posts/canvas.md","raw":"---\nlayout: post\ntitle: 'Canvas로 그래프 그리기'\ndate: 2019-06-10\ncategories: javascript\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\nGrid 내부에 그래프를 그려야하는데 캔버스와 SVG, DIV 방법이 있을 수 있는데 어느 것을 골라야할지 망설여졌다.\n분명 성능 이슈가 있겠지? 그래서 성능면에서 어떤 차이가 있는지부터 먼저 찾아보기로 했다.\n\n---\n\n#### SVG 와 Canvas의 장단점\n\n**SVG**\n\n- 복잡하지 않게 사용자 인터렉션이 가능합니다. (클릭, 마우스오버 이벤트 포함)\n- 모든 엘리먼트는 DOM에 부착되어 자바스크립트와 CSS 통해 변형이 가능하며 텍스트를 지원한다.\n- DOM 방식보다는 시간이 오래걸립니다.\n- 성능은 화면이 크거나, 픽셀 수가 적을 경우(<10k) 에 좋습니다.\n- 고품질 문서 작업이나 정적 이미지의 조작 작업 등에 어울립니다.\n- 스크립트와 CSS를 통해서도 수정할 수 있음\n\n**Canvas**\n\n- 단순한 그래픽 API로 픽셀 이상을 나타내기 어렵습니다.\n- 화면상 다른 동작을 할때도 전혀 부담이 없습니다.\n- 빠른 응답속도와 메모리 과부하가 가장 적습니다.\n- 성능은 화면이 작거나, 픽셀 수가 많을 경우(>10k) 에 좋습니다.\n- 고성능의 애니메니션 작업이나 동영상 조작 등의 작업에 어울립니다.\n- 스크립트를 통해서만 수정할 수 있음\n\n캔버스는 그래픽이 잘 동작하고 성능이 저하되지 않도록 엘리먼트 사용을 최적화할 수 있는 방법이다.\n\n---\n\n#### 성능 비교\n\n1px dom 25만개를 그렸을때 걸리는 시간에 대한 [idchoi2][idchoi2-blog]\n님의 글을 읽어보고 나니.. 렌더링 시간이 확연히 차이가 있었다.\n\n|          | 렌더링 시간          | 메모리 사용량 |\n| -------- | -------------------- | ------------- |\n| HTML DOM | 4356.28ms (3~4초)    | 796.3M        |\n| SVG      | 7799.06ms (6~7초)    | 1.7G          |\n| Canvas   | 430.71ms (0.3~0.4초) | 217.6M        |\n\n---\n\n#### 결론\n\n그래서 렌더링 속도가 빠른 캔버스로 그려봤다.\n\n```js\nconst draw = (curr) => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const tot = 1000;\n  const percent = Math.floor((curr / tot) * 100);\n  const height = 25;\n\n  if (this.width === null) {\n    this.width = document.querySelectorAll('th')[2].clientWidth;\n  }\n  const width = this.width * (percent / 100);\n\n  canvas.width = width + 50;\n  canvas.height = height;\n  ctx.fillStyle = 'green';\n  ctx.font = '10px Aria';\n  ctx.fillRect(0, 0, width, height);\n  ctx.fillStyle = 'white';\n\n  // 퍼센트값\n  ctx.fillText(`${percent}%`, 8, height - 10);\n  ctx.textAlign = 'right';\n\n  // 실제값\n  ctx.fillText(curr, width + 30, height - 10);\n  ctx.textAlign = 'left';\n\n  return canvas;\n};\n```\n\n**결과**\n![canvas](/img/post-2019-06-10-1.png){:width=\"100%\" height=\"50%\"}\n\n[idchoi2-blog]: https://medium.com/@idchoi2/javascript-%EB%8F%84%ED%98%95-%EA%B7%B8%EB%A6%AC%EA%B8%B0-html-vs-svg-vs-canvas-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90-9e1ce2396fcd\n","slug":"canvas","published":1,"updated":"2021-09-24T05:29:43.802Z","photos":[],"link":"","_id":"cktxxl2i00003vb8zdko4f70i","content":"<p>Grid 내부에 그래프를 그려야하는데 캔버스와 SVG, DIV 방법이 있을 수 있는데 어느 것을 골라야할지 망설여졌다.<br>분명 성능 이슈가 있겠지? 그래서 성능면에서 어떤 차이가 있는지부터 먼저 찾아보기로 했다.</p>\n<hr>\n<h4 id=\"SVG-와-Canvas의-장단점\"><a href=\"#SVG-와-Canvas의-장단점\" class=\"headerlink\" title=\"SVG 와 Canvas의 장단점\"></a>SVG 와 Canvas의 장단점</h4><p><strong>SVG</strong></p>\n<ul>\n<li>복잡하지 않게 사용자 인터렉션이 가능합니다. (클릭, 마우스오버 이벤트 포함)</li>\n<li>모든 엘리먼트는 DOM에 부착되어 자바스크립트와 CSS 통해 변형이 가능하며 텍스트를 지원한다.</li>\n<li>DOM 방식보다는 시간이 오래걸립니다.</li>\n<li>성능은 화면이 크거나, 픽셀 수가 적을 경우(&lt;10k) 에 좋습니다.</li>\n<li>고품질 문서 작업이나 정적 이미지의 조작 작업 등에 어울립니다.</li>\n<li>스크립트와 CSS를 통해서도 수정할 수 있음</li>\n</ul>\n<p><strong>Canvas</strong></p>\n<ul>\n<li>단순한 그래픽 API로 픽셀 이상을 나타내기 어렵습니다.</li>\n<li>화면상 다른 동작을 할때도 전혀 부담이 없습니다.</li>\n<li>빠른 응답속도와 메모리 과부하가 가장 적습니다.</li>\n<li>성능은 화면이 작거나, 픽셀 수가 많을 경우(&gt;10k) 에 좋습니다.</li>\n<li>고성능의 애니메니션 작업이나 동영상 조작 등의 작업에 어울립니다.</li>\n<li>스크립트를 통해서만 수정할 수 있음</li>\n</ul>\n<p>캔버스는 그래픽이 잘 동작하고 성능이 저하되지 않도록 엘리먼트 사용을 최적화할 수 있는 방법이다.</p>\n<hr>\n<h4 id=\"성능-비교\"><a href=\"#성능-비교\" class=\"headerlink\" title=\"성능 비교\"></a>성능 비교</h4><p>1px dom 25만개를 그렸을때 걸리는 시간에 대한 <a href=\"https://medium.com/@idchoi2/javascript-%EB%8F%84%ED%98%95-%EA%B7%B8%EB%A6%AC%EA%B8%B0-html-vs-svg-vs-canvas-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90-9e1ce2396fcd\">idchoi2</a><br>님의 글을 읽어보고 나니.. 렌더링 시간이 확연히 차이가 있었다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>렌더링 시간</th>\n<th>메모리 사용량</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HTML DOM</td>\n<td>4356.28ms (3~4초)</td>\n<td>796.3M</td>\n</tr>\n<tr>\n<td>SVG</td>\n<td>7799.06ms (6~7초)</td>\n<td>1.7G</td>\n</tr>\n<tr>\n<td>Canvas</td>\n<td>430.71ms (0.3~0.4초)</td>\n<td>217.6M</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h4><p>그래서 렌더링 속도가 빠른 캔버스로 그려봤다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> draw = <span class=\"function\">(<span class=\"params\">curr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tot = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> percent = <span class=\"built_in\">Math</span>.floor((curr / tot) * <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> height = <span class=\"number\">25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.width === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.width = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;th&#x27;</span>)[<span class=\"number\">2</span>].clientWidth;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> width = <span class=\"built_in\">this</span>.width * (percent / <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  canvas.width = width + <span class=\"number\">50</span>;</span><br><span class=\"line\">  canvas.height = height;</span><br><span class=\"line\">  ctx.fillStyle = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">  ctx.font = <span class=\"string\">&#x27;10px Aria&#x27;</span>;</span><br><span class=\"line\">  ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">  ctx.fillStyle = <span class=\"string\">&#x27;white&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 퍼센트값</span></span><br><span class=\"line\">  ctx.fillText(<span class=\"string\">`<span class=\"subst\">$&#123;percent&#125;</span>%`</span>, <span class=\"number\">8</span>, height - <span class=\"number\">10</span>);</span><br><span class=\"line\">  ctx.textAlign = <span class=\"string\">&#x27;right&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 실제값</span></span><br><span class=\"line\">  ctx.fillText(curr, width + <span class=\"number\">30</span>, height - <span class=\"number\">10</span>);</span><br><span class=\"line\">  ctx.textAlign = <span class=\"string\">&#x27;left&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> canvas;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>결과</strong><br><img src=\"/img/post-2019-06-10-1.png\" alt=\"canvas\">{:width=”100%” height=”50%”}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Grid 내부에 그래프를 그려야하는데 캔버스와 SVG, DIV 방법이 있을 수 있는데 어느 것을 골라야할지 망설여졌다.<br>분명 성능 이슈가 있겠지? 그래서 성능면에서 어떤 차이가 있는지부터 먼저 찾아보기로 했다.</p>\n<hr>\n<h4 id=\"SVG-와-Canvas의-장단점\"><a href=\"#SVG-와-Canvas의-장단점\" class=\"headerlink\" title=\"SVG 와 Canvas의 장단점\"></a>SVG 와 Canvas의 장단점</h4><p><strong>SVG</strong></p>\n<ul>\n<li>복잡하지 않게 사용자 인터렉션이 가능합니다. (클릭, 마우스오버 이벤트 포함)</li>\n<li>모든 엘리먼트는 DOM에 부착되어 자바스크립트와 CSS 통해 변형이 가능하며 텍스트를 지원한다.</li>\n<li>DOM 방식보다는 시간이 오래걸립니다.</li>\n<li>성능은 화면이 크거나, 픽셀 수가 적을 경우(&lt;10k) 에 좋습니다.</li>\n<li>고품질 문서 작업이나 정적 이미지의 조작 작업 등에 어울립니다.</li>\n<li>스크립트와 CSS를 통해서도 수정할 수 있음</li>\n</ul>\n<p><strong>Canvas</strong></p>\n<ul>\n<li>단순한 그래픽 API로 픽셀 이상을 나타내기 어렵습니다.</li>\n<li>화면상 다른 동작을 할때도 전혀 부담이 없습니다.</li>\n<li>빠른 응답속도와 메모리 과부하가 가장 적습니다.</li>\n<li>성능은 화면이 작거나, 픽셀 수가 많을 경우(&gt;10k) 에 좋습니다.</li>\n<li>고성능의 애니메니션 작업이나 동영상 조작 등의 작업에 어울립니다.</li>\n<li>스크립트를 통해서만 수정할 수 있음</li>\n</ul>\n<p>캔버스는 그래픽이 잘 동작하고 성능이 저하되지 않도록 엘리먼트 사용을 최적화할 수 있는 방법이다.</p>\n<hr>\n<h4 id=\"성능-비교\"><a href=\"#성능-비교\" class=\"headerlink\" title=\"성능 비교\"></a>성능 비교</h4><p>1px dom 25만개를 그렸을때 걸리는 시간에 대한 <a href=\"https://medium.com/@idchoi2/javascript-%EB%8F%84%ED%98%95-%EA%B7%B8%EB%A6%AC%EA%B8%B0-html-vs-svg-vs-canvas-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90-9e1ce2396fcd\">idchoi2</a><br>님의 글을 읽어보고 나니.. 렌더링 시간이 확연히 차이가 있었다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>렌더링 시간</th>\n<th>메모리 사용량</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HTML DOM</td>\n<td>4356.28ms (3~4초)</td>\n<td>796.3M</td>\n</tr>\n<tr>\n<td>SVG</td>\n<td>7799.06ms (6~7초)</td>\n<td>1.7G</td>\n</tr>\n<tr>\n<td>Canvas</td>\n<td>430.71ms (0.3~0.4초)</td>\n<td>217.6M</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"결론\"><a href=\"#결론\" class=\"headerlink\" title=\"결론\"></a>결론</h4><p>그래서 렌더링 속도가 빠른 캔버스로 그려봤다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> draw = <span class=\"function\">(<span class=\"params\">curr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tot = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> percent = <span class=\"built_in\">Math</span>.floor((curr / tot) * <span class=\"number\">100</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> height = <span class=\"number\">25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.width === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.width = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;th&#x27;</span>)[<span class=\"number\">2</span>].clientWidth;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> width = <span class=\"built_in\">this</span>.width * (percent / <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  canvas.width = width + <span class=\"number\">50</span>;</span><br><span class=\"line\">  canvas.height = height;</span><br><span class=\"line\">  ctx.fillStyle = <span class=\"string\">&#x27;green&#x27;</span>;</span><br><span class=\"line\">  ctx.font = <span class=\"string\">&#x27;10px Aria&#x27;</span>;</span><br><span class=\"line\">  ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">  ctx.fillStyle = <span class=\"string\">&#x27;white&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 퍼센트값</span></span><br><span class=\"line\">  ctx.fillText(<span class=\"string\">`<span class=\"subst\">$&#123;percent&#125;</span>%`</span>, <span class=\"number\">8</span>, height - <span class=\"number\">10</span>);</span><br><span class=\"line\">  ctx.textAlign = <span class=\"string\">&#x27;right&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 실제값</span></span><br><span class=\"line\">  ctx.fillText(curr, width + <span class=\"number\">30</span>, height - <span class=\"number\">10</span>);</span><br><span class=\"line\">  ctx.textAlign = <span class=\"string\">&#x27;left&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> canvas;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>결과</strong><br><img src=\"/img/post-2019-06-10-1.png\" alt=\"canvas\">{:width=”100%” height=”50%”}</p>\n"},{"layout":"post","title":"Browser 이야기","date":"2019-08-18T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\n#### CORS 란?\n\n`Cross Origin Resource Sharing` 의 줄임말로, 다른 도메인의 리소스를 요청할 수 있는 방법을 말한다.  \nXMLHttpRequest 는 보안상의 이유로 동일한 도메인에서만 HTTP 요청을 보내도록 제한하고 있다.\n\nGET, POST 방식 중 Request 간단하게 요청하고 응답할 수 있다.\n`Access-Control-Allow-Origin: *` 모든 도메인으로 부터 접근이 가능하도록 허용하게 된다.\n\n#### 브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?\n\n`HTTP (Hypertext Transfer Protocol)` 의 줄임말로, 인터넷상에서 데이터를 주고 받을 수 있는 프로토콜이다.\n[Andrew park][andrew park]님의 블로그에 잘 정리가 되어서 발췌한다.\n\n브라우저는 오디오/비디오/이미지/텍스트 등 HTTP 통신을 통해서 문서를 가져와 화면에 출력을 해준다.\n\n이때 TCP/IP 4계층 -> 3계층 -> 2계층 -> 1계층 네트워크에 접근해서 데이터를 전달한다.  \n4계층 - Application : 정보를 만들어 전달\n3계층 - Transport : 통신 노드를 연결\n2계층 - Internet : 통신 노드간 패킷 전송과 라우팅\n1계층 - Network Interface : 전기적 신호로 변환\n\n받는 쪽에서는 반대로 해석한다.\n\n모든 컴퓨터와 서버는 네트워크를 통해 외부에서 접근하려면 IP 주소가 필요한데 사용자는 브라우저에 URL을 입력하게 된다.  \n이때 DNS 서버로 접근해서 해당 도메인 네임에 맞는 IP 를 받아온다.\n\n\\*\\* 패킷 : 서버에서 클라이언트로 전송되는 데이터의 포맷\n\n#### 브라우저는 어떻게 데이터를 받아올까?\n\n브라우저는 웹 사이트 문서를 받아오기 위해 클라이언트에서 Request 요청을 만들어 서버에 전달한다.\n서버는 Request 를 해석하고 요청에 해당하는 Response 를 전달한다.\n\nHTTP 프로토콜의 데이터 형식은 HEADER 와 BODY 로 구성되어 있습니다.\n\nHTTP/1.1부터는 Keep-alive 를 지원하게 되면서 문서가 다운로드가 완료되어도 클라이언트의 연결을 끊지 않고\n일정 시간동안 연결을 유지하며 재연결 과정없이 데이터를 유지하게 된다.\n\n[andrew park]: https://medium.com/@pks2974/website%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%97%AC%EC%A7%80%EA%B2%8C%EB%90%98%EB%8A%94-%EA%B1%B8%EA%B9%8C-1-108009d4bdb\n","source":"_posts/browser.md","raw":"---\nlayout: post\ntitle: 'Browser 이야기'\ndate: 2019-08-19\ncategories: http\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\n#### CORS 란?\n\n`Cross Origin Resource Sharing` 의 줄임말로, 다른 도메인의 리소스를 요청할 수 있는 방법을 말한다.  \nXMLHttpRequest 는 보안상의 이유로 동일한 도메인에서만 HTTP 요청을 보내도록 제한하고 있다.\n\nGET, POST 방식 중 Request 간단하게 요청하고 응답할 수 있다.\n`Access-Control-Allow-Origin: *` 모든 도메인으로 부터 접근이 가능하도록 허용하게 된다.\n\n#### 브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?\n\n`HTTP (Hypertext Transfer Protocol)` 의 줄임말로, 인터넷상에서 데이터를 주고 받을 수 있는 프로토콜이다.\n[Andrew park][andrew park]님의 블로그에 잘 정리가 되어서 발췌한다.\n\n브라우저는 오디오/비디오/이미지/텍스트 등 HTTP 통신을 통해서 문서를 가져와 화면에 출력을 해준다.\n\n이때 TCP/IP 4계층 -> 3계층 -> 2계층 -> 1계층 네트워크에 접근해서 데이터를 전달한다.  \n4계층 - Application : 정보를 만들어 전달\n3계층 - Transport : 통신 노드를 연결\n2계층 - Internet : 통신 노드간 패킷 전송과 라우팅\n1계층 - Network Interface : 전기적 신호로 변환\n\n받는 쪽에서는 반대로 해석한다.\n\n모든 컴퓨터와 서버는 네트워크를 통해 외부에서 접근하려면 IP 주소가 필요한데 사용자는 브라우저에 URL을 입력하게 된다.  \n이때 DNS 서버로 접근해서 해당 도메인 네임에 맞는 IP 를 받아온다.\n\n\\*\\* 패킷 : 서버에서 클라이언트로 전송되는 데이터의 포맷\n\n#### 브라우저는 어떻게 데이터를 받아올까?\n\n브라우저는 웹 사이트 문서를 받아오기 위해 클라이언트에서 Request 요청을 만들어 서버에 전달한다.\n서버는 Request 를 해석하고 요청에 해당하는 Response 를 전달한다.\n\nHTTP 프로토콜의 데이터 형식은 HEADER 와 BODY 로 구성되어 있습니다.\n\nHTTP/1.1부터는 Keep-alive 를 지원하게 되면서 문서가 다운로드가 완료되어도 클라이언트의 연결을 끊지 않고\n일정 시간동안 연결을 유지하며 재연결 과정없이 데이터를 유지하게 된다.\n\n[andrew park]: https://medium.com/@pks2974/website%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%97%AC%EC%A7%80%EA%B2%8C%EB%90%98%EB%8A%94-%EA%B1%B8%EA%B9%8C-1-108009d4bdb\n","slug":"browser","published":1,"updated":"2021-09-24T05:32:33.050Z","photos":[],"link":"","_id":"cktxxl2i10004vb8z6v6je49h","content":"<h4 id=\"CORS-란\"><a href=\"#CORS-란\" class=\"headerlink\" title=\"CORS 란?\"></a>CORS 란?</h4><p><code>Cross Origin Resource Sharing</code> 의 줄임말로, 다른 도메인의 리소스를 요청할 수 있는 방법을 말한다.<br>XMLHttpRequest 는 보안상의 이유로 동일한 도메인에서만 HTTP 요청을 보내도록 제한하고 있다.</p>\n<p>GET, POST 방식 중 Request 간단하게 요청하고 응답할 수 있다.<br><code>Access-Control-Allow-Origin: *</code> 모든 도메인으로 부터 접근이 가능하도록 허용하게 된다.</p>\n<h4 id=\"브라우저는-받아온-정보를-화면에-표현하는-역할을-한다-브라우저에-어떻게-문서를-전달될까\"><a href=\"#브라우저는-받아온-정보를-화면에-표현하는-역할을-한다-브라우저에-어떻게-문서를-전달될까\" class=\"headerlink\" title=\"브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?\"></a>브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?</h4><p><code>HTTP (Hypertext Transfer Protocol)</code> 의 줄임말로, 인터넷상에서 데이터를 주고 받을 수 있는 프로토콜이다.<br><a href=\"https://medium.com/@pks2974/website%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%97%AC%EC%A7%80%EA%B2%8C%EB%90%98%EB%8A%94-%EA%B1%B8%EA%B9%8C-1-108009d4bdb\">Andrew park</a>님의 블로그에 잘 정리가 되어서 발췌한다.</p>\n<p>브라우저는 오디오/비디오/이미지/텍스트 등 HTTP 통신을 통해서 문서를 가져와 화면에 출력을 해준다.</p>\n<p>이때 TCP/IP 4계층 -&gt; 3계층 -&gt; 2계층 -&gt; 1계층 네트워크에 접근해서 데이터를 전달한다.<br>4계층 - Application : 정보를 만들어 전달<br>3계층 - Transport : 통신 노드를 연결<br>2계층 - Internet : 통신 노드간 패킷 전송과 라우팅<br>1계층 - Network Interface : 전기적 신호로 변환</p>\n<p>받는 쪽에서는 반대로 해석한다.</p>\n<p>모든 컴퓨터와 서버는 네트워크를 통해 외부에서 접근하려면 IP 주소가 필요한데 사용자는 브라우저에 URL을 입력하게 된다.<br>이때 DNS 서버로 접근해서 해당 도메인 네임에 맞는 IP 를 받아온다.</p>\n<p>** 패킷 : 서버에서 클라이언트로 전송되는 데이터의 포맷</p>\n<h4 id=\"브라우저는-어떻게-데이터를-받아올까\"><a href=\"#브라우저는-어떻게-데이터를-받아올까\" class=\"headerlink\" title=\"브라우저는 어떻게 데이터를 받아올까?\"></a>브라우저는 어떻게 데이터를 받아올까?</h4><p>브라우저는 웹 사이트 문서를 받아오기 위해 클라이언트에서 Request 요청을 만들어 서버에 전달한다.<br>서버는 Request 를 해석하고 요청에 해당하는 Response 를 전달한다.</p>\n<p>HTTP 프로토콜의 데이터 형식은 HEADER 와 BODY 로 구성되어 있습니다.</p>\n<p>HTTP/1.1부터는 Keep-alive 를 지원하게 되면서 문서가 다운로드가 완료되어도 클라이언트의 연결을 끊지 않고<br>일정 시간동안 연결을 유지하며 재연결 과정없이 데이터를 유지하게 된다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"CORS-란\"><a href=\"#CORS-란\" class=\"headerlink\" title=\"CORS 란?\"></a>CORS 란?</h4><p><code>Cross Origin Resource Sharing</code> 의 줄임말로, 다른 도메인의 리소스를 요청할 수 있는 방법을 말한다.<br>XMLHttpRequest 는 보안상의 이유로 동일한 도메인에서만 HTTP 요청을 보내도록 제한하고 있다.</p>\n<p>GET, POST 방식 중 Request 간단하게 요청하고 응답할 수 있다.<br><code>Access-Control-Allow-Origin: *</code> 모든 도메인으로 부터 접근이 가능하도록 허용하게 된다.</p>\n<h4 id=\"브라우저는-받아온-정보를-화면에-표현하는-역할을-한다-브라우저에-어떻게-문서를-전달될까\"><a href=\"#브라우저는-받아온-정보를-화면에-표현하는-역할을-한다-브라우저에-어떻게-문서를-전달될까\" class=\"headerlink\" title=\"브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?\"></a>브라우저는 받아온 정보를 화면에 표현하는 역할을 한다. 브라우저에 어떻게 문서를 전달될까?</h4><p><code>HTTP (Hypertext Transfer Protocol)</code> 의 줄임말로, 인터넷상에서 데이터를 주고 받을 수 있는 프로토콜이다.<br><a href=\"https://medium.com/@pks2974/website%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%97%AC%EC%A7%80%EA%B2%8C%EB%90%98%EB%8A%94-%EA%B1%B8%EA%B9%8C-1-108009d4bdb\">Andrew park</a>님의 블로그에 잘 정리가 되어서 발췌한다.</p>\n<p>브라우저는 오디오/비디오/이미지/텍스트 등 HTTP 통신을 통해서 문서를 가져와 화면에 출력을 해준다.</p>\n<p>이때 TCP/IP 4계층 -&gt; 3계층 -&gt; 2계층 -&gt; 1계층 네트워크에 접근해서 데이터를 전달한다.<br>4계층 - Application : 정보를 만들어 전달<br>3계층 - Transport : 통신 노드를 연결<br>2계층 - Internet : 통신 노드간 패킷 전송과 라우팅<br>1계층 - Network Interface : 전기적 신호로 변환</p>\n<p>받는 쪽에서는 반대로 해석한다.</p>\n<p>모든 컴퓨터와 서버는 네트워크를 통해 외부에서 접근하려면 IP 주소가 필요한데 사용자는 브라우저에 URL을 입력하게 된다.<br>이때 DNS 서버로 접근해서 해당 도메인 네임에 맞는 IP 를 받아온다.</p>\n<p>** 패킷 : 서버에서 클라이언트로 전송되는 데이터의 포맷</p>\n<h4 id=\"브라우저는-어떻게-데이터를-받아올까\"><a href=\"#브라우저는-어떻게-데이터를-받아올까\" class=\"headerlink\" title=\"브라우저는 어떻게 데이터를 받아올까?\"></a>브라우저는 어떻게 데이터를 받아올까?</h4><p>브라우저는 웹 사이트 문서를 받아오기 위해 클라이언트에서 Request 요청을 만들어 서버에 전달한다.<br>서버는 Request 를 해석하고 요청에 해당하는 Response 를 전달한다.</p>\n<p>HTTP 프로토콜의 데이터 형식은 HEADER 와 BODY 로 구성되어 있습니다.</p>\n<p>HTTP/1.1부터는 Keep-alive 를 지원하게 되면서 문서가 다운로드가 완료되어도 클라이언트의 연결을 끊지 않고<br>일정 시간동안 연결을 유지하며 재연결 과정없이 데이터를 유지하게 된다.</p>\n"},{"layout":"post","title":"CSS 이야기","date":"2019-08-15T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\n#### Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?\n\ngrid 는 중첩이 필요할 땐, 항상 grid 로 재분할이 필요하다.\n\n```css\n.main {\n  width: 100%;\n  height: inherit;\n  display: grid;\n  grid-template-rows: repeat(40, 1fr);\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 5px;\n  background: #ccccee;\n  padding: 10px;\n}\n.main-bottom {\n  grid-row: 25/41;\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 5px;\n}\n\n.main-bottom-left {\n  grid-row: 1/11;\n  grid-column: 1/1;\n  background: lightpink;\n}\n\n.main-bottom-right {\n  grid-row: 1/11;\n  grid-column: 2/2;\n  background: lightpink;\n}\n```\n\nGrid 에서 크기가 고정된 아이템이 잘 정렬되게 보이려면, 감싸고 있는 컨테이너 박스에서 `grid-auto-rows: max-content` 를 추가해준다.\n([MDN] [gird])\n\n#### Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?\n\nFlex 는 `align-items`를 사용하면 컨텐츠를 정렬할 수 있다.\n\n```css\n.main {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  height: 100px;\n  width: 100px;\n  border: 1px solid #ffffff;\n  text-align: center;\n}\n```\n\n#### CSS 선택자\n\n[webdir][webdir] 님의 블로그를 보면, 잘 정리되어있는데 보통은 class 선택자로 오버라이드해서 사용하고 있다.\nclass 선택자로 chain 된 것도 지정이 가능하다보니 대체로 찾아서 쓰는 경우는 `.class1 .class2` 이렇게 붙여 쓰고 있다.\n\n[opentutorials][opentutorials] 이 블로그도 레퍼런스로 잘 쓰여져 있다.\n타입 선택자 분류는 다음과 같이 쓴다.\n\n```css\nol li span {\n  /* 공백 : 하위 선택자 */\n}\n\nbody > p {\n  /* > : 자식 선택자 */\n}\n\ndiv + p {\n  /* + : 형제 선택자 */\n}\n\n* {\n  /* 전체 선택자 */\n}\n```\n\n#### 반응형 레이아웃\n\n```html\n@media only screen and (max-height: 1080px) { body { backgroud: 'red' } }\n```\n\n웹브라우저의 높이 해상도가 1080px 이하 일때, 클래스의 스타일을 변경해준다.\n\n[webdir]: https://webdir.tistory.com/339\n[opentutorials]: https://opentutorials.org/module/484/4150\n[gird]: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows\n\n#### CSS 선택자\n\n마지막 라인 없애는 방법, `last-child` 선택자를 이용하자.\n\n```css\n.menu li {\n  border-bottom: 1px solid #ccc;\n}\n.menu li:last-child {\n  border: none;\n}\n```\n","source":"_posts/css.md","raw":"---\nlayout: post\ntitle: 'CSS 이야기'\ndate: 2019-08-16\ncategories: css\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\n#### Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?\n\ngrid 는 중첩이 필요할 땐, 항상 grid 로 재분할이 필요하다.\n\n```css\n.main {\n  width: 100%;\n  height: inherit;\n  display: grid;\n  grid-template-rows: repeat(40, 1fr);\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 5px;\n  background: #ccccee;\n  padding: 10px;\n}\n.main-bottom {\n  grid-row: 25/41;\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 5px;\n}\n\n.main-bottom-left {\n  grid-row: 1/11;\n  grid-column: 1/1;\n  background: lightpink;\n}\n\n.main-bottom-right {\n  grid-row: 1/11;\n  grid-column: 2/2;\n  background: lightpink;\n}\n```\n\nGrid 에서 크기가 고정된 아이템이 잘 정렬되게 보이려면, 감싸고 있는 컨테이너 박스에서 `grid-auto-rows: max-content` 를 추가해준다.\n([MDN] [gird])\n\n#### Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?\n\nFlex 는 `align-items`를 사용하면 컨텐츠를 정렬할 수 있다.\n\n```css\n.main {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  height: 100px;\n  width: 100px;\n  border: 1px solid #ffffff;\n  text-align: center;\n}\n```\n\n#### CSS 선택자\n\n[webdir][webdir] 님의 블로그를 보면, 잘 정리되어있는데 보통은 class 선택자로 오버라이드해서 사용하고 있다.\nclass 선택자로 chain 된 것도 지정이 가능하다보니 대체로 찾아서 쓰는 경우는 `.class1 .class2` 이렇게 붙여 쓰고 있다.\n\n[opentutorials][opentutorials] 이 블로그도 레퍼런스로 잘 쓰여져 있다.\n타입 선택자 분류는 다음과 같이 쓴다.\n\n```css\nol li span {\n  /* 공백 : 하위 선택자 */\n}\n\nbody > p {\n  /* > : 자식 선택자 */\n}\n\ndiv + p {\n  /* + : 형제 선택자 */\n}\n\n* {\n  /* 전체 선택자 */\n}\n```\n\n#### 반응형 레이아웃\n\n```html\n@media only screen and (max-height: 1080px) { body { backgroud: 'red' } }\n```\n\n웹브라우저의 높이 해상도가 1080px 이하 일때, 클래스의 스타일을 변경해준다.\n\n[webdir]: https://webdir.tistory.com/339\n[opentutorials]: https://opentutorials.org/module/484/4150\n[gird]: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows\n\n#### CSS 선택자\n\n마지막 라인 없애는 방법, `last-child` 선택자를 이용하자.\n\n```css\n.menu li {\n  border-bottom: 1px solid #ccc;\n}\n.menu li:last-child {\n  border: none;\n}\n```\n","slug":"css","published":1,"updated":"2021-09-24T05:34:23.990Z","photos":[],"link":"","_id":"cktxxl2i10005vb8z0eolcd4o","content":"<h4 id=\"Grid-사용할-때-중첩된-그리드는-어떻게-나눌까\"><a href=\"#Grid-사용할-때-중첩된-그리드는-어떻게-나눌까\" class=\"headerlink\" title=\"Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?\"></a>Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?</h4><p>grid 는 중첩이 필요할 땐, 항상 grid 로 재분할이 필요하다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  grid-template-rows: <span class=\"built_in\">repeat</span>(<span class=\"number\">40</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-template-<span class=\"attribute\">columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-gap: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ccccee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main-bottom</span> &#123;</span><br><span class=\"line\">  grid-row: <span class=\"number\">25</span>/<span class=\"number\">41</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  grid-template-rows: <span class=\"built_in\">repeat</span>(<span class=\"number\">10</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-template-<span class=\"attribute\">columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-gap: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main-bottom-left</span> &#123;</span><br><span class=\"line\">  grid-row: <span class=\"number\">1</span>/<span class=\"number\">11</span>;</span><br><span class=\"line\">  grid-column: <span class=\"number\">1</span>/<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main-bottom-right</span> &#123;</span><br><span class=\"line\">  grid-row: <span class=\"number\">1</span>/<span class=\"number\">11</span>;</span><br><span class=\"line\">  grid-column: <span class=\"number\">2</span>/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Grid 에서 크기가 고정된 아이템이 잘 정렬되게 보이려면, 감싸고 있는 컨테이너 박스에서 <code>grid-auto-rows: max-content</code> 를 추가해준다.<br>([MDN] <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows\">gird</a>)</p>\n<h4 id=\"Flex-를-사용할때-텍스트-중앙-정렬은-어떻게-할까\"><a href=\"#Flex-를-사용할때-텍스트-중앙-정렬은-어떻게-할까\" class=\"headerlink\" title=\"Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?\"></a>Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?</h4><p>Flex 는 <code>align-items</code>를 사용하면 컨텐츠를 정렬할 수 있다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-선택자\"><a href=\"#CSS-선택자\" class=\"headerlink\" title=\"CSS 선택자\"></a>CSS 선택자</h4><p><a href=\"https://webdir.tistory.com/339\">webdir</a> 님의 블로그를 보면, 잘 정리되어있는데 보통은 class 선택자로 오버라이드해서 사용하고 있다.<br>class 선택자로 chain 된 것도 지정이 가능하다보니 대체로 찾아서 쓰는 경우는 <code>.class1 .class2</code> 이렇게 붙여 쓰고 있다.</p>\n<p><a href=\"https://opentutorials.org/module/484/4150\">opentutorials</a> 이 블로그도 레퍼런스로 잘 쓰여져 있다.<br>타입 선택자 분류는 다음과 같이 쓴다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ol</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 공백 : 하위 선택자 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* &gt; : 자식 선택자 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> + <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* + : 형제 선택자 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 전체 선택자 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"반응형-레이아웃\"><a href=\"#반응형-레이아웃\" class=\"headerlink\" title=\"반응형 레이아웃\"></a>반응형 레이아웃</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media only screen and (max-height: 1080px) &#123; body &#123; backgroud: &#x27;red&#x27; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>웹브라우저의 높이 해상도가 1080px 이하 일때, 클래스의 스타일을 변경해준다.</p>\n<h4 id=\"CSS-선택자-1\"><a href=\"#CSS-선택자-1\" class=\"headerlink\" title=\"CSS 선택자\"></a>CSS 선택자</h4><p>마지막 라인 없애는 방법, <code>last-child</code> 선택자를 이용하자.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.menu</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Grid-사용할-때-중첩된-그리드는-어떻게-나눌까\"><a href=\"#Grid-사용할-때-중첩된-그리드는-어떻게-나눌까\" class=\"headerlink\" title=\"Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?\"></a>Grid 사용할 때, 중첩된 그리드는 어떻게 나눌까?</h4><p>grid 는 중첩이 필요할 땐, 항상 grid 로 재분할이 필요하다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  grid-template-rows: <span class=\"built_in\">repeat</span>(<span class=\"number\">40</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-template-<span class=\"attribute\">columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-gap: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ccccee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main-bottom</span> &#123;</span><br><span class=\"line\">  grid-row: <span class=\"number\">25</span>/<span class=\"number\">41</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  grid-template-rows: <span class=\"built_in\">repeat</span>(<span class=\"number\">10</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-template-<span class=\"attribute\">columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>fr);</span><br><span class=\"line\">  grid-gap: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main-bottom-left</span> &#123;</span><br><span class=\"line\">  grid-row: <span class=\"number\">1</span>/<span class=\"number\">11</span>;</span><br><span class=\"line\">  grid-column: <span class=\"number\">1</span>/<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main-bottom-right</span> &#123;</span><br><span class=\"line\">  grid-row: <span class=\"number\">1</span>/<span class=\"number\">11</span>;</span><br><span class=\"line\">  grid-column: <span class=\"number\">2</span>/<span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: lightpink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Grid 에서 크기가 고정된 아이템이 잘 정렬되게 보이려면, 감싸고 있는 컨테이너 박스에서 <code>grid-auto-rows: max-content</code> 를 추가해준다.<br>([MDN] <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rows\">gird</a>)</p>\n<h4 id=\"Flex-를-사용할때-텍스트-중앙-정렬은-어떻게-할까\"><a href=\"#Flex-를-사용할때-텍스트-중앙-정렬은-어떻게-할까\" class=\"headerlink\" title=\"Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?\"></a>Flex 를 사용할때, 텍스트 중앙 정렬은 어떻게 할까?</h4><p>Flex 는 <code>align-items</code>를 사용하면 컨텐츠를 정렬할 수 있다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CSS-선택자\"><a href=\"#CSS-선택자\" class=\"headerlink\" title=\"CSS 선택자\"></a>CSS 선택자</h4><p><a href=\"https://webdir.tistory.com/339\">webdir</a> 님의 블로그를 보면, 잘 정리되어있는데 보통은 class 선택자로 오버라이드해서 사용하고 있다.<br>class 선택자로 chain 된 것도 지정이 가능하다보니 대체로 찾아서 쓰는 경우는 <code>.class1 .class2</code> 이렇게 붙여 쓰고 있다.</p>\n<p><a href=\"https://opentutorials.org/module/484/4150\">opentutorials</a> 이 블로그도 레퍼런스로 잘 쓰여져 있다.<br>타입 선택자 분류는 다음과 같이 쓴다.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ol</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 공백 : 하위 선택자 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &gt; <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* &gt; : 자식 선택자 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">div</span> + <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* + : 형제 선택자 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 전체 선택자 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"반응형-레이아웃\"><a href=\"#반응형-레이아웃\" class=\"headerlink\" title=\"반응형 레이아웃\"></a>반응형 레이아웃</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media only screen and (max-height: 1080px) &#123; body &#123; backgroud: &#x27;red&#x27; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>웹브라우저의 높이 해상도가 1080px 이하 일때, 클래스의 스타일을 변경해준다.</p>\n<h4 id=\"CSS-선택자-1\"><a href=\"#CSS-선택자-1\" class=\"headerlink\" title=\"CSS 선택자\"></a>CSS 선택자</h4><p>마지막 라인 없애는 방법, <code>last-child</code> 선택자를 이용하자.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.menu</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.menu</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Javascript Debugging 이야기","date":"2019-09-09T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### FPS meter 로 확인해볼 수 있다.\n\n크롬 개발자 도구 - Console 탭의 더보기 - Rendering - FPS meter 체크를 하면 확인할 수 있다.\n\n![post-2019-09-10](/img/post-2019-09-10.png){: width=\"100%\" height=\"100%\"}\n","source":"_posts/debugging.md","raw":"---\nlayout: post\ntitle: 'Javascript Debugging 이야기'\ndate: 2019-09-10\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### FPS meter 로 확인해볼 수 있다.\n\n크롬 개발자 도구 - Console 탭의 더보기 - Rendering - FPS meter 체크를 하면 확인할 수 있다.\n\n![post-2019-09-10](/img/post-2019-09-10.png){: width=\"100%\" height=\"100%\"}\n","slug":"debugging","published":1,"updated":"2021-09-24T05:31:59.497Z","photos":[],"link":"","_id":"cktxxl2i30007vb8zct4t2wvu","content":"<h4 id=\"FPS-meter-로-확인해볼-수-있다\"><a href=\"#FPS-meter-로-확인해볼-수-있다\" class=\"headerlink\" title=\"FPS meter 로 확인해볼 수 있다.\"></a>FPS meter 로 확인해볼 수 있다.</h4><p>크롬 개발자 도구 - Console 탭의 더보기 - Rendering - FPS meter 체크를 하면 확인할 수 있다.</p>\n<p><img src=\"/img/post-2019-09-10.png\" alt=\"post-2019-09-10\">{: width=”100%” height=”100%”}</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"FPS-meter-로-확인해볼-수-있다\"><a href=\"#FPS-meter-로-확인해볼-수-있다\" class=\"headerlink\" title=\"FPS meter 로 확인해볼 수 있다.\"></a>FPS meter 로 확인해볼 수 있다.</h4><p>크롬 개발자 도구 - Console 탭의 더보기 - Rendering - FPS meter 체크를 하면 확인할 수 있다.</p>\n<p><img src=\"/img/post-2019-09-10.png\" alt=\"post-2019-09-10\">{: width=”100%” height=”100%”}</p>\n"},{"layout":"post","title":"D3 필요한 메서드 정리해보자","date":"2019-09-30T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### D3 차트에서 가장 많이 쓰이는 속성\n\ntransform 속성은 Axis를 그릴 때, call 함수로 데이터를 바인딩하면서 간격을 지정해준다.\ntranslate(x, top) : x 축과 top 위치가 시작점\n\n#### D3 라인 그리는 방법\n\n```js\nvar svg = d3\n  .select('#segment')\n  .append('svg')\n  .attr('width', 800)\n  .attr('height', 200);\n\nsvg\n  .append('line')\n  .attr('x1', 10)\n  .attr('y1', 10)\n  .attr('x2', 700)\n  .attr('y2', 100)\n  .attr('stroke', 'red');\n```\n\n[참고] [d3-graph-gallery] https://www.d3-graph-gallery.com/graph/shape.html\n","source":"_posts/d3.md","raw":"---\nlayout: post\ntitle: 'D3 필요한 메서드 정리해보자'\ndate: 2019-10-01\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### D3 차트에서 가장 많이 쓰이는 속성\n\ntransform 속성은 Axis를 그릴 때, call 함수로 데이터를 바인딩하면서 간격을 지정해준다.\ntranslate(x, top) : x 축과 top 위치가 시작점\n\n#### D3 라인 그리는 방법\n\n```js\nvar svg = d3\n  .select('#segment')\n  .append('svg')\n  .attr('width', 800)\n  .attr('height', 200);\n\nsvg\n  .append('line')\n  .attr('x1', 10)\n  .attr('y1', 10)\n  .attr('x2', 700)\n  .attr('y2', 100)\n  .attr('stroke', 'red');\n```\n\n[참고] [d3-graph-gallery] https://www.d3-graph-gallery.com/graph/shape.html\n","slug":"d3","published":1,"updated":"2021-09-24T05:31:36.752Z","photos":[],"link":"","_id":"cktxxl2i40008vb8zgcu69zt8","content":"<h4 id=\"D3-차트에서-가장-많이-쓰이는-속성\"><a href=\"#D3-차트에서-가장-많이-쓰이는-속성\" class=\"headerlink\" title=\"D3 차트에서 가장 많이 쓰이는 속성\"></a>D3 차트에서 가장 많이 쓰이는 속성</h4><p>transform 속성은 Axis를 그릴 때, call 함수로 데이터를 바인딩하면서 간격을 지정해준다.<br>translate(x, top) : x 축과 top 위치가 시작점</p>\n<h4 id=\"D3-라인-그리는-방법\"><a href=\"#D3-라인-그리는-방법\" class=\"headerlink\" title=\"D3 라인 그리는 방법\"></a>D3 라인 그리는 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> svg = d3</span><br><span class=\"line\">  .select(<span class=\"string\">&#x27;#segment&#x27;</span>)</span><br><span class=\"line\">  .append(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;width&#x27;</span>, <span class=\"number\">800</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;height&#x27;</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">svg</span><br><span class=\"line\">  .append(<span class=\"string\">&#x27;line&#x27;</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;x1&#x27;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;y1&#x27;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;x2&#x27;</span>, <span class=\"number\">700</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;y2&#x27;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;stroke&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>[참고] [d3-graph-gallery] <a href=\"https://www.d3-graph-gallery.com/graph/shape.html\">https://www.d3-graph-gallery.com/graph/shape.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"D3-차트에서-가장-많이-쓰이는-속성\"><a href=\"#D3-차트에서-가장-많이-쓰이는-속성\" class=\"headerlink\" title=\"D3 차트에서 가장 많이 쓰이는 속성\"></a>D3 차트에서 가장 많이 쓰이는 속성</h4><p>transform 속성은 Axis를 그릴 때, call 함수로 데이터를 바인딩하면서 간격을 지정해준다.<br>translate(x, top) : x 축과 top 위치가 시작점</p>\n<h4 id=\"D3-라인-그리는-방법\"><a href=\"#D3-라인-그리는-방법\" class=\"headerlink\" title=\"D3 라인 그리는 방법\"></a>D3 라인 그리는 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> svg = d3</span><br><span class=\"line\">  .select(<span class=\"string\">&#x27;#segment&#x27;</span>)</span><br><span class=\"line\">  .append(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;width&#x27;</span>, <span class=\"number\">800</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;height&#x27;</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">svg</span><br><span class=\"line\">  .append(<span class=\"string\">&#x27;line&#x27;</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;x1&#x27;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;y1&#x27;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;x2&#x27;</span>, <span class=\"number\">700</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;y2&#x27;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">&#x27;stroke&#x27;</span>, <span class=\"string\">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>[참고] [d3-graph-gallery] <a href=\"https://www.d3-graph-gallery.com/graph/shape.html\">https://www.d3-graph-gallery.com/graph/shape.html</a></p>\n"},{"layout":"post","title":"Javascript 디자인패턴 이야기","date":"2019-09-10T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### 클래스란? (클래스/상속 디자인 패턴)\n\n클래스화란 데이터와 작동을 함께 잘 감싸서 캡슐화하는 것이 올바른 설계이다.\n데이터에 적용 가능한 작동들을 메서드로 설계해야한다.\n클래스에서는 어떤 작동이 담긴 메서드의 이름을 부모와 자식 클래스 모두 똑같이 공유하여 자식 클래스가 부모 클래스를 오바라이드하라고 권장한다.\n그러나 자바스크립트에서는 이렇게 하면 불안정한 결과를 불러온다.\n\n나는 대부분 절차적 프로그래밍을 해왔다는 걸 알게 되었다. 상위 추상화 없이 단순히 다른 함수를 호출해서 사용하는 방법만 사용해왔고,\n클래스의 경우는 라이브러리를 통해서만 사용했었다. 그래서 편리함은 알지만, 다뤄보지 않은 영역이라 이번 기회에 다시 정리하고자 한다.\n\n클래스는 복사 과정을 거쳐 객체 형태로 인스턴스화 한다.\n인스턴스는 생성자가 해주는데 이 생성자는 미리 정보에 대한 변수를 초기화해준다.\n항상 new 키워드를 앞에 붙여 생성자를 호출한다.\n\n```js\nclass Button {}\nvar btn1 = new Button();\n```\n\n오버라이드하기 전의 원본 메서드와 오버라이드 메서드가 다를 수도 있는데 이를 다형성(오버라이드)이라 한다.\ninherits/super 라는 키워드로 사용하며, 부모/조상 중 어떤 메서드를 호출할지 결정하는 것도 다형성의 기법이다.\n\n자바스크립트엔 클래스란 개념 자체가 없고 오직 객체만 있다. 그래서 위와 같은 동작들은 자동으로 일어나지 않는다.\n인스턴스화 해도 자동으로 복사가 되지않기 때문에 믹스인으로 클래스 복사기능을 흉내내었다.\n이런 기능을 여러 라이브러리에서는 `extends()` 라 하고, 프로퍼티를 복사를 할 수 있게 제공된다.\n믹스인 과정을 초콜릿 조각을 본인이 원하는 쿠키 반죽에 섞어 넣는 것에 비유한다. (이 말이 가장 기억에 남을거 같다)\n\n이렇게 일일히 복사(믹스인) 하더라도 다른 클래스 지향처럼 100%(인스턴스) 복사는 어렵다.\n\n#### 프로토타입이란? (프로토타입 디자인 패턴)\n\n객체를 다른 객체에 연결한다. 수평적인 상태에서 위임이 되는 연결이다.\n오버라이드 하기 딱 좋은 메서드 명칭보다는 각 객체의 작동방식을 설명하는 서술적인 명칭이 필요하다.\n모든 레퍼런스가 확실히 존재한다면 양방향 위임은 가능하긴 하지만 무한 루프에 빠질 수 있다.\n\n```js\nvar btn1 = Object.create(Button);\nbtn1.setup();\n```\n\n어떤 함수가 call(), apply(), bind() 메서드에 접근할 수 있는 건 함수 자신도 객체고 함수 객체 역시 `Function.prototype`에\n[[Prototype]]이 연결되어 위임 가능한 메서드가 있어 가능한 것이다.\n[infoscis][infoscis]님 블로그에 예제가 잘 나와있다.\n\n```js\n// ES6 [[Prototype]] 에 저장된 값을 변경한다.\nObject.setPrototyupeOf();\n```\n\n[infoscis]: https://infoscis.github.io/2018/01/25/ecmascript-6-expanded-object-functionality/\n\n#### Reference\n\n- YOU DON'T KNOW JS - this 와 객체 프로토타입, 비동기와 성능\n","source":"_posts/design-pattern.md","raw":"---\nlayout: post\ntitle: 'Javascript 디자인패턴 이야기'\ndate: 2019-09-11\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### 클래스란? (클래스/상속 디자인 패턴)\n\n클래스화란 데이터와 작동을 함께 잘 감싸서 캡슐화하는 것이 올바른 설계이다.\n데이터에 적용 가능한 작동들을 메서드로 설계해야한다.\n클래스에서는 어떤 작동이 담긴 메서드의 이름을 부모와 자식 클래스 모두 똑같이 공유하여 자식 클래스가 부모 클래스를 오바라이드하라고 권장한다.\n그러나 자바스크립트에서는 이렇게 하면 불안정한 결과를 불러온다.\n\n나는 대부분 절차적 프로그래밍을 해왔다는 걸 알게 되었다. 상위 추상화 없이 단순히 다른 함수를 호출해서 사용하는 방법만 사용해왔고,\n클래스의 경우는 라이브러리를 통해서만 사용했었다. 그래서 편리함은 알지만, 다뤄보지 않은 영역이라 이번 기회에 다시 정리하고자 한다.\n\n클래스는 복사 과정을 거쳐 객체 형태로 인스턴스화 한다.\n인스턴스는 생성자가 해주는데 이 생성자는 미리 정보에 대한 변수를 초기화해준다.\n항상 new 키워드를 앞에 붙여 생성자를 호출한다.\n\n```js\nclass Button {}\nvar btn1 = new Button();\n```\n\n오버라이드하기 전의 원본 메서드와 오버라이드 메서드가 다를 수도 있는데 이를 다형성(오버라이드)이라 한다.\ninherits/super 라는 키워드로 사용하며, 부모/조상 중 어떤 메서드를 호출할지 결정하는 것도 다형성의 기법이다.\n\n자바스크립트엔 클래스란 개념 자체가 없고 오직 객체만 있다. 그래서 위와 같은 동작들은 자동으로 일어나지 않는다.\n인스턴스화 해도 자동으로 복사가 되지않기 때문에 믹스인으로 클래스 복사기능을 흉내내었다.\n이런 기능을 여러 라이브러리에서는 `extends()` 라 하고, 프로퍼티를 복사를 할 수 있게 제공된다.\n믹스인 과정을 초콜릿 조각을 본인이 원하는 쿠키 반죽에 섞어 넣는 것에 비유한다. (이 말이 가장 기억에 남을거 같다)\n\n이렇게 일일히 복사(믹스인) 하더라도 다른 클래스 지향처럼 100%(인스턴스) 복사는 어렵다.\n\n#### 프로토타입이란? (프로토타입 디자인 패턴)\n\n객체를 다른 객체에 연결한다. 수평적인 상태에서 위임이 되는 연결이다.\n오버라이드 하기 딱 좋은 메서드 명칭보다는 각 객체의 작동방식을 설명하는 서술적인 명칭이 필요하다.\n모든 레퍼런스가 확실히 존재한다면 양방향 위임은 가능하긴 하지만 무한 루프에 빠질 수 있다.\n\n```js\nvar btn1 = Object.create(Button);\nbtn1.setup();\n```\n\n어떤 함수가 call(), apply(), bind() 메서드에 접근할 수 있는 건 함수 자신도 객체고 함수 객체 역시 `Function.prototype`에\n[[Prototype]]이 연결되어 위임 가능한 메서드가 있어 가능한 것이다.\n[infoscis][infoscis]님 블로그에 예제가 잘 나와있다.\n\n```js\n// ES6 [[Prototype]] 에 저장된 값을 변경한다.\nObject.setPrototyupeOf();\n```\n\n[infoscis]: https://infoscis.github.io/2018/01/25/ecmascript-6-expanded-object-functionality/\n\n#### Reference\n\n- YOU DON'T KNOW JS - this 와 객체 프로토타입, 비동기와 성능\n","slug":"design-pattern","published":1,"updated":"2021-09-24T05:31:54.069Z","photos":[],"link":"","_id":"cktxxl2i5000bvb8zg92220ft","content":"<h4 id=\"클래스란-클래스-상속-디자인-패턴\"><a href=\"#클래스란-클래스-상속-디자인-패턴\" class=\"headerlink\" title=\"클래스란? (클래스/상속 디자인 패턴)\"></a>클래스란? (클래스/상속 디자인 패턴)</h4><p>클래스화란 데이터와 작동을 함께 잘 감싸서 캡슐화하는 것이 올바른 설계이다.<br>데이터에 적용 가능한 작동들을 메서드로 설계해야한다.<br>클래스에서는 어떤 작동이 담긴 메서드의 이름을 부모와 자식 클래스 모두 똑같이 공유하여 자식 클래스가 부모 클래스를 오바라이드하라고 권장한다.<br>그러나 자바스크립트에서는 이렇게 하면 불안정한 결과를 불러온다.</p>\n<p>나는 대부분 절차적 프로그래밍을 해왔다는 걸 알게 되었다. 상위 추상화 없이 단순히 다른 함수를 호출해서 사용하는 방법만 사용해왔고,<br>클래스의 경우는 라이브러리를 통해서만 사용했었다. 그래서 편리함은 알지만, 다뤄보지 않은 영역이라 이번 기회에 다시 정리하고자 한다.</p>\n<p>클래스는 복사 과정을 거쳐 객체 형태로 인스턴스화 한다.<br>인스턴스는 생성자가 해주는데 이 생성자는 미리 정보에 대한 변수를 초기화해준다.<br>항상 new 키워드를 앞에 붙여 생성자를 호출한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn1 = <span class=\"keyword\">new</span> Button();</span><br></pre></td></tr></table></figure>\n\n<p>오버라이드하기 전의 원본 메서드와 오버라이드 메서드가 다를 수도 있는데 이를 다형성(오버라이드)이라 한다.<br>inherits/super 라는 키워드로 사용하며, 부모/조상 중 어떤 메서드를 호출할지 결정하는 것도 다형성의 기법이다.</p>\n<p>자바스크립트엔 클래스란 개념 자체가 없고 오직 객체만 있다. 그래서 위와 같은 동작들은 자동으로 일어나지 않는다.<br>인스턴스화 해도 자동으로 복사가 되지않기 때문에 믹스인으로 클래스 복사기능을 흉내내었다.<br>이런 기능을 여러 라이브러리에서는 <code>extends()</code> 라 하고, 프로퍼티를 복사를 할 수 있게 제공된다.<br>믹스인 과정을 초콜릿 조각을 본인이 원하는 쿠키 반죽에 섞어 넣는 것에 비유한다. (이 말이 가장 기억에 남을거 같다)</p>\n<p>이렇게 일일히 복사(믹스인) 하더라도 다른 클래스 지향처럼 100%(인스턴스) 복사는 어렵다.</p>\n<h4 id=\"프로토타입이란-프로토타입-디자인-패턴\"><a href=\"#프로토타입이란-프로토타입-디자인-패턴\" class=\"headerlink\" title=\"프로토타입이란? (프로토타입 디자인 패턴)\"></a>프로토타입이란? (프로토타입 디자인 패턴)</h4><p>객체를 다른 객체에 연결한다. 수평적인 상태에서 위임이 되는 연결이다.<br>오버라이드 하기 딱 좋은 메서드 명칭보다는 각 객체의 작동방식을 설명하는 서술적인 명칭이 필요하다.<br>모든 레퍼런스가 확실히 존재한다면 양방향 위임은 가능하긴 하지만 무한 루프에 빠질 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn1 = <span class=\"built_in\">Object</span>.create(Button);</span><br><span class=\"line\">btn1.setup();</span><br></pre></td></tr></table></figure>\n\n<p>어떤 함수가 call(), apply(), bind() 메서드에 접근할 수 있는 건 함수 자신도 객체고 함수 객체 역시 <code>Function.prototype</code>에<br>[[Prototype]]이 연결되어 위임 가능한 메서드가 있어 가능한 것이다.<br><a href=\"https://infoscis.github.io/2018/01/25/ecmascript-6-expanded-object-functionality/\">infoscis</a>님 블로그에 예제가 잘 나와있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 [[Prototype]] 에 저장된 값을 변경한다.</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototyupeOf();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><ul>\n<li>YOU DON’T KNOW JS - this 와 객체 프로토타입, 비동기와 성능</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"클래스란-클래스-상속-디자인-패턴\"><a href=\"#클래스란-클래스-상속-디자인-패턴\" class=\"headerlink\" title=\"클래스란? (클래스/상속 디자인 패턴)\"></a>클래스란? (클래스/상속 디자인 패턴)</h4><p>클래스화란 데이터와 작동을 함께 잘 감싸서 캡슐화하는 것이 올바른 설계이다.<br>데이터에 적용 가능한 작동들을 메서드로 설계해야한다.<br>클래스에서는 어떤 작동이 담긴 메서드의 이름을 부모와 자식 클래스 모두 똑같이 공유하여 자식 클래스가 부모 클래스를 오바라이드하라고 권장한다.<br>그러나 자바스크립트에서는 이렇게 하면 불안정한 결과를 불러온다.</p>\n<p>나는 대부분 절차적 프로그래밍을 해왔다는 걸 알게 되었다. 상위 추상화 없이 단순히 다른 함수를 호출해서 사용하는 방법만 사용해왔고,<br>클래스의 경우는 라이브러리를 통해서만 사용했었다. 그래서 편리함은 알지만, 다뤄보지 않은 영역이라 이번 기회에 다시 정리하고자 한다.</p>\n<p>클래스는 복사 과정을 거쳐 객체 형태로 인스턴스화 한다.<br>인스턴스는 생성자가 해주는데 이 생성자는 미리 정보에 대한 변수를 초기화해준다.<br>항상 new 키워드를 앞에 붙여 생성자를 호출한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Button</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn1 = <span class=\"keyword\">new</span> Button();</span><br></pre></td></tr></table></figure>\n\n<p>오버라이드하기 전의 원본 메서드와 오버라이드 메서드가 다를 수도 있는데 이를 다형성(오버라이드)이라 한다.<br>inherits/super 라는 키워드로 사용하며, 부모/조상 중 어떤 메서드를 호출할지 결정하는 것도 다형성의 기법이다.</p>\n<p>자바스크립트엔 클래스란 개념 자체가 없고 오직 객체만 있다. 그래서 위와 같은 동작들은 자동으로 일어나지 않는다.<br>인스턴스화 해도 자동으로 복사가 되지않기 때문에 믹스인으로 클래스 복사기능을 흉내내었다.<br>이런 기능을 여러 라이브러리에서는 <code>extends()</code> 라 하고, 프로퍼티를 복사를 할 수 있게 제공된다.<br>믹스인 과정을 초콜릿 조각을 본인이 원하는 쿠키 반죽에 섞어 넣는 것에 비유한다. (이 말이 가장 기억에 남을거 같다)</p>\n<p>이렇게 일일히 복사(믹스인) 하더라도 다른 클래스 지향처럼 100%(인스턴스) 복사는 어렵다.</p>\n<h4 id=\"프로토타입이란-프로토타입-디자인-패턴\"><a href=\"#프로토타입이란-프로토타입-디자인-패턴\" class=\"headerlink\" title=\"프로토타입이란? (프로토타입 디자인 패턴)\"></a>프로토타입이란? (프로토타입 디자인 패턴)</h4><p>객체를 다른 객체에 연결한다. 수평적인 상태에서 위임이 되는 연결이다.<br>오버라이드 하기 딱 좋은 메서드 명칭보다는 각 객체의 작동방식을 설명하는 서술적인 명칭이 필요하다.<br>모든 레퍼런스가 확실히 존재한다면 양방향 위임은 가능하긴 하지만 무한 루프에 빠질 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn1 = <span class=\"built_in\">Object</span>.create(Button);</span><br><span class=\"line\">btn1.setup();</span><br></pre></td></tr></table></figure>\n\n<p>어떤 함수가 call(), apply(), bind() 메서드에 접근할 수 있는 건 함수 자신도 객체고 함수 객체 역시 <code>Function.prototype</code>에<br>[[Prototype]]이 연결되어 위임 가능한 메서드가 있어 가능한 것이다.<br><a href=\"https://infoscis.github.io/2018/01/25/ecmascript-6-expanded-object-functionality/\">infoscis</a>님 블로그에 예제가 잘 나와있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 [[Prototype]] 에 저장된 값을 변경한다.</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototyupeOf();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h4><ul>\n<li>YOU DON’T KNOW JS - this 와 객체 프로토타입, 비동기와 성능</li>\n</ul>\n"},{"layout":"post","title":"Git 이야기","date":"2019-08-07T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\n#### 안 쓰면 잊어버리는 Git 명령어\n\nGit은 만들고 나면 크게 문제가 없고, 충돌나지 않으면 별 문제없이 편하지만, 가끔 발생하는 문제에 대해서는 조치 방법을 위해 정리해둘 필요가 있다.\n\n**Git First**\n\n```html\n// git clone 할때, 레포가 없다하면.. 주소를 변경해주자..\nhttps://깃ID@github.com/레포주소 git clone XXX git init git add README.md git\ncommit -m 'first commit' git push origin master\n```\n\n**Git Branch**\n\n```html\ngit checkout -b develop(브랜치명) git add . git commit -m 'xxx' git push origin\ndevelop // hotfix git checkout master git checkout -b hotfix/YYYYMMDD\n```\n\n![post-2019-08-08-1](/img/post-2019-08-08-1.png){: width=\"100%\" height=\"100%\"}\n\ngitignore 파일을 만들고 추후에 파일들을 삭제하고 싶을땐, 항상 캐시문제로 stage 에 올라간 파일을 삭제하기가 어려웠다.\n[hopeless][hopeless-blog] 블로그에서 보면 제외할 폴더나 파일을 cached 된걸 삭제해줘야한다고 한다.\n\n**Git Ignore**\n\n```html\n// .gitignore 파일에 제외할 폴더 추가 // .idea/ 폴더 추가 git rm -r --cached .\ngit add . git commit -m 'ignore 수정'\n```\n\n**Git Rebase**\n\n```html\ngit rebase -i HEAD~2 // (직전 커밋한 갯수 포함) 병합할 갯수를 지정 pick -> s //\npick 을 squash (s) 로 변경 :wq\n```\n\n**Git Delete**\n\n```html\ngit branch -d feature/dev-1 git push origin -d feature/dev-1\n```\n\n**Git Conflict**\n\n```html\n// 1. IDE 를 활용한 해결 방법 Webstorm : VCS > Git > Resolve Confilicts\nTerminal: git merge --continue :qa // 2. 수동 해결 방법 // HEAD ~ === 영역이\n원본이므로 수정하고, 다시 commit 해준다. git add . git commit -m 'confilct\nresolved'\n```\n\n![post-2019-08-08-2](/img/post-2019-08-08-2.png){: width=\"100%\" height=\"100%\"}\n\n**Git Cherry Pick**\n\n```html\ngit checkout release git cherry-pick #135bc\n```\n\n**Git Merge**\n\n```html\ngit checkout A git merge B (Fast-forward : 합칠때 하나로 만든다.) git merge\n--no-ff B (합칠때 merge 커밋을 만든다) // 충돌난 파일 목록을 확인한다. git\nstatus // git merge 해결방법 <<<<<< HEAD # 현재 checkout 한 A 브랜치의 상태\n///// # 구분자 >>>>>> B # 병합하려는 대상 B mereg conflic 수정 후 add, commit\n진행하면 정상적으로 merge commit이 진행된다.\n```\n\n**Git Merge 취소하기**\n\n```html\ngit merge --abort\n```\n\n**Git Reset**\n해당 커밋을 push 했지만 되돌리고 싶을때 사용한다. (한번에 점프고하고 싶을때, 사용하지만 가급적이면 사용하지 않는다)\n\n```html\ngit reset --hard HEAD^\n```\n\n**Git Revert**\n해당 커밋만 취소하고 싶을 때 사용한다. WebStorm IDE 에서는 Revert 기능을 제공하고 있다. (우클릭 - Git - Revert)\n\n```html\ngit revert <되돌릴 커밋>\n```\n\n**Git Permission denied (Window10)**\n\n```html\n// 로컬에 저장된 계정이 있으면, 새 계정으로 다시 로그인을 해줘야한다. git config\n--global user.name git config --global user.email\n```\n\n**Git 취약점 해결방법**\n\n```html\nnpm audit fix\n```\n\n[hopeless-blog]: https://brunch.co.kr/@hopeless/9\n","source":"_posts/git.md","raw":"---\nlayout: post\ntitle: 'Git 이야기'\ndate: 2019-08-08\ncategories: setting\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\n#### 안 쓰면 잊어버리는 Git 명령어\n\nGit은 만들고 나면 크게 문제가 없고, 충돌나지 않으면 별 문제없이 편하지만, 가끔 발생하는 문제에 대해서는 조치 방법을 위해 정리해둘 필요가 있다.\n\n**Git First**\n\n```html\n// git clone 할때, 레포가 없다하면.. 주소를 변경해주자..\nhttps://깃ID@github.com/레포주소 git clone XXX git init git add README.md git\ncommit -m 'first commit' git push origin master\n```\n\n**Git Branch**\n\n```html\ngit checkout -b develop(브랜치명) git add . git commit -m 'xxx' git push origin\ndevelop // hotfix git checkout master git checkout -b hotfix/YYYYMMDD\n```\n\n![post-2019-08-08-1](/img/post-2019-08-08-1.png){: width=\"100%\" height=\"100%\"}\n\ngitignore 파일을 만들고 추후에 파일들을 삭제하고 싶을땐, 항상 캐시문제로 stage 에 올라간 파일을 삭제하기가 어려웠다.\n[hopeless][hopeless-blog] 블로그에서 보면 제외할 폴더나 파일을 cached 된걸 삭제해줘야한다고 한다.\n\n**Git Ignore**\n\n```html\n// .gitignore 파일에 제외할 폴더 추가 // .idea/ 폴더 추가 git rm -r --cached .\ngit add . git commit -m 'ignore 수정'\n```\n\n**Git Rebase**\n\n```html\ngit rebase -i HEAD~2 // (직전 커밋한 갯수 포함) 병합할 갯수를 지정 pick -> s //\npick 을 squash (s) 로 변경 :wq\n```\n\n**Git Delete**\n\n```html\ngit branch -d feature/dev-1 git push origin -d feature/dev-1\n```\n\n**Git Conflict**\n\n```html\n// 1. IDE 를 활용한 해결 방법 Webstorm : VCS > Git > Resolve Confilicts\nTerminal: git merge --continue :qa // 2. 수동 해결 방법 // HEAD ~ === 영역이\n원본이므로 수정하고, 다시 commit 해준다. git add . git commit -m 'confilct\nresolved'\n```\n\n![post-2019-08-08-2](/img/post-2019-08-08-2.png){: width=\"100%\" height=\"100%\"}\n\n**Git Cherry Pick**\n\n```html\ngit checkout release git cherry-pick #135bc\n```\n\n**Git Merge**\n\n```html\ngit checkout A git merge B (Fast-forward : 합칠때 하나로 만든다.) git merge\n--no-ff B (합칠때 merge 커밋을 만든다) // 충돌난 파일 목록을 확인한다. git\nstatus // git merge 해결방법 <<<<<< HEAD # 현재 checkout 한 A 브랜치의 상태\n///// # 구분자 >>>>>> B # 병합하려는 대상 B mereg conflic 수정 후 add, commit\n진행하면 정상적으로 merge commit이 진행된다.\n```\n\n**Git Merge 취소하기**\n\n```html\ngit merge --abort\n```\n\n**Git Reset**\n해당 커밋을 push 했지만 되돌리고 싶을때 사용한다. (한번에 점프고하고 싶을때, 사용하지만 가급적이면 사용하지 않는다)\n\n```html\ngit reset --hard HEAD^\n```\n\n**Git Revert**\n해당 커밋만 취소하고 싶을 때 사용한다. WebStorm IDE 에서는 Revert 기능을 제공하고 있다. (우클릭 - Git - Revert)\n\n```html\ngit revert <되돌릴 커밋>\n```\n\n**Git Permission denied (Window10)**\n\n```html\n// 로컬에 저장된 계정이 있으면, 새 계정으로 다시 로그인을 해줘야한다. git config\n--global user.name git config --global user.email\n```\n\n**Git 취약점 해결방법**\n\n```html\nnpm audit fix\n```\n\n[hopeless-blog]: https://brunch.co.kr/@hopeless/9\n","slug":"git","published":1,"updated":"2021-09-24T05:32:21.457Z","photos":[],"link":"","_id":"cktxxl2i6000cvb8zeuyxatby","content":"<h4 id=\"안-쓰면-잊어버리는-Git-명령어\"><a href=\"#안-쓰면-잊어버리는-Git-명령어\" class=\"headerlink\" title=\"안 쓰면 잊어버리는 Git 명령어\"></a>안 쓰면 잊어버리는 Git 명령어</h4><p>Git은 만들고 나면 크게 문제가 없고, 충돌나지 않으면 별 문제없이 편하지만, 가끔 발생하는 문제에 대해서는 조치 방법을 위해 정리해둘 필요가 있다.</p>\n<p><strong>Git First</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// git clone 할때, 레포가 없다하면.. 주소를 변경해주자..</span><br><span class=\"line\">https://깃ID@github.com/레포주소 git clone XXX git init git add README.md git</span><br><span class=\"line\">commit -m &#x27;first commit&#x27; git push origin master</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Branch</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b develop(브랜치명) git add . git commit -m &#x27;xxx&#x27; git push origin</span><br><span class=\"line\">develop // hotfix git checkout master git checkout -b hotfix/YYYYMMDD</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/post-2019-08-08-1.png\" alt=\"post-2019-08-08-1\">{: width=”100%” height=”100%”}</p>\n<p>gitignore 파일을 만들고 추후에 파일들을 삭제하고 싶을땐, 항상 캐시문제로 stage 에 올라간 파일을 삭제하기가 어려웠다.<br><a href=\"https://brunch.co.kr/@hopeless/9\">hopeless</a> 블로그에서 보면 제외할 폴더나 파일을 cached 된걸 삭제해줘야한다고 한다.</p>\n<p><strong>Git Ignore</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .gitignore 파일에 제외할 폴더 추가 // .idea/ 폴더 추가 git rm -r --cached .</span><br><span class=\"line\">git add . git commit -m &#x27;ignore 수정&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Rebase</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i HEAD~2 // (직전 커밋한 갯수 포함) 병합할 갯수를 지정 pick -&gt; s //</span><br><span class=\"line\">pick 을 squash (s) 로 변경 :wq</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Delete</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d feature/dev-1 git push origin -d feature/dev-1</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Conflict</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. IDE 를 활용한 해결 방법 Webstorm : VCS &gt; Git &gt; Resolve Confilicts</span><br><span class=\"line\">Terminal: git merge --continue :qa // 2. 수동 해결 방법 // HEAD ~ === 영역이</span><br><span class=\"line\">원본이므로 수정하고, 다시 commit 해준다. git add . git commit -m &#x27;confilct</span><br><span class=\"line\">resolved&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/post-2019-08-08-2.png\" alt=\"post-2019-08-08-2\">{: width=”100%” height=”100%”}</p>\n<p><strong>Git Cherry Pick</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout release git cherry-pick #135bc</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Merge</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout A git merge B (Fast-forward : 합칠때 하나로 만든다.) git merge</span><br><span class=\"line\">--no-ff B (합칠때 merge 커밋을 만든다) // 충돌난 파일 목록을 확인한다. git</span><br><span class=\"line\">status // git merge 해결방법 &lt;&lt;&lt;&lt;&lt;&lt; HEAD # 현재 checkout 한 A 브랜치의 상태</span><br><span class=\"line\">///// # 구분자 &gt;&gt;&gt;&gt;&gt;&gt; B # 병합하려는 대상 B mereg conflic 수정 후 add, commit</span><br><span class=\"line\">진행하면 정상적으로 merge commit이 진행된다.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Merge 취소하기</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Reset</strong><br>해당 커밋을 push 했지만 되돌리고 싶을때 사용한다. (한번에 점프고하고 싶을때, 사용하지만 가급적이면 사용하지 않는다)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Revert</strong><br>해당 커밋만 취소하고 싶을 때 사용한다. WebStorm IDE 에서는 Revert 기능을 제공하고 있다. (우클릭 - Git - Revert)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;되돌릴 커밋&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Permission denied (Window10)</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 로컬에 저장된 계정이 있으면, 새 계정으로 다시 로그인을 해줘야한다. git config</span><br><span class=\"line\">--global user.name git config --global user.email</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git 취약점 해결방법</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm audit fix</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"안-쓰면-잊어버리는-Git-명령어\"><a href=\"#안-쓰면-잊어버리는-Git-명령어\" class=\"headerlink\" title=\"안 쓰면 잊어버리는 Git 명령어\"></a>안 쓰면 잊어버리는 Git 명령어</h4><p>Git은 만들고 나면 크게 문제가 없고, 충돌나지 않으면 별 문제없이 편하지만, 가끔 발생하는 문제에 대해서는 조치 방법을 위해 정리해둘 필요가 있다.</p>\n<p><strong>Git First</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// git clone 할때, 레포가 없다하면.. 주소를 변경해주자..</span><br><span class=\"line\">https://깃ID@github.com/레포주소 git clone XXX git init git add README.md git</span><br><span class=\"line\">commit -m &#x27;first commit&#x27; git push origin master</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Branch</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b develop(브랜치명) git add . git commit -m &#x27;xxx&#x27; git push origin</span><br><span class=\"line\">develop // hotfix git checkout master git checkout -b hotfix/YYYYMMDD</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/post-2019-08-08-1.png\" alt=\"post-2019-08-08-1\">{: width=”100%” height=”100%”}</p>\n<p>gitignore 파일을 만들고 추후에 파일들을 삭제하고 싶을땐, 항상 캐시문제로 stage 에 올라간 파일을 삭제하기가 어려웠다.<br><a href=\"https://brunch.co.kr/@hopeless/9\">hopeless</a> 블로그에서 보면 제외할 폴더나 파일을 cached 된걸 삭제해줘야한다고 한다.</p>\n<p><strong>Git Ignore</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .gitignore 파일에 제외할 폴더 추가 // .idea/ 폴더 추가 git rm -r --cached .</span><br><span class=\"line\">git add . git commit -m &#x27;ignore 수정&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Rebase</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase -i HEAD~2 // (직전 커밋한 갯수 포함) 병합할 갯수를 지정 pick -&gt; s //</span><br><span class=\"line\">pick 을 squash (s) 로 변경 :wq</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Delete</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d feature/dev-1 git push origin -d feature/dev-1</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Conflict</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. IDE 를 활용한 해결 방법 Webstorm : VCS &gt; Git &gt; Resolve Confilicts</span><br><span class=\"line\">Terminal: git merge --continue :qa // 2. 수동 해결 방법 // HEAD ~ === 영역이</span><br><span class=\"line\">원본이므로 수정하고, 다시 commit 해준다. git add . git commit -m &#x27;confilct</span><br><span class=\"line\">resolved&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/post-2019-08-08-2.png\" alt=\"post-2019-08-08-2\">{: width=”100%” height=”100%”}</p>\n<p><strong>Git Cherry Pick</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout release git cherry-pick #135bc</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Merge</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout A git merge B (Fast-forward : 합칠때 하나로 만든다.) git merge</span><br><span class=\"line\">--no-ff B (합칠때 merge 커밋을 만든다) // 충돌난 파일 목록을 확인한다. git</span><br><span class=\"line\">status // git merge 해결방법 &lt;&lt;&lt;&lt;&lt;&lt; HEAD # 현재 checkout 한 A 브랜치의 상태</span><br><span class=\"line\">///// # 구분자 &gt;&gt;&gt;&gt;&gt;&gt; B # 병합하려는 대상 B mereg conflic 수정 후 add, commit</span><br><span class=\"line\">진행하면 정상적으로 merge commit이 진행된다.</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Merge 취소하기</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge --abort</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Reset</strong><br>해당 커밋을 push 했지만 되돌리고 싶을때 사용한다. (한번에 점프고하고 싶을때, 사용하지만 가급적이면 사용하지 않는다)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Revert</strong><br>해당 커밋만 취소하고 싶을 때 사용한다. WebStorm IDE 에서는 Revert 기능을 제공하고 있다. (우클릭 - Git - Revert)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;되돌릴 커밋&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git Permission denied (Window10)</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 로컬에 저장된 계정이 있으면, 새 계정으로 다시 로그인을 해줘야한다. git config</span><br><span class=\"line\">--global user.name git config --global user.email</span><br></pre></td></tr></table></figure>\n\n<p><strong>Git 취약점 해결방법</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm audit fix</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"Javascript Event 이야기","date":"2019-08-21T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### 이벤트 리스너를 등록해서 사용할 때, `removeEventListener` 가 필요할까?\n전체 화면에서 히든 페이지가 필요해져서 window 객체에 keyup 이벤트를 등록하는 방법으로 문제를 해결한 경우가 있는데, \n이 이벤트를 제거해줄 필요가 있는지에 대해서 고민이 되었다.   \n\n\n#### 이벤트 리스너의 this 는 어떻게 인지할까?\nthis 를 잘 바꿔줄 때, 필요한 메서드가 call, apply, bind 이다. \n \n[mygumi][mygumi]님과 [zerocho][zerocho]님의 글이 도움이 되었다. \ncall, apply 는 함수를 호출하는 거고, 인자를 넘기고 반환값을 돌려받는 창구가 있을때 주로 사용한다.\ncall 은 파라미터 중 첫번째 인자를, 내부에서 사용할 this 로 만들어준다. \napply 도 마찬가지이고, 대신에 파라미터를 배열로 넘긴다. \nbind 는 this 만 바꾸고 호출하지는 않는다. 원본 함수를 호출하도록 하드 코딩된 새로운 함수를 생성한다. \n이건 다른말로 콜백 형식을 만들어줄 수 있다.\n\n\n``` js\nfunction Person() { \n    this.name = this.name || \"default\"; this.authority = \"guest\";\n    return this.name + \" is \" + this.authority; \n}\n\n// call 은 새 함수로 만들어서 호출한다.\nPerson.call({name: \"bill\"}); // \"bill is guest\"\n\n// 1. bind 는 this을 교체해준다.\nconst userInfo = Person.bind({name: \"test\"});  // undefined\n// 2. 함수를 호출한다.\nuserInfo(); // \"test is guest\"\n\n// call 은 새 함수로 만들어서 호출한다.\nconst userInfo3 = Person.call({name: \"test3\"});  // undefined\nuserInfo3; // \"test3 is guest\"\n```\n\n#### 클로저는 어떻게 사용할까?\n생명주기가 끝난 함수의 변수를 외부 함수에서 호출하는 걸 일컬어 클로저라 한다. \n클래스로 만든 내부 이벤트를 외부에서 제어를 하려고 고민을 하다가 클로저를 응용할 수 있겠다 싶었다.\n위에 bind 는 스코프만 바뀌는 거고, call 은 원본 함수를 호출할 수 있는 새 함수로 만들어준다.   \n\n```js\nfunction funcA(value1, value2) {\n  console.log(`value: ${value1} ${value2}`)\n}\n\nfuncB = () => funcA.call(this, 2, 3) \nfuncB() // value: 2 3\n``` \n\n[mygumi]: https://mygumi.tistory.com/332\n[zerocho]: https://www.zerocho.com/category/JavaScript/post/57433645a48729787807c3fd","source":"_posts/event.md","raw":"---\nlayout: post\ntitle:  \"Javascript Event 이야기\"\ndate:   2019-08-22\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### 이벤트 리스너를 등록해서 사용할 때, `removeEventListener` 가 필요할까?\n전체 화면에서 히든 페이지가 필요해져서 window 객체에 keyup 이벤트를 등록하는 방법으로 문제를 해결한 경우가 있는데, \n이 이벤트를 제거해줄 필요가 있는지에 대해서 고민이 되었다.   \n\n\n#### 이벤트 리스너의 this 는 어떻게 인지할까?\nthis 를 잘 바꿔줄 때, 필요한 메서드가 call, apply, bind 이다. \n \n[mygumi][mygumi]님과 [zerocho][zerocho]님의 글이 도움이 되었다. \ncall, apply 는 함수를 호출하는 거고, 인자를 넘기고 반환값을 돌려받는 창구가 있을때 주로 사용한다.\ncall 은 파라미터 중 첫번째 인자를, 내부에서 사용할 this 로 만들어준다. \napply 도 마찬가지이고, 대신에 파라미터를 배열로 넘긴다. \nbind 는 this 만 바꾸고 호출하지는 않는다. 원본 함수를 호출하도록 하드 코딩된 새로운 함수를 생성한다. \n이건 다른말로 콜백 형식을 만들어줄 수 있다.\n\n\n``` js\nfunction Person() { \n    this.name = this.name || \"default\"; this.authority = \"guest\";\n    return this.name + \" is \" + this.authority; \n}\n\n// call 은 새 함수로 만들어서 호출한다.\nPerson.call({name: \"bill\"}); // \"bill is guest\"\n\n// 1. bind 는 this을 교체해준다.\nconst userInfo = Person.bind({name: \"test\"});  // undefined\n// 2. 함수를 호출한다.\nuserInfo(); // \"test is guest\"\n\n// call 은 새 함수로 만들어서 호출한다.\nconst userInfo3 = Person.call({name: \"test3\"});  // undefined\nuserInfo3; // \"test3 is guest\"\n```\n\n#### 클로저는 어떻게 사용할까?\n생명주기가 끝난 함수의 변수를 외부 함수에서 호출하는 걸 일컬어 클로저라 한다. \n클래스로 만든 내부 이벤트를 외부에서 제어를 하려고 고민을 하다가 클로저를 응용할 수 있겠다 싶었다.\n위에 bind 는 스코프만 바뀌는 거고, call 은 원본 함수를 호출할 수 있는 새 함수로 만들어준다.   \n\n```js\nfunction funcA(value1, value2) {\n  console.log(`value: ${value1} ${value2}`)\n}\n\nfuncB = () => funcA.call(this, 2, 3) \nfuncB() // value: 2 3\n``` \n\n[mygumi]: https://mygumi.tistory.com/332\n[zerocho]: https://www.zerocho.com/category/JavaScript/post/57433645a48729787807c3fd","slug":"event","published":1,"updated":"2021-09-24T05:32:14.596Z","photos":[],"link":"","_id":"cktxxl2i7000fvb8z2lijaa0r","content":"<h4 id=\"이벤트-리스너를-등록해서-사용할-때-removeEventListener-가-필요할까\"><a href=\"#이벤트-리스너를-등록해서-사용할-때-removeEventListener-가-필요할까\" class=\"headerlink\" title=\"이벤트 리스너를 등록해서 사용할 때, removeEventListener 가 필요할까?\"></a>이벤트 리스너를 등록해서 사용할 때, <code>removeEventListener</code> 가 필요할까?</h4><p>전체 화면에서 히든 페이지가 필요해져서 window 객체에 keyup 이벤트를 등록하는 방법으로 문제를 해결한 경우가 있는데,<br>이 이벤트를 제거해줄 필요가 있는지에 대해서 고민이 되었다.   </p>\n<h4 id=\"이벤트-리스너의-this-는-어떻게-인지할까\"><a href=\"#이벤트-리스너의-this-는-어떻게-인지할까\" class=\"headerlink\" title=\"이벤트 리스너의 this 는 어떻게 인지할까?\"></a>이벤트 리스너의 this 는 어떻게 인지할까?</h4><p>this 를 잘 바꿔줄 때, 필요한 메서드가 call, apply, bind 이다. </p>\n<p><a href=\"https://mygumi.tistory.com/332\">mygumi</a>님과 <a href=\"https://www.zerocho.com/category/JavaScript/post/57433645a48729787807c3fd\">zerocho</a>님의 글이 도움이 되었다.<br>call, apply 는 함수를 호출하는 거고, 인자를 넘기고 반환값을 돌려받는 창구가 있을때 주로 사용한다.<br>call 은 파라미터 중 첫번째 인자를, 내부에서 사용할 this 로 만들어준다.<br>apply 도 마찬가지이고, 대신에 파라미터를 배열로 넘긴다.<br>bind 는 this 만 바꾸고 호출하지는 않는다. 원본 함수를 호출하도록 하드 코딩된 새로운 함수를 생성한다.<br>이건 다른말로 콜백 형식을 만들어줄 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"built_in\">this</span>.name || <span class=\"string\">&quot;default&quot;</span>; <span class=\"built_in\">this</span>.authority = <span class=\"string\">&quot;guest&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; is &quot;</span> + <span class=\"built_in\">this</span>.authority; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call 은 새 함수로 만들어서 호출한다.</span></span><br><span class=\"line\">Person.call(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;bill&quot;</span>&#125;); <span class=\"comment\">// &quot;bill is guest&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. bind 는 this을 교체해준다.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = Person.bind(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;test&quot;</span>&#125;);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 함수를 호출한다.</span></span><br><span class=\"line\">userInfo(); <span class=\"comment\">// &quot;test is guest&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call 은 새 함수로 만들어서 호출한다.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo3 = Person.call(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;test3&quot;</span>&#125;);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">userInfo3; <span class=\"comment\">// &quot;test3 is guest&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"클로저는-어떻게-사용할까\"><a href=\"#클로저는-어떻게-사용할까\" class=\"headerlink\" title=\"클로저는 어떻게 사용할까?\"></a>클로저는 어떻게 사용할까?</h4><p>생명주기가 끝난 함수의 변수를 외부 함수에서 호출하는 걸 일컬어 클로저라 한다.<br>클래스로 만든 내부 이벤트를 외부에서 제어를 하려고 고민을 하다가 클로저를 응용할 수 있겠다 싶었다.<br>위에 bind 는 스코프만 바뀌는 거고, call 은 원본 함수를 호출할 수 있는 새 함수로 만들어준다.   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">value1, value2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`value: <span class=\"subst\">$&#123;value1&#125;</span> <span class=\"subst\">$&#123;value2&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">funcB = <span class=\"function\">() =&gt;</span> funcA.call(<span class=\"built_in\">this</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) </span><br><span class=\"line\">funcB() <span class=\"comment\">// value: 2 3</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"이벤트-리스너를-등록해서-사용할-때-removeEventListener-가-필요할까\"><a href=\"#이벤트-리스너를-등록해서-사용할-때-removeEventListener-가-필요할까\" class=\"headerlink\" title=\"이벤트 리스너를 등록해서 사용할 때, removeEventListener 가 필요할까?\"></a>이벤트 리스너를 등록해서 사용할 때, <code>removeEventListener</code> 가 필요할까?</h4><p>전체 화면에서 히든 페이지가 필요해져서 window 객체에 keyup 이벤트를 등록하는 방법으로 문제를 해결한 경우가 있는데,<br>이 이벤트를 제거해줄 필요가 있는지에 대해서 고민이 되었다.   </p>\n<h4 id=\"이벤트-리스너의-this-는-어떻게-인지할까\"><a href=\"#이벤트-리스너의-this-는-어떻게-인지할까\" class=\"headerlink\" title=\"이벤트 리스너의 this 는 어떻게 인지할까?\"></a>이벤트 리스너의 this 는 어떻게 인지할까?</h4><p>this 를 잘 바꿔줄 때, 필요한 메서드가 call, apply, bind 이다. </p>\n<p><a href=\"https://mygumi.tistory.com/332\">mygumi</a>님과 <a href=\"https://www.zerocho.com/category/JavaScript/post/57433645a48729787807c3fd\">zerocho</a>님의 글이 도움이 되었다.<br>call, apply 는 함수를 호출하는 거고, 인자를 넘기고 반환값을 돌려받는 창구가 있을때 주로 사용한다.<br>call 은 파라미터 중 첫번째 인자를, 내부에서 사용할 this 로 만들어준다.<br>apply 도 마찬가지이고, 대신에 파라미터를 배열로 넘긴다.<br>bind 는 this 만 바꾸고 호출하지는 않는다. 원본 함수를 호출하도록 하드 코딩된 새로운 함수를 생성한다.<br>이건 다른말로 콜백 형식을 만들어줄 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"built_in\">this</span>.name || <span class=\"string\">&quot;default&quot;</span>; <span class=\"built_in\">this</span>.authority = <span class=\"string\">&quot;guest&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; is &quot;</span> + <span class=\"built_in\">this</span>.authority; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call 은 새 함수로 만들어서 호출한다.</span></span><br><span class=\"line\">Person.call(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;bill&quot;</span>&#125;); <span class=\"comment\">// &quot;bill is guest&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. bind 는 this을 교체해준다.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo = Person.bind(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;test&quot;</span>&#125;);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 함수를 호출한다.</span></span><br><span class=\"line\">userInfo(); <span class=\"comment\">// &quot;test is guest&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call 은 새 함수로 만들어서 호출한다.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInfo3 = Person.call(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;test3&quot;</span>&#125;);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">userInfo3; <span class=\"comment\">// &quot;test3 is guest&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"클로저는-어떻게-사용할까\"><a href=\"#클로저는-어떻게-사용할까\" class=\"headerlink\" title=\"클로저는 어떻게 사용할까?\"></a>클로저는 어떻게 사용할까?</h4><p>생명주기가 끝난 함수의 변수를 외부 함수에서 호출하는 걸 일컬어 클로저라 한다.<br>클래스로 만든 내부 이벤트를 외부에서 제어를 하려고 고민을 하다가 클로저를 응용할 수 있겠다 싶었다.<br>위에 bind 는 스코프만 바뀌는 거고, call 은 원본 함수를 호출할 수 있는 새 함수로 만들어준다.   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">value1, value2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`value: <span class=\"subst\">$&#123;value1&#125;</span> <span class=\"subst\">$&#123;value2&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">funcB = <span class=\"function\">() =&gt;</span> funcA.call(<span class=\"built_in\">this</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) </span><br><span class=\"line\">funcB() <span class=\"comment\">// value: 2 3</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"good-image","date":"2021-09-13T03:59:37.000Z","comments":0,"thumbnail":"/images/thumnail/study.png","_content":"\n![image](/images/thumnail/study.png)\nHello World!!\n","source":"_posts/good-image.md","raw":"---\ntitle: good-image\ndate: 2021-09-13 12:59:37\ntags:\ncomments: false\nthumbnail: /images/thumnail/study.png\n---\n\n![image](/images/thumnail/study.png)\nHello World!!\n","slug":"good-image","published":1,"updated":"2021-09-24T05:30:14.478Z","layout":"post","photos":[],"link":"","_id":"cktxxl2i8000hvb8z9n3hepk7","content":"<p><img src=\"/images/thumnail/study.png\" alt=\"image\"><br>Hello World!!</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/thumnail/study.png\" alt=\"image\"><br>Hello World!!</p>\n"},{"layout":"post","title":"Graphql 적용기","date":"2019-10-15T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### GraphQL \nGraphQL 은 상당히 뜨고 있어서 항상 진행해보자.. 싶었던 방법인데 DB도 설치해야하고 복잡할거 같아서 진행을 못하고 있었다.\n찾아보니 Node.js Express 로 구현한 [yuddomack][yuddomack] 님의 블로그를 보고 진행을 해볼 수 있었다. \n공식문서([GraphQL][GraphQL])에서는 저렇게 쓰면 되겠구나 싶었던 방법이 구체적인 웹으로도 쉽게 조회를 할 수 있게 제공된다.\n구현부를 express 에 작성하고, 간단한 조회를 하는 방법이 있고, 실제 DB와 연결해서 하는 방법을 계속 진행해볼까 한다. \nDB는 서버에 설치해야하는 번거로움이 있으니.. [kamang][kamang] 님의 블로그처럼 SqlLite로 프로젝트에 저장될 수 있게 만들어 볼 예정이다.\n\n\n[GraphQL]: https://graphql.org/learn/\n[Express]: https://expressjs.com/ko/\n[yuddomack]: https://yuddomack.tistory.com/entry/expressgraphql-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0Hello-World-Guide\n[kamang]: https://kamang-it.tistory.com/entry/NodeJSExpressSQLiteNodejs-express%EC%83%81%EC%97%90%EC%84%9C-SQLite%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85%EC%9D%84-%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\n","source":"_posts/graphql.md","raw":"---\nlayout: post\ntitle:  \"Graphql 적용기\"\ndate:   2019-10-16\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### GraphQL \nGraphQL 은 상당히 뜨고 있어서 항상 진행해보자.. 싶었던 방법인데 DB도 설치해야하고 복잡할거 같아서 진행을 못하고 있었다.\n찾아보니 Node.js Express 로 구현한 [yuddomack][yuddomack] 님의 블로그를 보고 진행을 해볼 수 있었다. \n공식문서([GraphQL][GraphQL])에서는 저렇게 쓰면 되겠구나 싶었던 방법이 구체적인 웹으로도 쉽게 조회를 할 수 있게 제공된다.\n구현부를 express 에 작성하고, 간단한 조회를 하는 방법이 있고, 실제 DB와 연결해서 하는 방법을 계속 진행해볼까 한다. \nDB는 서버에 설치해야하는 번거로움이 있으니.. [kamang][kamang] 님의 블로그처럼 SqlLite로 프로젝트에 저장될 수 있게 만들어 볼 예정이다.\n\n\n[GraphQL]: https://graphql.org/learn/\n[Express]: https://expressjs.com/ko/\n[yuddomack]: https://yuddomack.tistory.com/entry/expressgraphql-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0Hello-World-Guide\n[kamang]: https://kamang-it.tistory.com/entry/NodeJSExpressSQLiteNodejs-express%EC%83%81%EC%97%90%EC%84%9C-SQLite%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85%EC%9D%84-%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\n","slug":"graphql","published":1,"updated":"2021-09-24T05:31:24.455Z","photos":[],"link":"","_id":"cktxxl2i9000kvb8z3ocdf5wr","content":"<h4 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL\"></a>GraphQL</h4><p>GraphQL 은 상당히 뜨고 있어서 항상 진행해보자.. 싶었던 방법인데 DB도 설치해야하고 복잡할거 같아서 진행을 못하고 있었다.<br>찾아보니 Node.js Express 로 구현한 <a href=\"https://yuddomack.tistory.com/entry/expressgraphql-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0Hello-World-Guide\">yuddomack</a> 님의 블로그를 보고 진행을 해볼 수 있었다.<br>공식문서(<a href=\"https://graphql.org/learn/\">GraphQL</a>)에서는 저렇게 쓰면 되겠구나 싶었던 방법이 구체적인 웹으로도 쉽게 조회를 할 수 있게 제공된다.<br>구현부를 express 에 작성하고, 간단한 조회를 하는 방법이 있고, 실제 DB와 연결해서 하는 방법을 계속 진행해볼까 한다.<br>DB는 서버에 설치해야하는 번거로움이 있으니.. <a href=\"https://kamang-it.tistory.com/entry/NodeJSExpressSQLiteNodejs-express%EC%83%81%EC%97%90%EC%84%9C-SQLite%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85%EC%9D%84-%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">kamang</a> 님의 블로그처럼 SqlLite로 프로젝트에 저장될 수 있게 만들어 볼 예정이다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL\"></a>GraphQL</h4><p>GraphQL 은 상당히 뜨고 있어서 항상 진행해보자.. 싶었던 방법인데 DB도 설치해야하고 복잡할거 같아서 진행을 못하고 있었다.<br>찾아보니 Node.js Express 로 구현한 <a href=\"https://yuddomack.tistory.com/entry/expressgraphql-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0Hello-World-Guide\">yuddomack</a> 님의 블로그를 보고 진행을 해볼 수 있었다.<br>공식문서(<a href=\"https://graphql.org/learn/\">GraphQL</a>)에서는 저렇게 쓰면 되겠구나 싶었던 방법이 구체적인 웹으로도 쉽게 조회를 할 수 있게 제공된다.<br>구현부를 express 에 작성하고, 간단한 조회를 하는 방법이 있고, 실제 DB와 연결해서 하는 방법을 계속 진행해볼까 한다.<br>DB는 서버에 설치해야하는 번거로움이 있으니.. <a href=\"https://kamang-it.tistory.com/entry/NodeJSExpressSQLiteNodejs-express%EC%83%81%EC%97%90%EC%84%9C-SQLite%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85%EC%9D%84-%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">kamang</a> 님의 블로그처럼 SqlLite로 프로젝트에 저장될 수 있게 만들어 볼 예정이다.</p>\n"},{"layout":"post","title":"Jekyll을 이용한 github 블로그 생성하기","date":"2019-08-06T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\n#### 환경설정하기\n\nJekyll은 markdown(\\*.md) 파일을 생성하면 웹페이지로 서비스를 할 수 있는 정적 사이트 생성기이다.\n\nRuby를 환경에서 동작하기 때문에 윈도우에도 Ruby를 설치 해야한다.\nRubyInstaller for Windows 를 설치하는데 (Devkit 가 포함된 버전)으로 설치하면 된다.\nRuby+Devkit 2.5.5-1 (x64) 로 설치를 진행했다.\n\n[Ruby Installer](https://rubyinstaller.org/downloads/)\n\n---\n\n#### 사이트 생성하기\n\n[Jekyll 공식사이트(한글 번역)](https://jekyllrb-ko.github.io/docs/windows/)\n\n```js\n// jekyll 설치\ngem install jekyll bundler\n\n// 사이트 생성\njekyll new my-awesome-site\ncd my-awesome-site\n\n// jekyll 실행 (window)\nmy-awesome-site $jekyll serve --watch\n\n// jekyll 실행 (mac)\nbundle exec jekyll serve --watch\n```\n\n![post-2019-08-07-2](/img/post-2019-08-07-2.png){: width=\"100%\" height=\"100%\"}\n\n---\n\n#### 글 작성하기\n\n마크다운 파일명과 상단 텍스트는 규칙대로 만들어주고 저장을 하게 되면 home 에 리스트가 나타난다.\n\n```js\n_post / yyyy - mm - dd - title.md;\n```\n\n---\n\n#### 테마 적용하기\n\n제공하는 테마 중에서 댓글도 없고, 심플한 디자인인 'jekyll-theme-clean-blog' 가 이 테마를 적용해보았다.\n\n```js\n// install\ngem \"jekyll-theme-clean-blog\"\n\n// _config.yml\ntheme: jekyll-theme-clean-blog\n```\n\n새로 적용하면 아주 이쁘게 잘 보이는데.. 영문일 때 폰트만 이뻐서.. 한글 폰트는 다른걸 사용하고 싶어졌다.\n![post-2019-08-07-1](/img/post-2019-08-07-1.png){: width=\"100%\" height=\"100%\"}\n\n---\n\n#### 폰트 적용하기\n\nJekyll의 수많은 테마는 변경없이 사용할 수 있도록 제공되지만..\n블로그 테마를 변경하고 싶지 않고.. 커스텀하게 적용할 방법을 찾게 될 수 밖에 없는거 같다.\n\n그래서 [Clean Blog Jekyll][cleanblog] 사이트에서 소스를 받아 분석을 시작했다.\n\n우선 스타일 관련부분을 모두 가져와서 내 프로젝트에 그대로 덮어씌우고, 빌드를 했더니 \\_site 에 로컬 파일들이 들어갔다.\n\n```js\n// 개별로 가져온 파일\n_sass / styles.scss;\nassets / vendor / startbootstrap - clean - blog;\nassets / main.css;\n```\n\n폰트는 구글에서 기본 제공한다는 폰트 중에 이쁜 나눔고딕체를 import 해서 사용했다.\n\n```js\n// _sass/styles.scss\n/* Import Google Web Font */\n@import url(http://fonts.googleapis.com/css?family=Nanum+Gothic:400,700);\n\n/* Style Blog Font */\nh1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure {\n  margin-bottom: 15px;\n  font-family: 'Nanum Gothic', sans-serif;\n}\n```\n\n---\n\n#### Code Block 스타일 적용하기\n\n폰트를 넣고 보니.. 코드 블럭이 이쁘지가 않았다.\n마크다운 문서에 소스코드가 저렇게 안 이쁘다니.. 다시 스타일을 찾기 시작했다.\n\n[OneDarkTheme][onedarktheme]에 `syntax-one-dark.css` 을 가져왔다.\nassets/css/syntax.css 에 스타일을 적용하고, import 해서 사용했다.\n\n```js\n// _sass/styles.scss\n/* Import Highlight */\n@import \"../assets/css/syntax.css\";\n```\n\n테마 요소의 다른 부분은 건드리지 않았고, 스타일만 앞으로 계속 커스텀하게 바꿔봐야겠다.\n\n#### Git Repository 블로그 적용하기\n\nRepository에 등록하면 프로젝트 명(git_id.github.io) 로 등록을 하면 바로 깃허브에서 확인을 할 수 있다.\n기본 jekyll 만 설치하면 바로 확인이 가능하다고 하는데..\n공식으로 지정된 테마만 등록이 가능하다고.. 커스텀 테마의 경우엔 404 ERROR 가 발생했다.\n\n결국엔 필요한 파일의 일부가 아니라 전부를 내 프로젝트에 추가했다.\n그리고 시작된 jekyll 공부..\n\njekyll 에서 사용되는 문법은 Ruby로 작성된 Liquid 템플릿 언어이다.<br/>\n[goodGid][goodgid] 님의 블로그가 정리되어있고, 이 언어를 사용해서 html을 만들고\nlayout 탬플릿 파일이 동적 파일들(\\*.md)을 로드해서 정적파일로 변환해준다.\n\n[cleanblog]: https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll\n[onedarktheme]: https://github.com/eungbean/Atom-OneDarkTheme-4-Jekyll\n[goodgid]: https://goodgid.github.io/What-is-Liquid-Grammer/\n","source":"_posts/install-jekyll.md","raw":"---\nlayout: post\ntitle: 'Jekyll을 이용한 github 블로그 생성하기'\ndate: 2019-08-07\ncategories: setting\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\n#### 환경설정하기\n\nJekyll은 markdown(\\*.md) 파일을 생성하면 웹페이지로 서비스를 할 수 있는 정적 사이트 생성기이다.\n\nRuby를 환경에서 동작하기 때문에 윈도우에도 Ruby를 설치 해야한다.\nRubyInstaller for Windows 를 설치하는데 (Devkit 가 포함된 버전)으로 설치하면 된다.\nRuby+Devkit 2.5.5-1 (x64) 로 설치를 진행했다.\n\n[Ruby Installer](https://rubyinstaller.org/downloads/)\n\n---\n\n#### 사이트 생성하기\n\n[Jekyll 공식사이트(한글 번역)](https://jekyllrb-ko.github.io/docs/windows/)\n\n```js\n// jekyll 설치\ngem install jekyll bundler\n\n// 사이트 생성\njekyll new my-awesome-site\ncd my-awesome-site\n\n// jekyll 실행 (window)\nmy-awesome-site $jekyll serve --watch\n\n// jekyll 실행 (mac)\nbundle exec jekyll serve --watch\n```\n\n![post-2019-08-07-2](/img/post-2019-08-07-2.png){: width=\"100%\" height=\"100%\"}\n\n---\n\n#### 글 작성하기\n\n마크다운 파일명과 상단 텍스트는 규칙대로 만들어주고 저장을 하게 되면 home 에 리스트가 나타난다.\n\n```js\n_post / yyyy - mm - dd - title.md;\n```\n\n---\n\n#### 테마 적용하기\n\n제공하는 테마 중에서 댓글도 없고, 심플한 디자인인 'jekyll-theme-clean-blog' 가 이 테마를 적용해보았다.\n\n```js\n// install\ngem \"jekyll-theme-clean-blog\"\n\n// _config.yml\ntheme: jekyll-theme-clean-blog\n```\n\n새로 적용하면 아주 이쁘게 잘 보이는데.. 영문일 때 폰트만 이뻐서.. 한글 폰트는 다른걸 사용하고 싶어졌다.\n![post-2019-08-07-1](/img/post-2019-08-07-1.png){: width=\"100%\" height=\"100%\"}\n\n---\n\n#### 폰트 적용하기\n\nJekyll의 수많은 테마는 변경없이 사용할 수 있도록 제공되지만..\n블로그 테마를 변경하고 싶지 않고.. 커스텀하게 적용할 방법을 찾게 될 수 밖에 없는거 같다.\n\n그래서 [Clean Blog Jekyll][cleanblog] 사이트에서 소스를 받아 분석을 시작했다.\n\n우선 스타일 관련부분을 모두 가져와서 내 프로젝트에 그대로 덮어씌우고, 빌드를 했더니 \\_site 에 로컬 파일들이 들어갔다.\n\n```js\n// 개별로 가져온 파일\n_sass / styles.scss;\nassets / vendor / startbootstrap - clean - blog;\nassets / main.css;\n```\n\n폰트는 구글에서 기본 제공한다는 폰트 중에 이쁜 나눔고딕체를 import 해서 사용했다.\n\n```js\n// _sass/styles.scss\n/* Import Google Web Font */\n@import url(http://fonts.googleapis.com/css?family=Nanum+Gothic:400,700);\n\n/* Style Blog Font */\nh1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure {\n  margin-bottom: 15px;\n  font-family: 'Nanum Gothic', sans-serif;\n}\n```\n\n---\n\n#### Code Block 스타일 적용하기\n\n폰트를 넣고 보니.. 코드 블럭이 이쁘지가 않았다.\n마크다운 문서에 소스코드가 저렇게 안 이쁘다니.. 다시 스타일을 찾기 시작했다.\n\n[OneDarkTheme][onedarktheme]에 `syntax-one-dark.css` 을 가져왔다.\nassets/css/syntax.css 에 스타일을 적용하고, import 해서 사용했다.\n\n```js\n// _sass/styles.scss\n/* Import Highlight */\n@import \"../assets/css/syntax.css\";\n```\n\n테마 요소의 다른 부분은 건드리지 않았고, 스타일만 앞으로 계속 커스텀하게 바꿔봐야겠다.\n\n#### Git Repository 블로그 적용하기\n\nRepository에 등록하면 프로젝트 명(git_id.github.io) 로 등록을 하면 바로 깃허브에서 확인을 할 수 있다.\n기본 jekyll 만 설치하면 바로 확인이 가능하다고 하는데..\n공식으로 지정된 테마만 등록이 가능하다고.. 커스텀 테마의 경우엔 404 ERROR 가 발생했다.\n\n결국엔 필요한 파일의 일부가 아니라 전부를 내 프로젝트에 추가했다.\n그리고 시작된 jekyll 공부..\n\njekyll 에서 사용되는 문법은 Ruby로 작성된 Liquid 템플릿 언어이다.<br/>\n[goodGid][goodgid] 님의 블로그가 정리되어있고, 이 언어를 사용해서 html을 만들고\nlayout 탬플릿 파일이 동적 파일들(\\*.md)을 로드해서 정적파일로 변환해준다.\n\n[cleanblog]: https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll\n[onedarktheme]: https://github.com/eungbean/Atom-OneDarkTheme-4-Jekyll\n[goodgid]: https://goodgid.github.io/What-is-Liquid-Grammer/\n","slug":"install-jekyll","published":1,"updated":"2021-09-24T05:31:03.800Z","photos":[],"link":"","_id":"cktxxl2ia000mvb8zdg7m9ueh","content":"<h4 id=\"환경설정하기\"><a href=\"#환경설정하기\" class=\"headerlink\" title=\"환경설정하기\"></a>환경설정하기</h4><p>Jekyll은 markdown(*.md) 파일을 생성하면 웹페이지로 서비스를 할 수 있는 정적 사이트 생성기이다.</p>\n<p>Ruby를 환경에서 동작하기 때문에 윈도우에도 Ruby를 설치 해야한다.<br>RubyInstaller for Windows 를 설치하는데 (Devkit 가 포함된 버전)으로 설치하면 된다.<br>Ruby+Devkit 2.5.5-1 (x64) 로 설치를 진행했다.</p>\n<p><a href=\"https://rubyinstaller.org/downloads/\">Ruby Installer</a></p>\n<hr>\n<h4 id=\"사이트-생성하기\"><a href=\"#사이트-생성하기\" class=\"headerlink\" title=\"사이트 생성하기\"></a>사이트 생성하기</h4><p><a href=\"https://jekyllrb-ko.github.io/docs/windows/\">Jekyll 공식사이트(한글 번역)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jekyll 설치</span></span><br><span class=\"line\">gem install jekyll bundler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 사이트 생성</span></span><br><span class=\"line\">jekyll <span class=\"keyword\">new</span> my-awesome-site</span><br><span class=\"line\">cd my-awesome-site</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jekyll 실행 (window)</span></span><br><span class=\"line\">my-awesome-site $jekyll serve --watch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jekyll 실행 (mac)</span></span><br><span class=\"line\">bundle exec jekyll serve --watch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/post-2019-08-07-2.png\" alt=\"post-2019-08-07-2\">{: width=”100%” height=”100%”}</p>\n<hr>\n<h4 id=\"글-작성하기\"><a href=\"#글-작성하기\" class=\"headerlink\" title=\"글 작성하기\"></a>글 작성하기</h4><p>마크다운 파일명과 상단 텍스트는 규칙대로 만들어주고 저장을 하게 되면 home 에 리스트가 나타난다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_post / yyyy - mm - dd - title.md;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"테마-적용하기\"><a href=\"#테마-적용하기\" class=\"headerlink\" title=\"테마 적용하기\"></a>테마 적용하기</h4><p>제공하는 테마 중에서 댓글도 없고, 심플한 디자인인 ‘jekyll-theme-clean-blog’ 가 이 테마를 적용해보았다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// install</span></span><br><span class=\"line\">gem <span class=\"string\">&quot;jekyll-theme-clean-blog&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">theme</span>: jekyll-theme-clean-blog</span><br></pre></td></tr></table></figure>\n\n<p>새로 적용하면 아주 이쁘게 잘 보이는데.. 영문일 때 폰트만 이뻐서.. 한글 폰트는 다른걸 사용하고 싶어졌다.<br><img src=\"/img/post-2019-08-07-1.png\" alt=\"post-2019-08-07-1\">{: width=”100%” height=”100%”}</p>\n<hr>\n<h4 id=\"폰트-적용하기\"><a href=\"#폰트-적용하기\" class=\"headerlink\" title=\"폰트 적용하기\"></a>폰트 적용하기</h4><p>Jekyll의 수많은 테마는 변경없이 사용할 수 있도록 제공되지만..<br>블로그 테마를 변경하고 싶지 않고.. 커스텀하게 적용할 방법을 찾게 될 수 밖에 없는거 같다.</p>\n<p>그래서 <a href=\"https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll\">Clean Blog Jekyll</a> 사이트에서 소스를 받아 분석을 시작했다.</p>\n<p>우선 스타일 관련부분을 모두 가져와서 내 프로젝트에 그대로 덮어씌우고, 빌드를 했더니 _site 에 로컬 파일들이 들어갔다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 개별로 가져온 파일</span></span><br><span class=\"line\">_sass / styles.scss;</span><br><span class=\"line\">assets / vendor / startbootstrap - clean - blog;</span><br><span class=\"line\">assets / main.css;</span><br></pre></td></tr></table></figure>\n\n<p>폰트는 구글에서 기본 제공한다는 폰트 중에 이쁜 나눔고딕체를 import 해서 사용했다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _sass/styles.scss</span></span><br><span class=\"line\"><span class=\"comment\">/* Import Google Web Font */</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> url(http:<span class=\"comment\">//fonts.googleapis.com/css?family=Nanum+Gothic:400,700);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Style Blog Font */</span></span><br><span class=\"line\">h1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure &#123;</span><br><span class=\"line\">  margin-bottom: 15px;</span><br><span class=\"line\">  font-family: <span class=\"string\">&#x27;Nanum Gothic&#x27;</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Code-Block-스타일-적용하기\"><a href=\"#Code-Block-스타일-적용하기\" class=\"headerlink\" title=\"Code Block 스타일 적용하기\"></a>Code Block 스타일 적용하기</h4><p>폰트를 넣고 보니.. 코드 블럭이 이쁘지가 않았다.<br>마크다운 문서에 소스코드가 저렇게 안 이쁘다니.. 다시 스타일을 찾기 시작했다.</p>\n<p><a href=\"https://github.com/eungbean/Atom-OneDarkTheme-4-Jekyll\">OneDarkTheme</a>에 <code>syntax-one-dark.css</code> 을 가져왔다.<br>assets/css/syntax.css 에 스타일을 적용하고, import 해서 사용했다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _sass/styles.scss</span></span><br><span class=\"line\"><span class=\"comment\">/* Import Highlight */</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">&quot;../assets/css/syntax.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>테마 요소의 다른 부분은 건드리지 않았고, 스타일만 앞으로 계속 커스텀하게 바꿔봐야겠다.</p>\n<h4 id=\"Git-Repository-블로그-적용하기\"><a href=\"#Git-Repository-블로그-적용하기\" class=\"headerlink\" title=\"Git Repository 블로그 적용하기\"></a>Git Repository 블로그 적용하기</h4><p>Repository에 등록하면 프로젝트 명(git_id.github.io) 로 등록을 하면 바로 깃허브에서 확인을 할 수 있다.<br>기본 jekyll 만 설치하면 바로 확인이 가능하다고 하는데..<br>공식으로 지정된 테마만 등록이 가능하다고.. 커스텀 테마의 경우엔 404 ERROR 가 발생했다.</p>\n<p>결국엔 필요한 파일의 일부가 아니라 전부를 내 프로젝트에 추가했다.<br>그리고 시작된 jekyll 공부..</p>\n<p>jekyll 에서 사용되는 문법은 Ruby로 작성된 Liquid 템플릿 언어이다.<br/><br><a href=\"https://goodgid.github.io/What-is-Liquid-Grammer/\">goodGid</a> 님의 블로그가 정리되어있고, 이 언어를 사용해서 html을 만들고<br>layout 탬플릿 파일이 동적 파일들(*.md)을 로드해서 정적파일로 변환해준다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"환경설정하기\"><a href=\"#환경설정하기\" class=\"headerlink\" title=\"환경설정하기\"></a>환경설정하기</h4><p>Jekyll은 markdown(*.md) 파일을 생성하면 웹페이지로 서비스를 할 수 있는 정적 사이트 생성기이다.</p>\n<p>Ruby를 환경에서 동작하기 때문에 윈도우에도 Ruby를 설치 해야한다.<br>RubyInstaller for Windows 를 설치하는데 (Devkit 가 포함된 버전)으로 설치하면 된다.<br>Ruby+Devkit 2.5.5-1 (x64) 로 설치를 진행했다.</p>\n<p><a href=\"https://rubyinstaller.org/downloads/\">Ruby Installer</a></p>\n<hr>\n<h4 id=\"사이트-생성하기\"><a href=\"#사이트-생성하기\" class=\"headerlink\" title=\"사이트 생성하기\"></a>사이트 생성하기</h4><p><a href=\"https://jekyllrb-ko.github.io/docs/windows/\">Jekyll 공식사이트(한글 번역)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jekyll 설치</span></span><br><span class=\"line\">gem install jekyll bundler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 사이트 생성</span></span><br><span class=\"line\">jekyll <span class=\"keyword\">new</span> my-awesome-site</span><br><span class=\"line\">cd my-awesome-site</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jekyll 실행 (window)</span></span><br><span class=\"line\">my-awesome-site $jekyll serve --watch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jekyll 실행 (mac)</span></span><br><span class=\"line\">bundle exec jekyll serve --watch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/post-2019-08-07-2.png\" alt=\"post-2019-08-07-2\">{: width=”100%” height=”100%”}</p>\n<hr>\n<h4 id=\"글-작성하기\"><a href=\"#글-작성하기\" class=\"headerlink\" title=\"글 작성하기\"></a>글 작성하기</h4><p>마크다운 파일명과 상단 텍스트는 규칙대로 만들어주고 저장을 하게 되면 home 에 리스트가 나타난다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_post / yyyy - mm - dd - title.md;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"테마-적용하기\"><a href=\"#테마-적용하기\" class=\"headerlink\" title=\"테마 적용하기\"></a>테마 적용하기</h4><p>제공하는 테마 중에서 댓글도 없고, 심플한 디자인인 ‘jekyll-theme-clean-blog’ 가 이 테마를 적용해보았다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// install</span></span><br><span class=\"line\">gem <span class=\"string\">&quot;jekyll-theme-clean-blog&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">theme</span>: jekyll-theme-clean-blog</span><br></pre></td></tr></table></figure>\n\n<p>새로 적용하면 아주 이쁘게 잘 보이는데.. 영문일 때 폰트만 이뻐서.. 한글 폰트는 다른걸 사용하고 싶어졌다.<br><img src=\"/img/post-2019-08-07-1.png\" alt=\"post-2019-08-07-1\">{: width=”100%” height=”100%”}</p>\n<hr>\n<h4 id=\"폰트-적용하기\"><a href=\"#폰트-적용하기\" class=\"headerlink\" title=\"폰트 적용하기\"></a>폰트 적용하기</h4><p>Jekyll의 수많은 테마는 변경없이 사용할 수 있도록 제공되지만..<br>블로그 테마를 변경하고 싶지 않고.. 커스텀하게 적용할 방법을 찾게 될 수 밖에 없는거 같다.</p>\n<p>그래서 <a href=\"https://github.com/BlackrockDigital/startbootstrap-clean-blog-jekyll\">Clean Blog Jekyll</a> 사이트에서 소스를 받아 분석을 시작했다.</p>\n<p>우선 스타일 관련부분을 모두 가져와서 내 프로젝트에 그대로 덮어씌우고, 빌드를 했더니 _site 에 로컬 파일들이 들어갔다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 개별로 가져온 파일</span></span><br><span class=\"line\">_sass / styles.scss;</span><br><span class=\"line\">assets / vendor / startbootstrap - clean - blog;</span><br><span class=\"line\">assets / main.css;</span><br></pre></td></tr></table></figure>\n\n<p>폰트는 구글에서 기본 제공한다는 폰트 중에 이쁜 나눔고딕체를 import 해서 사용했다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _sass/styles.scss</span></span><br><span class=\"line\"><span class=\"comment\">/* Import Google Web Font */</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> url(http:<span class=\"comment\">//fonts.googleapis.com/css?family=Nanum+Gothic:400,700);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Style Blog Font */</span></span><br><span class=\"line\">h1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure &#123;</span><br><span class=\"line\">  margin-bottom: 15px;</span><br><span class=\"line\">  font-family: <span class=\"string\">&#x27;Nanum Gothic&#x27;</span>, sans-serif;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Code-Block-스타일-적용하기\"><a href=\"#Code-Block-스타일-적용하기\" class=\"headerlink\" title=\"Code Block 스타일 적용하기\"></a>Code Block 스타일 적용하기</h4><p>폰트를 넣고 보니.. 코드 블럭이 이쁘지가 않았다.<br>마크다운 문서에 소스코드가 저렇게 안 이쁘다니.. 다시 스타일을 찾기 시작했다.</p>\n<p><a href=\"https://github.com/eungbean/Atom-OneDarkTheme-4-Jekyll\">OneDarkTheme</a>에 <code>syntax-one-dark.css</code> 을 가져왔다.<br>assets/css/syntax.css 에 스타일을 적용하고, import 해서 사용했다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _sass/styles.scss</span></span><br><span class=\"line\"><span class=\"comment\">/* Import Highlight */</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">&quot;../assets/css/syntax.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>테마 요소의 다른 부분은 건드리지 않았고, 스타일만 앞으로 계속 커스텀하게 바꿔봐야겠다.</p>\n<h4 id=\"Git-Repository-블로그-적용하기\"><a href=\"#Git-Repository-블로그-적용하기\" class=\"headerlink\" title=\"Git Repository 블로그 적용하기\"></a>Git Repository 블로그 적용하기</h4><p>Repository에 등록하면 프로젝트 명(git_id.github.io) 로 등록을 하면 바로 깃허브에서 확인을 할 수 있다.<br>기본 jekyll 만 설치하면 바로 확인이 가능하다고 하는데..<br>공식으로 지정된 테마만 등록이 가능하다고.. 커스텀 테마의 경우엔 404 ERROR 가 발생했다.</p>\n<p>결국엔 필요한 파일의 일부가 아니라 전부를 내 프로젝트에 추가했다.<br>그리고 시작된 jekyll 공부..</p>\n<p>jekyll 에서 사용되는 문법은 Ruby로 작성된 Liquid 템플릿 언어이다.<br/><br><a href=\"https://goodgid.github.io/What-is-Liquid-Grammer/\">goodGid</a> 님의 블로그가 정리되어있고, 이 언어를 사용해서 html을 만들고<br>layout 탬플릿 파일이 동적 파일들(*.md)을 로드해서 정적파일로 변환해준다.</p>\n"},{"layout":"post","title":"ES6 문법","date":"2020-02-03T15:00:00.000Z","comments":0,"background":"/img/bg-post-11.jpg","_content":"\n#### 1.import/export\n\n클래스를 사용할 수 있게 되면서 `export default 클래스명`으로 출력하는 경우가 많아졌다.\n기능과 역할에 맞게 분리해서 사용하는 측면에서도 좋지만,\n기본값을 사용할 경우에 오버라이딩해서 쓸 수 있게 만들면 좋을거 같아 사용한다.\n\n그래서 함수도 Util 의 기능으로 만들어서 쓸려고 해보니, 문제가 발생했다.\n\n`export default {함수명}`으로 사용을 해준다. 그리고 `import 파일명 from 파일위치` 로 지정을해두면\n`파일명.함수명` 으로 접근해서 사용을 할 수 있다.\n메서드가 아닌 함수를 개별로 호출해서 쓰고 싶을때 사용할 수 있을 거 같다.\n\n#### 2. spread\n\nSpread 연산은 전개연산자로 Object 를 풀어서 나타낼 수가 있게 되었다.\n덕분에 뒤에 있는 값을 덮어씌워서 merge 하는데 자주 사용하는데,\n중첩된 Object 의 경우엔 같은 키만 merge 해주고 싶은 경우가 발생한다.\n그래서 한번 더 연산을 해주면 된다는 글을 참고해본다.\n\n참고: https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties\n\n```js\nconst source = { a: 2, b: 3, c: { d: 2, d2: 1 } };\nconst target = {\n  c: { d: 4 },\n};\n\nconst result = { ...source, ...target };\nconsole.log(result); // {a:2, b:3, c: {d:4}}\n\nconst result2 = { ...source, ...target, c: { ...source.c, ...target.c } };\nconsole.log(result2); // {a: 2, b: 3, c: {d: 4, d2: 1}}\n```\n","source":"_posts/javascript.md","raw":"---\nlayout: post\ntitle: 'ES6 문법'\ndate: 2020-02-04\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-11.jpg'\n---\n\n#### 1.import/export\n\n클래스를 사용할 수 있게 되면서 `export default 클래스명`으로 출력하는 경우가 많아졌다.\n기능과 역할에 맞게 분리해서 사용하는 측면에서도 좋지만,\n기본값을 사용할 경우에 오버라이딩해서 쓸 수 있게 만들면 좋을거 같아 사용한다.\n\n그래서 함수도 Util 의 기능으로 만들어서 쓸려고 해보니, 문제가 발생했다.\n\n`export default {함수명}`으로 사용을 해준다. 그리고 `import 파일명 from 파일위치` 로 지정을해두면\n`파일명.함수명` 으로 접근해서 사용을 할 수 있다.\n메서드가 아닌 함수를 개별로 호출해서 쓰고 싶을때 사용할 수 있을 거 같다.\n\n#### 2. spread\n\nSpread 연산은 전개연산자로 Object 를 풀어서 나타낼 수가 있게 되었다.\n덕분에 뒤에 있는 값을 덮어씌워서 merge 하는데 자주 사용하는데,\n중첩된 Object 의 경우엔 같은 키만 merge 해주고 싶은 경우가 발생한다.\n그래서 한번 더 연산을 해주면 된다는 글을 참고해본다.\n\n참고: https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties\n\n```js\nconst source = { a: 2, b: 3, c: { d: 2, d2: 1 } };\nconst target = {\n  c: { d: 4 },\n};\n\nconst result = { ...source, ...target };\nconsole.log(result); // {a:2, b:3, c: {d:4}}\n\nconst result2 = { ...source, ...target, c: { ...source.c, ...target.c } };\nconsole.log(result2); // {a: 2, b: 3, c: {d: 4, d2: 1}}\n```\n","slug":"javascript","published":1,"updated":"2021-09-24T05:30:32.794Z","photos":[],"link":"","_id":"cktxxl2ia000pvb8zfk9zc69g","content":"<h4 id=\"1-import-export\"><a href=\"#1-import-export\" class=\"headerlink\" title=\"1.import/export\"></a>1.import/export</h4><p>클래스를 사용할 수 있게 되면서 <code>export default 클래스명</code>으로 출력하는 경우가 많아졌다.<br>기능과 역할에 맞게 분리해서 사용하는 측면에서도 좋지만,<br>기본값을 사용할 경우에 오버라이딩해서 쓸 수 있게 만들면 좋을거 같아 사용한다.</p>\n<p>그래서 함수도 Util 의 기능으로 만들어서 쓸려고 해보니, 문제가 발생했다.</p>\n<p><code>export default &#123;함수명&#125;</code>으로 사용을 해준다. 그리고 <code>import 파일명 from 파일위치</code> 로 지정을해두면<br><code>파일명.함수명</code> 으로 접근해서 사용을 할 수 있다.<br>메서드가 아닌 함수를 개별로 호출해서 쓰고 싶을때 사용할 수 있을 거 같다.</p>\n<h4 id=\"2-spread\"><a href=\"#2-spread\" class=\"headerlink\" title=\"2. spread\"></a>2. spread</h4><p>Spread 연산은 전개연산자로 Object 를 풀어서 나타낼 수가 있게 되었다.<br>덕분에 뒤에 있는 값을 덮어씌워서 merge 하는데 자주 사용하는데,<br>중첩된 Object 의 경우엔 같은 키만 merge 해주고 싶은 경우가 발생한다.<br>그래서 한번 더 연산을 해주면 된다는 글을 참고해본다.</p>\n<p>참고: <a href=\"https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties\">https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: &#123; <span class=\"attr\">d</span>: <span class=\"number\">2</span>, <span class=\"attr\">d2</span>: <span class=\"number\">1</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">c</span>: &#123; <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = &#123; ...source, ...target &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// &#123;a:2, b:3, c: &#123;d:4&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = &#123; ...source, ...target, <span class=\"attr\">c</span>: &#123; ...source.c, ...target.c &#125; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result2); <span class=\"comment\">// &#123;a: 2, b: 3, c: &#123;d: 4, d2: 1&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-import-export\"><a href=\"#1-import-export\" class=\"headerlink\" title=\"1.import/export\"></a>1.import/export</h4><p>클래스를 사용할 수 있게 되면서 <code>export default 클래스명</code>으로 출력하는 경우가 많아졌다.<br>기능과 역할에 맞게 분리해서 사용하는 측면에서도 좋지만,<br>기본값을 사용할 경우에 오버라이딩해서 쓸 수 있게 만들면 좋을거 같아 사용한다.</p>\n<p>그래서 함수도 Util 의 기능으로 만들어서 쓸려고 해보니, 문제가 발생했다.</p>\n<p><code>export default &#123;함수명&#125;</code>으로 사용을 해준다. 그리고 <code>import 파일명 from 파일위치</code> 로 지정을해두면<br><code>파일명.함수명</code> 으로 접근해서 사용을 할 수 있다.<br>메서드가 아닌 함수를 개별로 호출해서 쓰고 싶을때 사용할 수 있을 거 같다.</p>\n<h4 id=\"2-spread\"><a href=\"#2-spread\" class=\"headerlink\" title=\"2. spread\"></a>2. spread</h4><p>Spread 연산은 전개연산자로 Object 를 풀어서 나타낼 수가 있게 되었다.<br>덕분에 뒤에 있는 값을 덮어씌워서 merge 하는데 자주 사용하는데,<br>중첩된 Object 의 경우엔 같은 키만 merge 해주고 싶은 경우가 발생한다.<br>그래서 한번 더 연산을 해주면 된다는 글을 참고해본다.</p>\n<p>참고: <a href=\"https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties\">https://stackoverflow.com/questions/47103028/how-to-use-object-spread-with-nested-properties</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> source = &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span>, <span class=\"attr\">c</span>: &#123; <span class=\"attr\">d</span>: <span class=\"number\">2</span>, <span class=\"attr\">d2</span>: <span class=\"number\">1</span> &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  <span class=\"attr\">c</span>: &#123; <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = &#123; ...source, ...target &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// &#123;a:2, b:3, c: &#123;d:4&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = &#123; ...source, ...target, <span class=\"attr\">c</span>: &#123; ...source.c, ...target.c &#125; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result2); <span class=\"comment\">// &#123;a: 2, b: 3, c: &#123;d: 4, d2: 1&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Max, Min 계산하기","date":"2019-09-17T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n### 최대값, 최소값\n\nES6 문법의 Spread 연산자를 사용할 수 있게 되면서 최대값과 최소값을 간편하게 계산할 수 있게 되었다.\nSpread 연산자(...)는 배열을 여러개의 인자 값이나 (키-값)객체로 확장할 수 있다.\n\n```js\nconst test = [190, 10, 16, 20, 60, 30, 40, 20, 60, 15, 50, 22, 8];\n\nconsole.log(Math.max(...test)); // 190\nconsole.log(Math.min(...test)); // 8\n```\n","source":"_posts/max.md","raw":"---\nlayout: post\ntitle: 'Max, Min 계산하기'\ndate: 2019-09-18\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n### 최대값, 최소값\n\nES6 문법의 Spread 연산자를 사용할 수 있게 되면서 최대값과 최소값을 간편하게 계산할 수 있게 되었다.\nSpread 연산자(...)는 배열을 여러개의 인자 값이나 (키-값)객체로 확장할 수 있다.\n\n```js\nconst test = [190, 10, 16, 20, 60, 30, 40, 20, 60, 15, 50, 22, 8];\n\nconsole.log(Math.max(...test)); // 190\nconsole.log(Math.min(...test)); // 8\n```\n","slug":"max","published":1,"updated":"2021-09-24T05:31:47.488Z","photos":[],"link":"","_id":"cktxxl2ib000rvb8z5jvl1phd","content":"<h3 id=\"최대값-최소값\"><a href=\"#최대값-최소값\" class=\"headerlink\" title=\"최대값, 최소값\"></a>최대값, 최소값</h3><p>ES6 문법의 Spread 연산자를 사용할 수 있게 되면서 최대값과 최소값을 간편하게 계산할 수 있게 되었다.<br>Spread 연산자(…)는 배열을 여러개의 인자 값이나 (키-값)객체로 확장할 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> test = [<span class=\"number\">190</span>, <span class=\"number\">10</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">15</span>, <span class=\"number\">50</span>, <span class=\"number\">22</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(...test)); <span class=\"comment\">// 190</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.min(...test)); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"최대값-최소값\"><a href=\"#최대값-최소값\" class=\"headerlink\" title=\"최대값, 최소값\"></a>최대값, 최소값</h3><p>ES6 문법의 Spread 연산자를 사용할 수 있게 되면서 최대값과 최소값을 간편하게 계산할 수 있게 되었다.<br>Spread 연산자(…)는 배열을 여러개의 인자 값이나 (키-값)객체로 확장할 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> test = [<span class=\"number\">190</span>, <span class=\"number\">10</span>, <span class=\"number\">16</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">15</span>, <span class=\"number\">50</span>, <span class=\"number\">22</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.max(...test)); <span class=\"comment\">// 190</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.min(...test)); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"NPM 이야기","date":"2019-08-08T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\n#### NPM 에 새로 추가된 기능을 사용해보자\n\nNPM v6 에서 모듈의 취약점을 검사해주는 기능이 추가되었다. <br>\n사용해보려 했더니.. v.5.xxx 사용할 수 없다.  \nNPM을 업데이트를 먼저 진행했다.\n\n```html\n// for window $ npm -version $ npm install -g npm\n```\n\n아래와 같은 에러가 또 발생한다.\n\n```js\nnpm ERR! code EAUDITNOLOCK\nnpm ERR! audit Neither npm-shrinkwrap.json nor package-lock.json found: Cannot audit a project without a lockfile\nnpm ERR! audit Try creating one first with: npm i --package-lock-only\n```\n\n결과\n\n```js\n$ npm audit\n           === npm audit security report ===\nfound 0 vulnerabilities\n```\n\n#### NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)\n\n문제가 발생했을 때, 설치된 모듈의 버전을 확인하고 싶을때가 있다.\n\n```html\n$ npm view <package-name> version</package-name>\n```\n\n#### package json 경로 지정 방법\n\n```js\n// devDependencies 설치\n$ npm install -D --save xxx\n\n// dependencies 설치\n$ npm install --save xxx\n```\n\n#### 패키지 모듈 삭제 방법\n\n```js\n$ rm -rf node_modules/\n```\n\n#### 특정 버전으로 받는 방법\n\n```js\n$ npm insatll -D babel-core@^7.0.0-0\n```\n","source":"_posts/npm.md","raw":"---\nlayout: post\ntitle: 'NPM 이야기'\ndate: 2019-08-09\ncategories: setting\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\n#### NPM 에 새로 추가된 기능을 사용해보자\n\nNPM v6 에서 모듈의 취약점을 검사해주는 기능이 추가되었다. <br>\n사용해보려 했더니.. v.5.xxx 사용할 수 없다.  \nNPM을 업데이트를 먼저 진행했다.\n\n```html\n// for window $ npm -version $ npm install -g npm\n```\n\n아래와 같은 에러가 또 발생한다.\n\n```js\nnpm ERR! code EAUDITNOLOCK\nnpm ERR! audit Neither npm-shrinkwrap.json nor package-lock.json found: Cannot audit a project without a lockfile\nnpm ERR! audit Try creating one first with: npm i --package-lock-only\n```\n\n결과\n\n```js\n$ npm audit\n           === npm audit security report ===\nfound 0 vulnerabilities\n```\n\n#### NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)\n\n문제가 발생했을 때, 설치된 모듈의 버전을 확인하고 싶을때가 있다.\n\n```html\n$ npm view <package-name> version</package-name>\n```\n\n#### package json 경로 지정 방법\n\n```js\n// devDependencies 설치\n$ npm install -D --save xxx\n\n// dependencies 설치\n$ npm install --save xxx\n```\n\n#### 패키지 모듈 삭제 방법\n\n```js\n$ rm -rf node_modules/\n```\n\n#### 특정 버전으로 받는 방법\n\n```js\n$ npm insatll -D babel-core@^7.0.0-0\n```\n","slug":"npm","published":1,"updated":"2021-09-24T05:35:55.625Z","photos":[],"link":"","_id":"cktxxl2ic000uvb8zetw7aj4k","content":"<h4 id=\"NPM-에-새로-추가된-기능을-사용해보자\"><a href=\"#NPM-에-새로-추가된-기능을-사용해보자\" class=\"headerlink\" title=\"NPM 에 새로 추가된 기능을 사용해보자\"></a>NPM 에 새로 추가된 기능을 사용해보자</h4><p>NPM v6 에서 모듈의 취약점을 검사해주는 기능이 추가되었다. <br><br>사용해보려 했더니.. v.5.xxx 사용할 수 없다.<br>NPM을 업데이트를 먼저 진행했다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// for window $ npm -version $ npm install -g npm</span><br></pre></td></tr></table></figure>\n\n<p>아래와 같은 에러가 또 발생한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! code EAUDITNOLOCK</span><br><span class=\"line\">npm ERR! audit Neither npm-shrinkwrap.json nor package-lock.json found: Cannot audit a project without a lockfile</span><br><span class=\"line\">npm ERR! audit Try creating one first <span class=\"keyword\">with</span>: npm i --package-lock-only</span><br></pre></td></tr></table></figure>\n\n<p>결과</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm audit</span><br><span class=\"line\">           === npm audit security report ===</span><br><span class=\"line\">found <span class=\"number\">0</span> vulnerabilities</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NPM에-설치된-모듈을-확인하는-방법-Find-the-version-of-installed-npm-package\"><a href=\"#NPM에-설치된-모듈을-확인하는-방법-Find-the-version-of-installed-npm-package\" class=\"headerlink\" title=\"NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)\"></a>NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)</h4><p>문제가 발생했을 때, 설치된 모듈의 버전을 확인하고 싶을때가 있다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm view <span class=\"tag\">&lt;<span class=\"name\">package-name</span>&gt;</span> version<span class=\"tag\">&lt;/<span class=\"name\">package-name</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"package-json-경로-지정-방법\"><a href=\"#package-json-경로-지정-방법\" class=\"headerlink\" title=\"package json 경로 지정 방법\"></a>package json 경로 지정 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// devDependencies 설치</span></span><br><span class=\"line\">$ npm install -D --save xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dependencies 설치</span></span><br><span class=\"line\">$ npm install --save xxx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"패키지-모듈-삭제-방법\"><a href=\"#패키지-모듈-삭제-방법\" class=\"headerlink\" title=\"패키지 모듈 삭제 방법\"></a>패키지 모듈 삭제 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf node_modules/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"특정-버전으로-받는-방법\"><a href=\"#특정-버전으로-받는-방법\" class=\"headerlink\" title=\"특정 버전으로 받는 방법\"></a>특정 버전으로 받는 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm insatll -D babel-core@^<span class=\"number\">7.0</span><span class=\"number\">.0</span>-<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"NPM-에-새로-추가된-기능을-사용해보자\"><a href=\"#NPM-에-새로-추가된-기능을-사용해보자\" class=\"headerlink\" title=\"NPM 에 새로 추가된 기능을 사용해보자\"></a>NPM 에 새로 추가된 기능을 사용해보자</h4><p>NPM v6 에서 모듈의 취약점을 검사해주는 기능이 추가되었다. <br><br>사용해보려 했더니.. v.5.xxx 사용할 수 없다.<br>NPM을 업데이트를 먼저 진행했다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// for window $ npm -version $ npm install -g npm</span><br></pre></td></tr></table></figure>\n\n<p>아래와 같은 에러가 또 발생한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! code EAUDITNOLOCK</span><br><span class=\"line\">npm ERR! audit Neither npm-shrinkwrap.json nor package-lock.json found: Cannot audit a project without a lockfile</span><br><span class=\"line\">npm ERR! audit Try creating one first <span class=\"keyword\">with</span>: npm i --package-lock-only</span><br></pre></td></tr></table></figure>\n\n<p>결과</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm audit</span><br><span class=\"line\">           === npm audit security report ===</span><br><span class=\"line\">found <span class=\"number\">0</span> vulnerabilities</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"NPM에-설치된-모듈을-확인하는-방법-Find-the-version-of-installed-npm-package\"><a href=\"#NPM에-설치된-모듈을-확인하는-방법-Find-the-version-of-installed-npm-package\" class=\"headerlink\" title=\"NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)\"></a>NPM에 설치된 모듈을 확인하는 방법 (Find the version of installed npm package)</h4><p>문제가 발생했을 때, 설치된 모듈의 버전을 확인하고 싶을때가 있다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm view <span class=\"tag\">&lt;<span class=\"name\">package-name</span>&gt;</span> version<span class=\"tag\">&lt;/<span class=\"name\">package-name</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"package-json-경로-지정-방법\"><a href=\"#package-json-경로-지정-방법\" class=\"headerlink\" title=\"package json 경로 지정 방법\"></a>package json 경로 지정 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// devDependencies 설치</span></span><br><span class=\"line\">$ npm install -D --save xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dependencies 설치</span></span><br><span class=\"line\">$ npm install --save xxx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"패키지-모듈-삭제-방법\"><a href=\"#패키지-모듈-삭제-방법\" class=\"headerlink\" title=\"패키지 모듈 삭제 방법\"></a>패키지 모듈 삭제 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm -rf node_modules/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"특정-버전으로-받는-방법\"><a href=\"#특정-버전으로-받는-방법\" class=\"headerlink\" title=\"특정 버전으로 받는 방법\"></a>특정 버전으로 받는 방법</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm insatll -D babel-core@^<span class=\"number\">7.0</span><span class=\"number\">.0</span>-<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Javascript Object 이야기","date":"2019-08-20T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\nobject 를 string 으로 바꾸는 방법은 `JSON.stringify()`를 사용한다.\n\n```js\nconst obj = [{ name: 'first' }, { name: 'second' }, { name: 'third' }];\n\nJSON.stringify(obj); // \"[{\"name\":\"first\"},{\"name\":\"second\"},{\"name\":\"third\"}]\n```\n\n이 방법은 리스트로 만들어진 오브젝트를 필터링할 때 쓰는 방법인데 중복도 제거할 수 있어서 많이 사용한다.\n\n```js\nconst obj = [\n  { name: 'first', value: 1 },\n  { name: 'second', value: 2 },\n  { name: 'third', value: 3 },\n  { name: 'third', value: 4 },\n  { name: 'third', value: 5 },\n];\n\nconst result = new Set(obj.map((v) => v.name));\nconsole.log(result); // {\"first\", \"second\", \"third\"}\n```\n\nChrome 에서 Object 를 복사하고 싶은 경우가 있는데, console 을 찍고\n우클릭으로 Store as Global Variable 을 선택하면 temp1으로 복사가되는데  \n`copy(temp1)` 이렇게 쓰게 되면 복사가 가능하다.\n\n[참고 (StackOverflow)][https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]\n","source":"_posts/object.md","raw":"---\nlayout: post\ntitle: 'Javascript Object 이야기'\ndate: 2019-08-21\ncategories: javascript\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\nobject 를 string 으로 바꾸는 방법은 `JSON.stringify()`를 사용한다.\n\n```js\nconst obj = [{ name: 'first' }, { name: 'second' }, { name: 'third' }];\n\nJSON.stringify(obj); // \"[{\"name\":\"first\"},{\"name\":\"second\"},{\"name\":\"third\"}]\n```\n\n이 방법은 리스트로 만들어진 오브젝트를 필터링할 때 쓰는 방법인데 중복도 제거할 수 있어서 많이 사용한다.\n\n```js\nconst obj = [\n  { name: 'first', value: 1 },\n  { name: 'second', value: 2 },\n  { name: 'third', value: 3 },\n  { name: 'third', value: 4 },\n  { name: 'third', value: 5 },\n];\n\nconst result = new Set(obj.map((v) => v.name));\nconsole.log(result); // {\"first\", \"second\", \"third\"}\n```\n\nChrome 에서 Object 를 복사하고 싶은 경우가 있는데, console 을 찍고\n우클릭으로 Store as Global Variable 을 선택하면 temp1으로 복사가되는데  \n`copy(temp1)` 이렇게 쓰게 되면 복사가 가능하다.\n\n[참고 (StackOverflow)][https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]\n","slug":"object","published":1,"updated":"2021-09-24T05:32:27.126Z","photos":[],"link":"","_id":"cktxxl2ic000wvb8zc0kx5akq","content":"<p>object 를 string 으로 바꾸는 방법은 <code>JSON.stringify()</code>를 사용한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = [&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span> &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(obj); <span class=\"comment\">// &quot;[&#123;&quot;name&quot;:&quot;first&quot;&#125;,&#123;&quot;name&quot;:&quot;second&quot;&#125;,&#123;&quot;name&quot;:&quot;third&quot;&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>이 방법은 리스트로 만들어진 오브젝트를 필터링할 때 쓰는 방법인데 중복도 제거할 수 있어서 많이 사용한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(obj.map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.name));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// &#123;&quot;first&quot;, &quot;second&quot;, &quot;third&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Chrome 에서 Object 를 복사하고 싶은 경우가 있는데, console 을 찍고<br>우클릭으로 Store as Global Variable 을 선택하면 temp1으로 복사가되는데<br><code>copy(temp1)</code> 이렇게 쓰게 되면 복사가 가능하다.</p>\n<p>[참고 (StackOverflow)][<a href=\"https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]\">https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>object 를 string 으로 바꾸는 방법은 <code>JSON.stringify()</code>를 사용한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = [&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span> &#125;, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span> &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(obj); <span class=\"comment\">// &quot;[&#123;&quot;name&quot;:&quot;first&quot;&#125;,&#123;&quot;name&quot;:&quot;second&quot;&#125;,&#123;&quot;name&quot;:&quot;third&quot;&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>이 방법은 리스트로 만들어진 오브젝트를 필터링할 때 쓰는 방법인데 중복도 제거할 수 있어서 많이 사용한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;first&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;second&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;third&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(obj.map(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.name));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// &#123;&quot;first&quot;, &quot;second&quot;, &quot;third&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Chrome 에서 Object 를 복사하고 싶은 경우가 있는데, console 을 찍고<br>우클릭으로 Store as Global Variable 을 선택하면 temp1으로 복사가되는데<br><code>copy(temp1)</code> 이렇게 쓰게 되면 복사가 가능하다.</p>\n<p>[참고 (StackOverflow)][<a href=\"https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]\">https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code]</a></p>\n"},{"layout":"post","title":"Javascript Promise 이야기","date":"2019-08-27T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### 비동기 통신에서 Promise 는 어떻게 쓸까?\n\n자바스크립트에서 비동기로 데이터가 들어올 때, 그 비동기 처리가 끝난 시점에 다음 작업을 할 수 있게 해주는 방법이다.\n[pangyo][pangyo]님의 블로그에 정리가 잘 되어있다.\nPromise 메서드를 호출하면 pending 상태가 되고 then 일 때, 실행한다.\n프로미스는 덕 타이핑의 실제 사례이다.\n어떤 객체에 then() 메서드가 있으면 무조건 이 객체는 데너블(Thenable) 하다고 간주하고 프로미스라 판단한다.\n\n```js\ngetData().then((data) => {console.log(data)})\n\nfunction getData() {\n    return new Promise((resolve, reject) => {\n    ...ajax call...loop...\n    resolve(response)\n    }\n}\n```\n\n[pangyo]: https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\n","source":"_posts/promise.md","raw":"---\nlayout: post\ntitle: 'Javascript Promise 이야기'\ndate: 2019-08-28\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### 비동기 통신에서 Promise 는 어떻게 쓸까?\n\n자바스크립트에서 비동기로 데이터가 들어올 때, 그 비동기 처리가 끝난 시점에 다음 작업을 할 수 있게 해주는 방법이다.\n[pangyo][pangyo]님의 블로그에 정리가 잘 되어있다.\nPromise 메서드를 호출하면 pending 상태가 되고 then 일 때, 실행한다.\n프로미스는 덕 타이핑의 실제 사례이다.\n어떤 객체에 then() 메서드가 있으면 무조건 이 객체는 데너블(Thenable) 하다고 간주하고 프로미스라 판단한다.\n\n```js\ngetData().then((data) => {console.log(data)})\n\nfunction getData() {\n    return new Promise((resolve, reject) => {\n    ...ajax call...loop...\n    resolve(response)\n    }\n}\n```\n\n[pangyo]: https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\n","slug":"promise","published":1,"updated":"2021-09-24T05:32:04.689Z","photos":[],"link":"","_id":"cktxxl2id000yvb8z8qfhgc7j","content":"<h4 id=\"비동기-통신에서-Promise-는-어떻게-쓸까\"><a href=\"#비동기-통신에서-Promise-는-어떻게-쓸까\" class=\"headerlink\" title=\"비동기 통신에서 Promise 는 어떻게 쓸까?\"></a>비동기 통신에서 Promise 는 어떻게 쓸까?</h4><p>자바스크립트에서 비동기로 데이터가 들어올 때, 그 비동기 처리가 끝난 시점에 다음 작업을 할 수 있게 해주는 방법이다.<br><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\">pangyo</a>님의 블로그에 정리가 잘 되어있다.<br>Promise 메서드를 호출하면 pending 상태가 되고 then 일 때, 실행한다.<br>프로미스는 덕 타이핑의 실제 사례이다.<br>어떤 객체에 then() 메서드가 있으면 무조건 이 객체는 데너블(Thenable) 하다고 간주하고 프로미스라 판단한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData().then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(data)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...ajax call...loop...</span><br><span class=\"line\">    resolve(response)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"비동기-통신에서-Promise-는-어떻게-쓸까\"><a href=\"#비동기-통신에서-Promise-는-어떻게-쓸까\" class=\"headerlink\" title=\"비동기 통신에서 Promise 는 어떻게 쓸까?\"></a>비동기 통신에서 Promise 는 어떻게 쓸까?</h4><p>자바스크립트에서 비동기로 데이터가 들어올 때, 그 비동기 처리가 끝난 시점에 다음 작업을 할 수 있게 해주는 방법이다.<br><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\">pangyo</a>님의 블로그에 정리가 잘 되어있다.<br>Promise 메서드를 호출하면 pending 상태가 되고 then 일 때, 실행한다.<br>프로미스는 덕 타이핑의 실제 사례이다.<br>어떤 객체에 then() 메서드가 있으면 무조건 이 객체는 데너블(Thenable) 하다고 간주하고 프로미스라 판단한다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getData().then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(data)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...ajax call...loop...</span><br><span class=\"line\">    resolve(response)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"SaaS 알아가기","date":"2020-01-21T15:00:00.000Z","comments":0,"background":"/img/bg-post-11.jpg","_content":"\n### 1. &부모 요소 참조, $변수 사용\n\n- 부모요소의 참조가 필요한 경우엔 `&` 를 사용한다.\n- 가상 클래스의 선택자를 지정하는 경우에 참조가 필요\n\n```html\n.myAnchor { color: green; &:hover { text-decoration: underline; } }\n```\n\n### 2. Nesting\n\n- nesting 프로퍼티에도 사용한다.\n\n```html\n.test { font: { size: 30em; weight: bold; } }\n```\n\n### 3. Import\n\n- sass 분할된 파일(partial) 은 언더스코어(\\_\\_) 를 붙여 사용한다.\n- 파티셜 파일은 파일 접두어를 생략할 수 있다.\n\n```html\n// __vars.scss $width: 960px; // __header.scss #header { width: $width; } //\n__vars.scss 파일을 호출할때 // style.css @import \"vars\" @import \"header\"\n```\n","source":"_posts/scss.md","raw":"---\nlayout: post\ntitle: 'SaaS 알아가기'\ndate: 2020-01-22\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-11.jpg'\n---\n\n### 1. &부모 요소 참조, $변수 사용\n\n- 부모요소의 참조가 필요한 경우엔 `&` 를 사용한다.\n- 가상 클래스의 선택자를 지정하는 경우에 참조가 필요\n\n```html\n.myAnchor { color: green; &:hover { text-decoration: underline; } }\n```\n\n### 2. Nesting\n\n- nesting 프로퍼티에도 사용한다.\n\n```html\n.test { font: { size: 30em; weight: bold; } }\n```\n\n### 3. Import\n\n- sass 분할된 파일(partial) 은 언더스코어(\\_\\_) 를 붙여 사용한다.\n- 파티셜 파일은 파일 접두어를 생략할 수 있다.\n\n```html\n// __vars.scss $width: 960px; // __header.scss #header { width: $width; } //\n__vars.scss 파일을 호출할때 // style.css @import \"vars\" @import \"header\"\n```\n","slug":"scss","published":1,"updated":"2021-09-24T05:30:38.292Z","photos":[],"link":"","_id":"cktxxl2ie0010vb8z4ksc7gl4","content":"<h3 id=\"1-amp-부모-요소-참조-변수-사용\"><a href=\"#1-amp-부모-요소-참조-변수-사용\" class=\"headerlink\" title=\"1. &amp;부모 요소 참조, $변수 사용\"></a>1. &amp;부모 요소 참조, $변수 사용</h3><ul>\n<li>부모요소의 참조가 필요한 경우엔 <code>&amp;</code> 를 사용한다.</li>\n<li>가상 클래스의 선택자를 지정하는 경우에 참조가 필요</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.myAnchor &#123; color: green; &amp;:hover &#123; text-decoration: underline; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Nesting\"><a href=\"#2-Nesting\" class=\"headerlink\" title=\"2. Nesting\"></a>2. Nesting</h3><ul>\n<li>nesting 프로퍼티에도 사용한다.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test &#123; font: &#123; size: 30em; weight: bold; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Import\"><a href=\"#3-Import\" class=\"headerlink\" title=\"3. Import\"></a>3. Import</h3><ul>\n<li>sass 분할된 파일(partial) 은 언더스코어(__) 를 붙여 사용한다.</li>\n<li>파티셜 파일은 파일 접두어를 생략할 수 있다.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// __vars.scss $width: 960px; // __header.scss #header &#123; width: $width; &#125; //</span><br><span class=\"line\">__vars.scss 파일을 호출할때 // style.css @import &quot;vars&quot; @import &quot;header&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-amp-부모-요소-참조-변수-사용\"><a href=\"#1-amp-부모-요소-참조-변수-사용\" class=\"headerlink\" title=\"1. &amp;부모 요소 참조, $변수 사용\"></a>1. &amp;부모 요소 참조, $변수 사용</h3><ul>\n<li>부모요소의 참조가 필요한 경우엔 <code>&amp;</code> 를 사용한다.</li>\n<li>가상 클래스의 선택자를 지정하는 경우에 참조가 필요</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.myAnchor &#123; color: green; &amp;:hover &#123; text-decoration: underline; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Nesting\"><a href=\"#2-Nesting\" class=\"headerlink\" title=\"2. Nesting\"></a>2. Nesting</h3><ul>\n<li>nesting 프로퍼티에도 사용한다.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.test &#123; font: &#123; size: 30em; weight: bold; &#125; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Import\"><a href=\"#3-Import\" class=\"headerlink\" title=\"3. Import\"></a>3. Import</h3><ul>\n<li>sass 분할된 파일(partial) 은 언더스코어(__) 를 붙여 사용한다.</li>\n<li>파티셜 파일은 파일 접두어를 생략할 수 있다.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// __vars.scss $width: 960px; // __header.scss #header &#123; width: $width; &#125; //</span><br><span class=\"line\">__vars.scss 파일을 호출할때 // style.css @import &quot;vars&quot; @import &quot;header&quot;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"개발환경 세팅하기","date":"2019-09-25T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\n#### 작업환경 세팅하기\n\n##### (2019.09.26) WebStorm 2019.2.2 작업환경 세팅\n\n1. Appearance\n\n```\nTheme: Dracula\nFont: Malgun Gothic\nSize: 12\nLine spacing: 1.2\n```\n\n2. Tools > Terminal\n\n```\nShell path \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i\n```\n\n#### Installer\n\n- WebStorm\n- SourceTree\n- PickPick\n- Slack\n- Jira\n- Zepline\n  v\n\n#### Chrome plugins\n\n- Vue.js devtools\n- 네이버 영어사전\n- Momentum\n- ColorZilla\n- Marinara: Pomodoro® Assistant\n","source":"_posts/settings.md","raw":"---\nlayout: post\ntitle: '개발환경 세팅하기'\ndate: 2019-09-26\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\n#### 작업환경 세팅하기\n\n##### (2019.09.26) WebStorm 2019.2.2 작업환경 세팅\n\n1. Appearance\n\n```\nTheme: Dracula\nFont: Malgun Gothic\nSize: 12\nLine spacing: 1.2\n```\n\n2. Tools > Terminal\n\n```\nShell path \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i\n```\n\n#### Installer\n\n- WebStorm\n- SourceTree\n- PickPick\n- Slack\n- Jira\n- Zepline\n  v\n\n#### Chrome plugins\n\n- Vue.js devtools\n- 네이버 영어사전\n- Momentum\n- ColorZilla\n- Marinara: Pomodoro® Assistant\n","slug":"settings","published":1,"updated":"2021-09-24T05:31:42.528Z","photos":[],"link":"","_id":"cktxxl2ie0012vb8zbhzsc5lc","content":"<h4 id=\"작업환경-세팅하기\"><a href=\"#작업환경-세팅하기\" class=\"headerlink\" title=\"작업환경 세팅하기\"></a>작업환경 세팅하기</h4><h5 id=\"2019-09-26-WebStorm-2019-2-2-작업환경-세팅\"><a href=\"#2019-09-26-WebStorm-2019-2-2-작업환경-세팅\" class=\"headerlink\" title=\"(2019.09.26) WebStorm 2019.2.2 작업환경 세팅\"></a>(2019.09.26) WebStorm 2019.2.2 작업환경 세팅</h5><ol>\n<li>Appearance</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Theme: Dracula</span><br><span class=\"line\">Font: Malgun Gothic</span><br><span class=\"line\">Size: 12</span><br><span class=\"line\">Line spacing: 1.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Tools &gt; Terminal</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shell path &quot;C:\\Program Files\\Git\\bin\\sh.exe&quot; --login -i</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Installer\"><a href=\"#Installer\" class=\"headerlink\" title=\"Installer\"></a>Installer</h4><ul>\n<li>WebStorm</li>\n<li>SourceTree</li>\n<li>PickPick</li>\n<li>Slack</li>\n<li>Jira</li>\n<li>Zepline<br>v</li>\n</ul>\n<h4 id=\"Chrome-plugins\"><a href=\"#Chrome-plugins\" class=\"headerlink\" title=\"Chrome plugins\"></a>Chrome plugins</h4><ul>\n<li>Vue.js devtools</li>\n<li>네이버 영어사전</li>\n<li>Momentum</li>\n<li>ColorZilla</li>\n<li>Marinara: Pomodoro® Assistant</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"작업환경-세팅하기\"><a href=\"#작업환경-세팅하기\" class=\"headerlink\" title=\"작업환경 세팅하기\"></a>작업환경 세팅하기</h4><h5 id=\"2019-09-26-WebStorm-2019-2-2-작업환경-세팅\"><a href=\"#2019-09-26-WebStorm-2019-2-2-작업환경-세팅\" class=\"headerlink\" title=\"(2019.09.26) WebStorm 2019.2.2 작업환경 세팅\"></a>(2019.09.26) WebStorm 2019.2.2 작업환경 세팅</h5><ol>\n<li>Appearance</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Theme: Dracula</span><br><span class=\"line\">Font: Malgun Gothic</span><br><span class=\"line\">Size: 12</span><br><span class=\"line\">Line spacing: 1.2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Tools &gt; Terminal</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shell path &quot;C:\\Program Files\\Git\\bin\\sh.exe&quot; --login -i</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Installer\"><a href=\"#Installer\" class=\"headerlink\" title=\"Installer\"></a>Installer</h4><ul>\n<li>WebStorm</li>\n<li>SourceTree</li>\n<li>PickPick</li>\n<li>Slack</li>\n<li>Jira</li>\n<li>Zepline<br>v</li>\n</ul>\n<h4 id=\"Chrome-plugins\"><a href=\"#Chrome-plugins\" class=\"headerlink\" title=\"Chrome plugins\"></a>Chrome plugins</h4><ul>\n<li>Vue.js devtools</li>\n<li>네이버 영어사전</li>\n<li>Momentum</li>\n<li>ColorZilla</li>\n<li>Marinara: Pomodoro® Assistant</li>\n</ul>\n"},{"layout":"post","title":"IDE 단축키 모음","date":"2020-01-08T15:00:00.000Z","comments":0,"background":"/img/bg-post-11.jpg","_content":"\nIDE 에서 사용할만한 단축키를 모아두자.\n\n1. HTML5 doctype keyboard shortcut\n   - html:5 followed by tab\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Document</title>\n  </head>\n  <body></body>\n</html>\n```\n","source":"_posts/shortcut2.md","raw":"---\nlayout: post\ntitle: 'IDE 단축키 모음'\ndate: 2020-01-09\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-11.jpg'\n---\n\nIDE 에서 사용할만한 단축키를 모아두자.\n\n1. HTML5 doctype keyboard shortcut\n   - html:5 followed by tab\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Document</title>\n  </head>\n  <body></body>\n</html>\n```\n","slug":"shortcut2","published":1,"updated":"2021-09-24T05:30:44.028Z","photos":[],"link":"","_id":"cktxxl2if0014vb8z57vngj6t","content":"<p>IDE 에서 사용할만한 단축키를 모아두자.</p>\n<ol>\n<li>HTML5 doctype keyboard shortcut<ul>\n<li>html:5 followed by tab</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>IDE 에서 사용할만한 단축키를 모아두자.</p>\n<ol>\n<li>HTML5 doctype keyboard shortcut<ul>\n<li>html:5 followed by tab</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Local & Session Storage","date":"2019-10-31T15:00:00.000Z","comments":0,"background":"/img/bg-post-11.jpg","_content":"\n#### 로컬과 세션 스토리지의 차이점?\n\n로컬 스토리지는 사용자가 지우지 않으면 브라우저에 계속 남아있다. (지속적으로 필요한 데이터)\n세션 스토리지는 윈도우나 브라우저 탭을 닫을 경우 제거된다. (일회성 데이터)\n세션 이전에 쿠키가 있었고, 쿠키는 만료 기한이 있는 key-value 저장소이다.\n(참고) [zerocho 블로그][zerocho]\n\n- 쿠키의 용량: 4KB\n\n  - 매 서버 요청마다 서버로 쿠키가 같이 전송된다.\n  - HTTP 요청의 특성상, 요청 대상자를 알기 위해 서버에서는 쿠키를 읽어 파악한다.\n\n- 스토리지 용량: 5MB~ 10MB\n\n  - 도메인 별 용량 제한이 있다. (프로토콜, 호스트, 포트가 같으면 스토리지를 공유)\n  - 로컬 스토리지: 사용자의 설정(보안에 민감하지 않은)이나 유저 커스텀을 위한 데이터를 저장한다.\n  - 세션 스토리지: 데이터가 영구적으로 보관되지 않는다. (window.sessionStorage)\n\n- IndexDB 용량: 50MB\n\n[zerocho]: https://www.zerocho.com/category/HTML&DOM/post/5918515b1ed39f00182d3048\n","source":"_posts/storage.md","raw":"---\nlayout: post\ntitle: 'Local & Session Storage'\ndate: 2019-11-01\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-11.jpg'\n---\n\n#### 로컬과 세션 스토리지의 차이점?\n\n로컬 스토리지는 사용자가 지우지 않으면 브라우저에 계속 남아있다. (지속적으로 필요한 데이터)\n세션 스토리지는 윈도우나 브라우저 탭을 닫을 경우 제거된다. (일회성 데이터)\n세션 이전에 쿠키가 있었고, 쿠키는 만료 기한이 있는 key-value 저장소이다.\n(참고) [zerocho 블로그][zerocho]\n\n- 쿠키의 용량: 4KB\n\n  - 매 서버 요청마다 서버로 쿠키가 같이 전송된다.\n  - HTTP 요청의 특성상, 요청 대상자를 알기 위해 서버에서는 쿠키를 읽어 파악한다.\n\n- 스토리지 용량: 5MB~ 10MB\n\n  - 도메인 별 용량 제한이 있다. (프로토콜, 호스트, 포트가 같으면 스토리지를 공유)\n  - 로컬 스토리지: 사용자의 설정(보안에 민감하지 않은)이나 유저 커스텀을 위한 데이터를 저장한다.\n  - 세션 스토리지: 데이터가 영구적으로 보관되지 않는다. (window.sessionStorage)\n\n- IndexDB 용량: 50MB\n\n[zerocho]: https://www.zerocho.com/category/HTML&DOM/post/5918515b1ed39f00182d3048\n","slug":"storage","published":1,"updated":"2021-09-24T05:30:50.174Z","photos":[],"link":"","_id":"cktxxl2ih001cvb8zae8yat9k","content":"<h4 id=\"로컬과-세션-스토리지의-차이점\"><a href=\"#로컬과-세션-스토리지의-차이점\" class=\"headerlink\" title=\"로컬과 세션 스토리지의 차이점?\"></a>로컬과 세션 스토리지의 차이점?</h4><p>로컬 스토리지는 사용자가 지우지 않으면 브라우저에 계속 남아있다. (지속적으로 필요한 데이터)<br>세션 스토리지는 윈도우나 브라우저 탭을 닫을 경우 제거된다. (일회성 데이터)<br>세션 이전에 쿠키가 있었고, 쿠키는 만료 기한이 있는 key-value 저장소이다.<br>(참고) <a href=\"https://www.zerocho.com/category/HTML&DOM/post/5918515b1ed39f00182d3048\">zerocho 블로그</a></p>\n<ul>\n<li><p>쿠키의 용량: 4KB</p>\n<ul>\n<li>매 서버 요청마다 서버로 쿠키가 같이 전송된다.</li>\n<li>HTTP 요청의 특성상, 요청 대상자를 알기 위해 서버에서는 쿠키를 읽어 파악한다.</li>\n</ul>\n</li>\n<li><p>스토리지 용량: 5MB~ 10MB</p>\n<ul>\n<li>도메인 별 용량 제한이 있다. (프로토콜, 호스트, 포트가 같으면 스토리지를 공유)</li>\n<li>로컬 스토리지: 사용자의 설정(보안에 민감하지 않은)이나 유저 커스텀을 위한 데이터를 저장한다.</li>\n<li>세션 스토리지: 데이터가 영구적으로 보관되지 않는다. (window.sessionStorage)</li>\n</ul>\n</li>\n<li><p>IndexDB 용량: 50MB</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"로컬과-세션-스토리지의-차이점\"><a href=\"#로컬과-세션-스토리지의-차이점\" class=\"headerlink\" title=\"로컬과 세션 스토리지의 차이점?\"></a>로컬과 세션 스토리지의 차이점?</h4><p>로컬 스토리지는 사용자가 지우지 않으면 브라우저에 계속 남아있다. (지속적으로 필요한 데이터)<br>세션 스토리지는 윈도우나 브라우저 탭을 닫을 경우 제거된다. (일회성 데이터)<br>세션 이전에 쿠키가 있었고, 쿠키는 만료 기한이 있는 key-value 저장소이다.<br>(참고) <a href=\"https://www.zerocho.com/category/HTML&DOM/post/5918515b1ed39f00182d3048\">zerocho 블로그</a></p>\n<ul>\n<li><p>쿠키의 용량: 4KB</p>\n<ul>\n<li>매 서버 요청마다 서버로 쿠키가 같이 전송된다.</li>\n<li>HTTP 요청의 특성상, 요청 대상자를 알기 위해 서버에서는 쿠키를 읽어 파악한다.</li>\n</ul>\n</li>\n<li><p>스토리지 용량: 5MB~ 10MB</p>\n<ul>\n<li>도메인 별 용량 제한이 있다. (프로토콜, 호스트, 포트가 같으면 스토리지를 공유)</li>\n<li>로컬 스토리지: 사용자의 설정(보안에 민감하지 않은)이나 유저 커스텀을 위한 데이터를 저장한다.</li>\n<li>세션 스토리지: 데이터가 영구적으로 보관되지 않는다. (window.sessionStorage)</li>\n</ul>\n</li>\n<li><p>IndexDB 용량: 50MB</p>\n</li>\n</ul>\n"},{"layout":"post","title":"Vuejs 테스트 적용기","date":"2019-10-16T15:00:00.000Z","comments":0,"background":"/img/bg-post-08.jpg","_content":"\nvue-cli 3.x 를 받게되면 자동으로 test 를 할 수 있는 환경이 구축되는데 프로젝트가 그렇게 쉽게 올라가는 건 아니니\n기존 프로젝트를 위한 2.x 에 테스트 작업환경을 추가를 해보았다. 일단은 가장 많이 사용하는 jest 로 해보았다.\n[Vue Test Util] [Vue Test Util] 을 참고하고 [joshua1988] [joshua1988]님 블로그르 참고하면서 현재 스펙에 맞는 버전으로 설치해보았다.\n\n유틸 라이브러리 설치\n\n```js\nnpm install --save-dev jest @vue/test-utils vue-jest babel-jest\n```\n\n이렇게만 설치하고 babelrc 파일을 추가하는데 babel 스펙이 변하면서 아래와 같이 변경해준다.\n\n> Cannot find moudle 'babel-preset-env' - Div you mean \"@babel/env?\"\n\n라고 물어본다.. 아래와 같이 파일을 변경하면 이제 다른 오류를 볼 수 있다.\n\n```js\n// babelrc\n// as-is\n{\n  \"presets\": [[\"env\", { \"modules\": false }]],\n  \"env\": {\n    \"test\": {\n      \"presets\": [[\"env\", { \"targets\": { \"node\": \"current\" } }]]\n    }\n  }\n}\n\n// to-be\n{\n  \"presets\": [[\"@babel/preset-env\", { \"modules\": false }]],\n  \"env\": {\n    \"test\": {\n      \"presets\": [[\"@babel/preset-env\", { \"targets\": { \"node\": \"current\" } }]]\n    }\n  }\n}\n```\n\n```js\n// package.json\n{...\n    \"jest\": {\n        \"transform\": {\n          \".*\\\\.(vue)$\": \"vue-jest\",\n          \"^.+\\\\.js$\": \"babel-jest\"\n        },\n        \"collectCoverage\": true\n    }\n9}\n```\n\n> Requires Babel \"^7.0.0-0\", but was loaded with \"6.x\"\n\n이제서야 필요한 파일을 알려준다... 이렇게 해결을 하고 나면, 실제로 test/ 파일에 샘플 코드를 작성할 수 있다.\n\n```js\n$ npm insatll -D babel-core@^7.0.0-0\n```\n\n> Cannot find module '@/components/HelloWorld.vue' from 'helloworld.test.js'\n\n@ 절대주소는 일단 모듈로 인식해서 파일을 찾을 수 없다한다. 우선은 상대경로로 작업해주자.\n\n```js\n// helloworld.test.js\nimport HelloWorld from '../src/components/HelloWorld.vue';\n```\n\n[vue test util]: https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-jest.html\n[joshua1988]: https://joshua1988.github.io/vue-camp/testing/getting-started.html#%EB%B7%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\n","source":"_posts/test-util.md","raw":"---\nlayout: post\ntitle: 'Vuejs 테스트 적용기'\ndate: 2019-10-17\ncategories: javascript\ncomments: false\nbackground: '/img/bg-post-08.jpg'\n---\n\nvue-cli 3.x 를 받게되면 자동으로 test 를 할 수 있는 환경이 구축되는데 프로젝트가 그렇게 쉽게 올라가는 건 아니니\n기존 프로젝트를 위한 2.x 에 테스트 작업환경을 추가를 해보았다. 일단은 가장 많이 사용하는 jest 로 해보았다.\n[Vue Test Util] [Vue Test Util] 을 참고하고 [joshua1988] [joshua1988]님 블로그르 참고하면서 현재 스펙에 맞는 버전으로 설치해보았다.\n\n유틸 라이브러리 설치\n\n```js\nnpm install --save-dev jest @vue/test-utils vue-jest babel-jest\n```\n\n이렇게만 설치하고 babelrc 파일을 추가하는데 babel 스펙이 변하면서 아래와 같이 변경해준다.\n\n> Cannot find moudle 'babel-preset-env' - Div you mean \"@babel/env?\"\n\n라고 물어본다.. 아래와 같이 파일을 변경하면 이제 다른 오류를 볼 수 있다.\n\n```js\n// babelrc\n// as-is\n{\n  \"presets\": [[\"env\", { \"modules\": false }]],\n  \"env\": {\n    \"test\": {\n      \"presets\": [[\"env\", { \"targets\": { \"node\": \"current\" } }]]\n    }\n  }\n}\n\n// to-be\n{\n  \"presets\": [[\"@babel/preset-env\", { \"modules\": false }]],\n  \"env\": {\n    \"test\": {\n      \"presets\": [[\"@babel/preset-env\", { \"targets\": { \"node\": \"current\" } }]]\n    }\n  }\n}\n```\n\n```js\n// package.json\n{...\n    \"jest\": {\n        \"transform\": {\n          \".*\\\\.(vue)$\": \"vue-jest\",\n          \"^.+\\\\.js$\": \"babel-jest\"\n        },\n        \"collectCoverage\": true\n    }\n9}\n```\n\n> Requires Babel \"^7.0.0-0\", but was loaded with \"6.x\"\n\n이제서야 필요한 파일을 알려준다... 이렇게 해결을 하고 나면, 실제로 test/ 파일에 샘플 코드를 작성할 수 있다.\n\n```js\n$ npm insatll -D babel-core@^7.0.0-0\n```\n\n> Cannot find module '@/components/HelloWorld.vue' from 'helloworld.test.js'\n\n@ 절대주소는 일단 모듈로 인식해서 파일을 찾을 수 없다한다. 우선은 상대경로로 작업해주자.\n\n```js\n// helloworld.test.js\nimport HelloWorld from '../src/components/HelloWorld.vue';\n```\n\n[vue test util]: https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-jest.html\n[joshua1988]: https://joshua1988.github.io/vue-camp/testing/getting-started.html#%EB%B7%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\n","slug":"test-util","published":1,"updated":"2021-09-24T05:31:15.891Z","photos":[],"link":"","_id":"cktxxl2ii001dvb8zdpnr6cb4","content":"<p>vue-cli 3.x 를 받게되면 자동으로 test 를 할 수 있는 환경이 구축되는데 프로젝트가 그렇게 쉽게 올라가는 건 아니니<br>기존 프로젝트를 위한 2.x 에 테스트 작업환경을 추가를 해보았다. 일단은 가장 많이 사용하는 jest 로 해보았다.<br><a href=\"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-jest.html\">Vue Test Util</a> <a href=\"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-jest.html\">Vue Test Util</a> 을 참고하고 <a href=\"https://joshua1988.github.io/vue-camp/testing/getting-started.html#%EB%B7%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\">joshua1988</a> <a href=\"https://joshua1988.github.io/vue-camp/testing/getting-started.html#%EB%B7%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\">joshua1988</a>님 블로그르 참고하면서 현재 스펙에 맞는 버전으로 설치해보았다.</p>\n<p>유틸 라이브러리 설치</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev jest @vue/test-utils vue-jest babel-jest</span><br></pre></td></tr></table></figure>\n\n<p>이렇게만 설치하고 babelrc 파일을 추가하는데 babel 스펙이 변하면서 아래와 같이 변경해준다.</p>\n<blockquote>\n<p>Cannot find moudle ‘babel-preset-env’ - Div you mean “@babel/env?”</p>\n</blockquote>\n<p>라고 물어본다.. 아래와 같이 파일을 변경하면 이제 다른 오류를 볼 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babelrc</span></span><br><span class=\"line\"><span class=\"comment\">// as-is</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>, &#123; <span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span> &#125;]],</span><br><span class=\"line\">  <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>, &#123; <span class=\"string\">&quot;targets&quot;</span>: &#123; <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;current&quot;</span> &#125; &#125;]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to-be</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123; <span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span> &#125;]],</span><br><span class=\"line\">  <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123; <span class=\"string\">&quot;targets&quot;</span>: &#123; <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;current&quot;</span> &#125; &#125;]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;...</span><br><span class=\"line\">    <span class=\"string\">&quot;jest&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;transform&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;.*\\\\.(vue)$&quot;</span>: <span class=\"string\">&quot;vue-jest&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;^.+\\\\.js$&quot;</span>: <span class=\"string\">&quot;babel-jest&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;collectCoverage&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Requires Babel “^7.0.0-0”, but was loaded with “6.x”</p>\n</blockquote>\n<p>이제서야 필요한 파일을 알려준다… 이렇게 해결을 하고 나면, 실제로 test/ 파일에 샘플 코드를 작성할 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm insatll -D babel-core@^<span class=\"number\">7.0</span><span class=\"number\">.0</span>-<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Cannot find module ‘@/components/HelloWorld.vue’ from ‘helloworld.test.js’</p>\n</blockquote>\n<p>@ 절대주소는 일단 모듈로 인식해서 파일을 찾을 수 없다한다. 우선은 상대경로로 작업해주자.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// helloworld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../src/components/HelloWorld.vue&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>vue-cli 3.x 를 받게되면 자동으로 test 를 할 수 있는 환경이 구축되는데 프로젝트가 그렇게 쉽게 올라가는 건 아니니<br>기존 프로젝트를 위한 2.x 에 테스트 작업환경을 추가를 해보았다. 일단은 가장 많이 사용하는 jest 로 해보았다.<br><a href=\"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-jest.html\">Vue Test Util</a> <a href=\"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-jest.html\">Vue Test Util</a> 을 참고하고 <a href=\"https://joshua1988.github.io/vue-camp/testing/getting-started.html#%EB%B7%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\">joshua1988</a> <a href=\"https://joshua1988.github.io/vue-camp/testing/getting-started.html#%EB%B7%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\">joshua1988</a>님 블로그르 참고하면서 현재 스펙에 맞는 버전으로 설치해보았다.</p>\n<p>유틸 라이브러리 설치</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev jest @vue/test-utils vue-jest babel-jest</span><br></pre></td></tr></table></figure>\n\n<p>이렇게만 설치하고 babelrc 파일을 추가하는데 babel 스펙이 변하면서 아래와 같이 변경해준다.</p>\n<blockquote>\n<p>Cannot find moudle ‘babel-preset-env’ - Div you mean “@babel/env?”</p>\n</blockquote>\n<p>라고 물어본다.. 아래와 같이 파일을 변경하면 이제 다른 오류를 볼 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babelrc</span></span><br><span class=\"line\"><span class=\"comment\">// as-is</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>, &#123; <span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span> &#125;]],</span><br><span class=\"line\">  <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>, &#123; <span class=\"string\">&quot;targets&quot;</span>: &#123; <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;current&quot;</span> &#125; &#125;]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to-be</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123; <span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span> &#125;]],</span><br><span class=\"line\">  <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123; <span class=\"string\">&quot;targets&quot;</span>: &#123; <span class=\"string\">&quot;node&quot;</span>: <span class=\"string\">&quot;current&quot;</span> &#125; &#125;]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;...</span><br><span class=\"line\">    <span class=\"string\">&quot;jest&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;transform&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;.*\\\\.(vue)$&quot;</span>: <span class=\"string\">&quot;vue-jest&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;^.+\\\\.js$&quot;</span>: <span class=\"string\">&quot;babel-jest&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;collectCoverage&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"number\">9</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Requires Babel “^7.0.0-0”, but was loaded with “6.x”</p>\n</blockquote>\n<p>이제서야 필요한 파일을 알려준다… 이렇게 해결을 하고 나면, 실제로 test/ 파일에 샘플 코드를 작성할 수 있다.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm insatll -D babel-core@^<span class=\"number\">7.0</span><span class=\"number\">.0</span>-<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Cannot find module ‘@/components/HelloWorld.vue’ from ‘helloworld.test.js’</p>\n</blockquote>\n<p>@ 절대주소는 일단 모듈로 인식해서 파일을 찾을 수 없다한다. 우선은 상대경로로 작업해주자.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// helloworld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../src/components/HelloWorld.vue&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"post","title":"Vue 이야기","date":"2019-08-13T15:00:00.000Z","comments":0,"background":"/img/bg-index.jpg","_content":"\nMVC 패턴이 도입되면서 Controller 에서 데이터 작업들에 대한 역할 분담을 해왔고,\nVue 는 MVVM 패턴으로 중간에 ViewModel 객체를 두고 데이터에 대한 의존성을 분리하기 위해 사용한 패턴이다.\n같은 데이터인데 몇가지 조합해서 가공이 필요한 경우에 View Model 부분에서 수정을 하게끔 정해져있다. \n(Dom listener, Directives, Data Binding 등등..)\n\n- 렌더링은 React 랑 유사하고 Virtual DOM 을 사용해서 가볍고 빠름.\n- 양방향 데이터 바인딩 (Vue 인스턴스와 Template) 이 모두 데이터에 접근할 수 있음. (v-model)\n- 뷰는 인스턴스가 생성되면 데이터 바인딩을 할 동안 루트요소의 모든 자식 노드를 탐색하면서 데이터 변경에 반응함.\n- 뷰는 DOM 을 비동기적으로 업데이트하고 `Vue.nextTick(callback)` 을 사용하면 업데이트된 이후를 보장할 수 있음.\n\n그런데 이러한 계층 구조는 데이터 뿐만 아니라. 컴포넌트 상에서도 접목된다.\n \n그 이후로 컴포넌트라는 개념이 자리잡았고, 비지니스 로직과 View 로직이 분리되면서 HTML 작업만 따로 작업을 할 수도 있게 되었다. \n그러면서 공통적으로 사용할 UI 인 경우엔 컴포넌트로 분리하고 필요하면 데이터만 변경해서 사용할 수 있게 만들어 놓게 되었다.\n\n그리고 이렇게 발전한 사용법으로 Vue 를 접했을 땐, 자식 컴포넌트는 이미 부모 레벨의 정보를 들고 있을 수 있게 되었단걸 알게 되었다.\n\n#### 부모에서 자식 계층으로 정보를 전달하는 방법은?\n공통 컴포넌트라고 하면 보통은 제일 마지막 자식 계층일 경우가 많다. \n그래서 이 계층에서는 mounted 에서 부모의 clientHeight 를 구해올 수 있다. \n\n``` js\nthis.$parent\nthis.$el.parent\n```\n\n#### Vue Component 에 타입스크립트 해서 적용해본 사례는?\nSFC(Single File Component) 는 Vue가 권장하는 Vue 컴포넌트 전용 파일 포맷이다. 한 파일 안에 템플릿과 자바스크립트 그리고 CSS까지 정의한다. \n개발자가 클래스를 정의하기보다는 클래스를 만들 수 있는 옵션을 정의하는 형태로 개발한다. \n엄격한 타입의 언어를 다루던 개발자들이 자바스크립트를 다뤄야할때 완충 역할로 타입스크립트를 사용했고, \n타입은 어플리케이션 설계 전체에 영향을 주는 것이라 필요하게 되었다라고 말하는 [shiren][shiren]님의 글을 보게 되었다는데 아마\n상당한 시행착오를 겪은 걸 보고, 우리도 Vue3로 전환하면 사용하게 될 거 같다는 생각이 든다.\n  \n\n### Vue Test Util \n[joshua][joshua] 님 블로그에 보면, vue-cli 로 자동으로 설치가 된다하였지만, 기존에 만들었던 프로젝트는 vue-cli(2.x) 이라 모듈 설치방법으로 진행해봤다.\njest 라이브러리 설치\n``` js \nnpm install jest @vue/test-utils vue-jest babel-jest --save-dev\n```\n\n#### ESLint 적용하기\nstandard 를 사용해보고 싶어서 적용했고, indent만 4칸만 지정했다. \n`npm run eslint --fix` 로 사용이 가능하다.  \n  \n``` js\n// 기본설치\nnpm install -D --save eslint eslint=plugin-vue\n\n// 추가사항 \nnpm install -D --save eslint-plugin-import\nnpm install -D --save eslint-plugin-node\nnpm install -D --save eslint-plugin-promise\nnpm install -D --save eslint-plugin-standard\n```\n\nindent 만 설정한 기본 파일로 세팅했다. \n``` js\n// .eslint.js\n\nmodule.exports = {\n    root: true,\n    extends: [\n        'standard',\n        'plugin:vue/recommended'\n    ],\n    rules: {\n        indent: ['error', 4]\n    }\n}\n```\n[shiren]: https://ui.toast.com/weekly-pick/ko_20190327/\n[joshua]: https://joshua1988.github.io/vue-camp/testing/vue-test-util.html#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\n[gongzza]: https://gongzza.github.io/javascript/vuejs/vue-unit-testing-with-jest/\n[jest]: https://jestjs.io/docs/en/getting-started\n\n\n#### Child 의 이벤트를 전달하는 방법 (EventBus)\n\n```js\n// Child.vue\n<template>\n    <div>\n        <input @input=\"event => this.$emit('inputChange', event)\" />\n    </div>\n</template>\n\n// Parent.vue\n<template>\n    <div>\n        <Child v-on:inputChange=\"handleChange\" />\n        <p>Value: {{value}}</p>\n    </div>\n</template>\n<script>\n    import Child from './Child.vue'\n\n    export default {\n        data() {\n            return {\n                value: '',\n            };\n        },\n        components: {\n            Child,\n        },\n        methods: {\n            handleChange(event) {\n                const { value } = event.target;\n                this.value = value;\n            }\n        }\n    }\n</script>\n```\n\nv-on:inputChange 는 심플하게 @inputChange 이렇게 사용할 수 있고,\n@input 입력이 되면, Parent 의 handleChange 메서드에 값이 전달된다.\n이걸 내 방법으로 표현하면, `this.$emit('inputChange', event)` 이벤트 명을 정해주면 hook 이 걸려서\n동작한 값을 해당 이벤트 명에 전달해줄 수 있다는 의미가 될 수 있겠다.\n\n출처: https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component\n","source":"_posts/vuejs.md","raw":"---\nlayout: post\ntitle:  \"Vue 이야기\"\ndate:   2019-08-14\ncategories: javascript\ncomments: false\nbackground: '/img/bg-index.jpg'\n---\n\nMVC 패턴이 도입되면서 Controller 에서 데이터 작업들에 대한 역할 분담을 해왔고,\nVue 는 MVVM 패턴으로 중간에 ViewModel 객체를 두고 데이터에 대한 의존성을 분리하기 위해 사용한 패턴이다.\n같은 데이터인데 몇가지 조합해서 가공이 필요한 경우에 View Model 부분에서 수정을 하게끔 정해져있다. \n(Dom listener, Directives, Data Binding 등등..)\n\n- 렌더링은 React 랑 유사하고 Virtual DOM 을 사용해서 가볍고 빠름.\n- 양방향 데이터 바인딩 (Vue 인스턴스와 Template) 이 모두 데이터에 접근할 수 있음. (v-model)\n- 뷰는 인스턴스가 생성되면 데이터 바인딩을 할 동안 루트요소의 모든 자식 노드를 탐색하면서 데이터 변경에 반응함.\n- 뷰는 DOM 을 비동기적으로 업데이트하고 `Vue.nextTick(callback)` 을 사용하면 업데이트된 이후를 보장할 수 있음.\n\n그런데 이러한 계층 구조는 데이터 뿐만 아니라. 컴포넌트 상에서도 접목된다.\n \n그 이후로 컴포넌트라는 개념이 자리잡았고, 비지니스 로직과 View 로직이 분리되면서 HTML 작업만 따로 작업을 할 수도 있게 되었다. \n그러면서 공통적으로 사용할 UI 인 경우엔 컴포넌트로 분리하고 필요하면 데이터만 변경해서 사용할 수 있게 만들어 놓게 되었다.\n\n그리고 이렇게 발전한 사용법으로 Vue 를 접했을 땐, 자식 컴포넌트는 이미 부모 레벨의 정보를 들고 있을 수 있게 되었단걸 알게 되었다.\n\n#### 부모에서 자식 계층으로 정보를 전달하는 방법은?\n공통 컴포넌트라고 하면 보통은 제일 마지막 자식 계층일 경우가 많다. \n그래서 이 계층에서는 mounted 에서 부모의 clientHeight 를 구해올 수 있다. \n\n``` js\nthis.$parent\nthis.$el.parent\n```\n\n#### Vue Component 에 타입스크립트 해서 적용해본 사례는?\nSFC(Single File Component) 는 Vue가 권장하는 Vue 컴포넌트 전용 파일 포맷이다. 한 파일 안에 템플릿과 자바스크립트 그리고 CSS까지 정의한다. \n개발자가 클래스를 정의하기보다는 클래스를 만들 수 있는 옵션을 정의하는 형태로 개발한다. \n엄격한 타입의 언어를 다루던 개발자들이 자바스크립트를 다뤄야할때 완충 역할로 타입스크립트를 사용했고, \n타입은 어플리케이션 설계 전체에 영향을 주는 것이라 필요하게 되었다라고 말하는 [shiren][shiren]님의 글을 보게 되었다는데 아마\n상당한 시행착오를 겪은 걸 보고, 우리도 Vue3로 전환하면 사용하게 될 거 같다는 생각이 든다.\n  \n\n### Vue Test Util \n[joshua][joshua] 님 블로그에 보면, vue-cli 로 자동으로 설치가 된다하였지만, 기존에 만들었던 프로젝트는 vue-cli(2.x) 이라 모듈 설치방법으로 진행해봤다.\njest 라이브러리 설치\n``` js \nnpm install jest @vue/test-utils vue-jest babel-jest --save-dev\n```\n\n#### ESLint 적용하기\nstandard 를 사용해보고 싶어서 적용했고, indent만 4칸만 지정했다. \n`npm run eslint --fix` 로 사용이 가능하다.  \n  \n``` js\n// 기본설치\nnpm install -D --save eslint eslint=plugin-vue\n\n// 추가사항 \nnpm install -D --save eslint-plugin-import\nnpm install -D --save eslint-plugin-node\nnpm install -D --save eslint-plugin-promise\nnpm install -D --save eslint-plugin-standard\n```\n\nindent 만 설정한 기본 파일로 세팅했다. \n``` js\n// .eslint.js\n\nmodule.exports = {\n    root: true,\n    extends: [\n        'standard',\n        'plugin:vue/recommended'\n    ],\n    rules: {\n        indent: ['error', 4]\n    }\n}\n```\n[shiren]: https://ui.toast.com/weekly-pick/ko_20190327/\n[joshua]: https://joshua1988.github.io/vue-camp/testing/vue-test-util.html#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\n[gongzza]: https://gongzza.github.io/javascript/vuejs/vue-unit-testing-with-jest/\n[jest]: https://jestjs.io/docs/en/getting-started\n\n\n#### Child 의 이벤트를 전달하는 방법 (EventBus)\n\n```js\n// Child.vue\n<template>\n    <div>\n        <input @input=\"event => this.$emit('inputChange', event)\" />\n    </div>\n</template>\n\n// Parent.vue\n<template>\n    <div>\n        <Child v-on:inputChange=\"handleChange\" />\n        <p>Value: {{value}}</p>\n    </div>\n</template>\n<script>\n    import Child from './Child.vue'\n\n    export default {\n        data() {\n            return {\n                value: '',\n            };\n        },\n        components: {\n            Child,\n        },\n        methods: {\n            handleChange(event) {\n                const { value } = event.target;\n                this.value = value;\n            }\n        }\n    }\n</script>\n```\n\nv-on:inputChange 는 심플하게 @inputChange 이렇게 사용할 수 있고,\n@input 입력이 되면, Parent 의 handleChange 메서드에 값이 전달된다.\n이걸 내 방법으로 표현하면, `this.$emit('inputChange', event)` 이벤트 명을 정해주면 hook 이 걸려서\n동작한 값을 해당 이벤트 명에 전달해줄 수 있다는 의미가 될 수 있겠다.\n\n출처: https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component\n","slug":"vuejs","published":1,"updated":"2021-09-24T05:35:47.227Z","photos":[],"link":"","_id":"cktxxl2ii001evb8z568fgmcc","content":"<p>MVC 패턴이 도입되면서 Controller 에서 데이터 작업들에 대한 역할 분담을 해왔고,<br>Vue 는 MVVM 패턴으로 중간에 ViewModel 객체를 두고 데이터에 대한 의존성을 분리하기 위해 사용한 패턴이다.<br>같은 데이터인데 몇가지 조합해서 가공이 필요한 경우에 View Model 부분에서 수정을 하게끔 정해져있다.<br>(Dom listener, Directives, Data Binding 등등..)</p>\n<ul>\n<li>렌더링은 React 랑 유사하고 Virtual DOM 을 사용해서 가볍고 빠름.</li>\n<li>양방향 데이터 바인딩 (Vue 인스턴스와 Template) 이 모두 데이터에 접근할 수 있음. (v-model)</li>\n<li>뷰는 인스턴스가 생성되면 데이터 바인딩을 할 동안 루트요소의 모든 자식 노드를 탐색하면서 데이터 변경에 반응함.</li>\n<li>뷰는 DOM 을 비동기적으로 업데이트하고 <code>Vue.nextTick(callback)</code> 을 사용하면 업데이트된 이후를 보장할 수 있음.</li>\n</ul>\n<p>그런데 이러한 계층 구조는 데이터 뿐만 아니라. 컴포넌트 상에서도 접목된다.</p>\n<p>그 이후로 컴포넌트라는 개념이 자리잡았고, 비지니스 로직과 View 로직이 분리되면서 HTML 작업만 따로 작업을 할 수도 있게 되었다.<br>그러면서 공통적으로 사용할 UI 인 경우엔 컴포넌트로 분리하고 필요하면 데이터만 변경해서 사용할 수 있게 만들어 놓게 되었다.</p>\n<p>그리고 이렇게 발전한 사용법으로 Vue 를 접했을 땐, 자식 컴포넌트는 이미 부모 레벨의 정보를 들고 있을 수 있게 되었단걸 알게 되었다.</p>\n<h4 id=\"부모에서-자식-계층으로-정보를-전달하는-방법은\"><a href=\"#부모에서-자식-계층으로-정보를-전달하는-방법은\" class=\"headerlink\" title=\"부모에서 자식 계층으로 정보를 전달하는 방법은?\"></a>부모에서 자식 계층으로 정보를 전달하는 방법은?</h4><p>공통 컴포넌트라고 하면 보통은 제일 마지막 자식 계층일 경우가 많다.<br>그래서 이 계층에서는 mounted 에서 부모의 clientHeight 를 구해올 수 있다. </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$parent</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$el.parent</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Vue-Component-에-타입스크립트-해서-적용해본-사례는\"><a href=\"#Vue-Component-에-타입스크립트-해서-적용해본-사례는\" class=\"headerlink\" title=\"Vue Component 에 타입스크립트 해서 적용해본 사례는?\"></a>Vue Component 에 타입스크립트 해서 적용해본 사례는?</h4><p>SFC(Single File Component) 는 Vue가 권장하는 Vue 컴포넌트 전용 파일 포맷이다. 한 파일 안에 템플릿과 자바스크립트 그리고 CSS까지 정의한다.<br>개발자가 클래스를 정의하기보다는 클래스를 만들 수 있는 옵션을 정의하는 형태로 개발한다.<br>엄격한 타입의 언어를 다루던 개발자들이 자바스크립트를 다뤄야할때 완충 역할로 타입스크립트를 사용했고,<br>타입은 어플리케이션 설계 전체에 영향을 주는 것이라 필요하게 되었다라고 말하는 <a href=\"https://ui.toast.com/weekly-pick/ko_20190327/\">shiren</a>님의 글을 보게 되었다는데 아마<br>상당한 시행착오를 겪은 걸 보고, 우리도 Vue3로 전환하면 사용하게 될 거 같다는 생각이 든다.</p>\n<h3 id=\"Vue-Test-Util\"><a href=\"#Vue-Test-Util\" class=\"headerlink\" title=\"Vue Test Util\"></a>Vue Test Util</h3><p><a href=\"https://joshua1988.github.io/vue-camp/testing/vue-test-util.html#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\">joshua</a> 님 블로그에 보면, vue-cli 로 자동으로 설치가 된다하였지만, 기존에 만들었던 프로젝트는 vue-cli(2.x) 이라 모듈 설치방법으로 진행해봤다.<br>jest 라이브러리 설치</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jest @vue/test-utils vue-jest babel-jest --save-dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ESLint-적용하기\"><a href=\"#ESLint-적용하기\" class=\"headerlink\" title=\"ESLint 적용하기\"></a>ESLint 적용하기</h4><p>standard 를 사용해보고 싶어서 적용했고, indent만 4칸만 지정했다.<br><code>npm run eslint --fix</code> 로 사용이 가능하다.  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 기본설치</span></span><br><span class=\"line\">npm install -D --save eslint eslint=plugin-vue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 추가사항 </span></span><br><span class=\"line\">npm install -D --save eslint-plugin-<span class=\"keyword\">import</span></span><br><span class=\"line\">npm install -D --save eslint-plugin-node</span><br><span class=\"line\">npm install -D --save eslint-plugin-promise</span><br><span class=\"line\">npm install -D --save eslint-plugin-standard</span><br></pre></td></tr></table></figure>\n\n<p>indent 만 설정한 기본 파일로 세팅했다. </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .eslint.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">root</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">extends</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;standard&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:vue/recommended&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">indent</span>: [<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Child-의-이벤트를-전달하는-방법-EventBus\"><a href=\"#Child-의-이벤트를-전달하는-방법-EventBus\" class=\"headerlink\" title=\"Child 의 이벤트를 전달하는 방법 (EventBus)\"></a>Child 의 이벤트를 전달하는 방법 (EventBus)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Child.vue</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;event =&gt; this.$emit(&#x27;inputChange&#x27;, event)&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Parent.vue</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">v-on:inputChange</span>=<span class=\"string\">&quot;handleChange&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Value: &#123;&#123;value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Child.vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"attr\">value</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">components</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            Child,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"function\"><span class=\"title\">handleChange</span>(<span class=\"params\">event</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"keyword\">const</span> &#123; value &#125; = event.target;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"built_in\">this</span>.value = value;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>v-on:inputChange 는 심플하게 @inputChange 이렇게 사용할 수 있고,<br>@input 입력이 되면, Parent 의 handleChange 메서드에 값이 전달된다.<br>이걸 내 방법으로 표현하면, <code>this.$emit(&#39;inputChange&#39;, event)</code> 이벤트 명을 정해주면 hook 이 걸려서<br>동작한 값을 해당 이벤트 명에 전달해줄 수 있다는 의미가 될 수 있겠다.</p>\n<p>출처: <a href=\"https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component\">https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MVC 패턴이 도입되면서 Controller 에서 데이터 작업들에 대한 역할 분담을 해왔고,<br>Vue 는 MVVM 패턴으로 중간에 ViewModel 객체를 두고 데이터에 대한 의존성을 분리하기 위해 사용한 패턴이다.<br>같은 데이터인데 몇가지 조합해서 가공이 필요한 경우에 View Model 부분에서 수정을 하게끔 정해져있다.<br>(Dom listener, Directives, Data Binding 등등..)</p>\n<ul>\n<li>렌더링은 React 랑 유사하고 Virtual DOM 을 사용해서 가볍고 빠름.</li>\n<li>양방향 데이터 바인딩 (Vue 인스턴스와 Template) 이 모두 데이터에 접근할 수 있음. (v-model)</li>\n<li>뷰는 인스턴스가 생성되면 데이터 바인딩을 할 동안 루트요소의 모든 자식 노드를 탐색하면서 데이터 변경에 반응함.</li>\n<li>뷰는 DOM 을 비동기적으로 업데이트하고 <code>Vue.nextTick(callback)</code> 을 사용하면 업데이트된 이후를 보장할 수 있음.</li>\n</ul>\n<p>그런데 이러한 계층 구조는 데이터 뿐만 아니라. 컴포넌트 상에서도 접목된다.</p>\n<p>그 이후로 컴포넌트라는 개념이 자리잡았고, 비지니스 로직과 View 로직이 분리되면서 HTML 작업만 따로 작업을 할 수도 있게 되었다.<br>그러면서 공통적으로 사용할 UI 인 경우엔 컴포넌트로 분리하고 필요하면 데이터만 변경해서 사용할 수 있게 만들어 놓게 되었다.</p>\n<p>그리고 이렇게 발전한 사용법으로 Vue 를 접했을 땐, 자식 컴포넌트는 이미 부모 레벨의 정보를 들고 있을 수 있게 되었단걸 알게 되었다.</p>\n<h4 id=\"부모에서-자식-계층으로-정보를-전달하는-방법은\"><a href=\"#부모에서-자식-계층으로-정보를-전달하는-방법은\" class=\"headerlink\" title=\"부모에서 자식 계층으로 정보를 전달하는 방법은?\"></a>부모에서 자식 계층으로 정보를 전달하는 방법은?</h4><p>공통 컴포넌트라고 하면 보통은 제일 마지막 자식 계층일 경우가 많다.<br>그래서 이 계층에서는 mounted 에서 부모의 clientHeight 를 구해올 수 있다. </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$parent</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$el.parent</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Vue-Component-에-타입스크립트-해서-적용해본-사례는\"><a href=\"#Vue-Component-에-타입스크립트-해서-적용해본-사례는\" class=\"headerlink\" title=\"Vue Component 에 타입스크립트 해서 적용해본 사례는?\"></a>Vue Component 에 타입스크립트 해서 적용해본 사례는?</h4><p>SFC(Single File Component) 는 Vue가 권장하는 Vue 컴포넌트 전용 파일 포맷이다. 한 파일 안에 템플릿과 자바스크립트 그리고 CSS까지 정의한다.<br>개발자가 클래스를 정의하기보다는 클래스를 만들 수 있는 옵션을 정의하는 형태로 개발한다.<br>엄격한 타입의 언어를 다루던 개발자들이 자바스크립트를 다뤄야할때 완충 역할로 타입스크립트를 사용했고,<br>타입은 어플리케이션 설계 전체에 영향을 주는 것이라 필요하게 되었다라고 말하는 <a href=\"https://ui.toast.com/weekly-pick/ko_20190327/\">shiren</a>님의 글을 보게 되었다는데 아마<br>상당한 시행착오를 겪은 걸 보고, 우리도 Vue3로 전환하면 사용하게 될 거 같다는 생각이 든다.</p>\n<h3 id=\"Vue-Test-Util\"><a href=\"#Vue-Test-Util\" class=\"headerlink\" title=\"Vue Test Util\"></a>Vue Test Util</h3><p><a href=\"https://joshua1988.github.io/vue-camp/testing/vue-test-util.html#%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\">joshua</a> 님 블로그에 보면, vue-cli 로 자동으로 설치가 된다하였지만, 기존에 만들었던 프로젝트는 vue-cli(2.x) 이라 모듈 설치방법으로 진행해봤다.<br>jest 라이브러리 설치</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jest @vue/test-utils vue-jest babel-jest --save-dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ESLint-적용하기\"><a href=\"#ESLint-적용하기\" class=\"headerlink\" title=\"ESLint 적용하기\"></a>ESLint 적용하기</h4><p>standard 를 사용해보고 싶어서 적용했고, indent만 4칸만 지정했다.<br><code>npm run eslint --fix</code> 로 사용이 가능하다.  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 기본설치</span></span><br><span class=\"line\">npm install -D --save eslint eslint=plugin-vue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 추가사항 </span></span><br><span class=\"line\">npm install -D --save eslint-plugin-<span class=\"keyword\">import</span></span><br><span class=\"line\">npm install -D --save eslint-plugin-node</span><br><span class=\"line\">npm install -D --save eslint-plugin-promise</span><br><span class=\"line\">npm install -D --save eslint-plugin-standard</span><br></pre></td></tr></table></figure>\n\n<p>indent 만 설정한 기본 파일로 세팅했다. </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .eslint.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">root</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">extends</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;standard&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:vue/recommended&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">indent</span>: [<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Child-의-이벤트를-전달하는-방법-EventBus\"><a href=\"#Child-의-이벤트를-전달하는-방법-EventBus\" class=\"headerlink\" title=\"Child 의 이벤트를 전달하는 방법 (EventBus)\"></a>Child 의 이벤트를 전달하는 방법 (EventBus)</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Child.vue</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">input</span>=<span class=\"string\">&quot;event =&gt; this.$emit(&#x27;inputChange&#x27;, event)&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Parent.vue</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">v-on:inputChange</span>=<span class=\"string\">&quot;handleChange&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Value: &#123;&#123;value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Child.vue&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"attr\">value</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">components</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            Child,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"function\"><span class=\"title\">handleChange</span>(<span class=\"params\">event</span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"keyword\">const</span> &#123; value &#125; = event.target;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"built_in\">this</span>.value = value;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>v-on:inputChange 는 심플하게 @inputChange 이렇게 사용할 수 있고,<br>@input 입력이 되면, Parent 의 handleChange 메서드에 값이 전달된다.<br>이걸 내 방법으로 표현하면, <code>this.$emit(&#39;inputChange&#39;, event)</code> 이벤트 명을 정해주면 hook 이 걸려서<br>동작한 값을 해당 이벤트 명에 전달해줄 수 있다는 의미가 될 수 있겠다.</p>\n<p>출처: <a href=\"https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component\">https://stackoverflow.com/questions/40915436/vuejs-update-parent-data-from-child-component</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktxxl2hu0000vb8zf7qv5ye3","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2i4000avb8z0pycgw6x"},{"post_id":"cktxxl2i30007vb8zct4t2wvu","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2i7000dvb8zfdiuf5eg"},{"post_id":"cktxxl2hy0001vb8zda9cb3hy","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2i7000gvb8zgkf21o69"},{"post_id":"cktxxl2i40008vb8zgcu69zt8","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2i8000ivb8zfytmhqkx"},{"post_id":"cktxxl2i5000bvb8zg92220ft","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2i9000lvb8z5nbg69fw"},{"post_id":"cktxxl2i00003vb8zdko4f70i","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ia000nvb8z1oat8jr6"},{"post_id":"cktxxl2i7000fvb8z2lijaa0r","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ib000qvb8z7h43b0ty"},{"post_id":"cktxxl2i10004vb8z6v6je49h","category_id":"cktxxl2i7000evb8z66s68c3g","_id":"cktxxl2ib000svb8z20feb31m"},{"post_id":"cktxxl2i9000kvb8z3ocdf5wr","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ic000vvb8z5txy9u49"},{"post_id":"cktxxl2i10005vb8z0eolcd4o","category_id":"cktxxl2i9000jvb8zhxqre01u","_id":"cktxxl2id000xvb8zh73xgk1v"},{"post_id":"cktxxl2ia000pvb8zfk9zc69g","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2id000zvb8zfh0tdsy5"},{"post_id":"cktxxl2i6000cvb8zeuyxatby","category_id":"cktxxl2ia000ovb8zerwp5408","_id":"cktxxl2ie0011vb8z1rwh3z0r"},{"post_id":"cktxxl2ib000rvb8z5jvl1phd","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2if0013vb8zhh29cfku"},{"post_id":"cktxxl2ic000uvb8zetw7aj4k","category_id":"cktxxl2ia000ovb8zerwp5408","_id":"cktxxl2if0015vb8zbxof1qzn"},{"post_id":"cktxxl2ia000mvb8zdg7m9ueh","category_id":"cktxxl2ia000ovb8zerwp5408","_id":"cktxxl2if0016vb8z6owx9nhd"},{"post_id":"cktxxl2ic000wvb8zc0kx5akq","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2if0017vb8z7l2t1mm8"},{"post_id":"cktxxl2id000yvb8z8qfhgc7j","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ig0018vb8z9b89hprh"},{"post_id":"cktxxl2ie0010vb8z4ksc7gl4","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ig0019vb8zd51sbxpm"},{"post_id":"cktxxl2ie0012vb8zbhzsc5lc","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ig001avb8ze7ag4sci"},{"post_id":"cktxxl2if0014vb8z57vngj6t","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ig001bvb8z4svn2x89"},{"post_id":"cktxxl2ih001cvb8zae8yat9k","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ij001fvb8zgmvm5jyp"},{"post_id":"cktxxl2ii001dvb8zdpnr6cb4","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ij001gvb8z75mqdeko"},{"post_id":"cktxxl2ii001evb8z568fgmcc","category_id":"cktxxl2hz0002vb8z4udw3wyv","_id":"cktxxl2ij001hvb8z4q709o75"}],"PostTag":[],"Tag":[]}}